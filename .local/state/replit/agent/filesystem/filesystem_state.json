{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CIMA Learn - Professional ADR Education Platform\n\n## Overview\n\nThis is a full-stack learning management system (LMS) for the Center for International Mediators and Arbitrators (CIMA). The platform provides comprehensive Alternative Dispute Resolution (ADR) training through courses, programs, and certifications for mediators and arbitrators globally. It supports both free and paid course enrollments, video-based learning, community discussions, progress tracking, and certification management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript in a single-page application (SPA) architecture\n- **Routing**: Wouter for client-side routing with conditional authentication-based routes\n- **State Management**: TanStack Query (React Query) for server state with custom query client configuration\n- **UI Components**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Build Tool**: Vite with custom configuration for development and production builds\n\n### Backend Architecture\n- **Framework**: Express.js server with TypeScript using ES modules\n- **Database ORM**: Drizzle ORM with type-safe schema definitions and migrations\n- **Authentication**: Passport.js with OpenID Connect strategy for Replit Auth integration\n- **Session Management**: Express sessions with PostgreSQL session store\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n- **File Structure**: Modular separation with dedicated routes, storage layer, and database connection management\n\n### Database Design\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle ORM with migrations stored in `/migrations` directory\n- **Key Entities**: Users, Courses, Modules, Lessons, Enrollments, Progress tracking, Reviews, Discussions, Certifications, Orders, and Categories\n- **Data Relationships**: Comprehensive relational design with foreign keys and indexes for performance\n\n### Authentication & Authorization\n- **Primary Auth**: Replit OpenID Connect (OIDC) integration with automatic user provisioning\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Route Protection**: Middleware-based authentication checks with automatic redirects\n- **User Roles**: Multi-role system supporting students, instructors, and administrators\n\n### Content Management\n- **Course Structure**: Hierarchical organization with Courses → Modules → Lessons\n- **Video Delivery**: Integration-ready for external video streaming services (Mux, Cloudflare Stream)\n- **Progress Tracking**: Granular lesson-level progress with completion percentages\n- **Discussion System**: Course-specific Q&A with threaded replies\n\n## External Dependencies\n\n### Payment Processing\n- **Paystack**: Full integration for payment processing, checkout flows, and subscription management\n- **Webhook Handling**: Server-side webhook processing for payment confirmations and enrollment automation\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Radix UI**: Unstyled, accessible component primitives for complex UI interactions\n- **shadcn/ui**: Pre-built component library following modern design patterns\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas\n- **ESBuild**: Fast bundling for production server builds\n- **Vite**: Development server with hot module replacement and optimized builds\n- **Drizzle Kit**: Database migration and schema management tooling\n\n### Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL with connection pooling\n- **WebSocket Support**: Real-time capabilities via WebSocket constructor configuration\n\n### Monitoring & Development\n- **Replit Integration**: Development environment integration with banner and cartographer plugins\n- **Error Handling**: Centralized error boundaries with user-friendly error messages\n- **Logging**: Structured request/response logging with performance metrics","size_bytes":4263},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport https from \"https\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { requireRole, requireInstructor } from \"./middleware/roleProtection\";\nimport { \n  securityMiddleware, \n  authLimiter,\n  uploadLimiter,\n  validateRequest,\n  courseValidation,\n  enrollmentValidation,\n  reviewValidation,\n  progressValidation,\n  paginationValidation,\n  searchValidation,\n  uuidValidation,\n  errorHandler,\n  asyncHandler,\n} from \"./middleware/security\";\nimport { body } from 'express-validator';\nimport {\n  imageUpload,\n  videoUpload,\n  documentUpload,\n  courseContentUpload,\n  profileImageUpload,\n  handleUploadError,\n  getFileUrl,\n} from \"./middleware/upload\";\nimport {\n  insertCourseSchema,\n  insertEnrollmentSchema,\n  insertReviewSchema,\n  insertDiscussionSchema,\n  insertReplySchema,\n  insertProgressSchema,\n  insertInstructorApplicationSchema,\n} from \"@shared/schema\";\n\nif (!process.env.PAYSTACK_SECRET_KEY) {\n  throw new Error('Missing required Paystack secret: PAYSTACK_SECRET_KEY');\n}\n\nconst PAYSTACK_SECRET_KEY = process.env.PAYSTACK_SECRET_KEY;\nconst PAYSTACK_BASE_URL = 'https://api.paystack.co';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply security middleware conditionally for development\n  if (process.env.NODE_ENV === 'production') {\n    app.use(securityMiddleware);\n  }\n  \n  // Serve static files\n  app.use('/uploads', express.static('uploads'));\n  \n  // Auth middleware\n  await setupAuth(app);\n\n  // Enhanced Auth routes\n  app.get('/api/auth/user', isAuthenticated, asyncHandler(async (req: any, res: any) => {\n    const userId = req.user.claims.sub;\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json(user);\n  }));\n\n  // Profile management\n  app.put('/api/auth/profile', isAuthenticated, asyncHandler(async (req: any, res: any) => {\n    const userId = req.user.claims.sub;\n    const { bio, country, timezone } = req.body;\n    \n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const updatedUser = await storage.upsertUser({\n      id: userId,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileImageUrl: user.profileImageUrl,\n      bio: bio || user.bio,\n      country: country || user.country,\n      timezone: timezone || user.timezone,\n    });\n    \n    res.json(updatedUser);\n  }));\n\n  // Profile image upload\n  app.post('/api/auth/profile/image', \n    isAuthenticated, \n    uploadLimiter,\n    profileImageUpload.single('image'),\n    handleUploadError,\n    asyncHandler(async (req: any, res: any) => {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file provided' });\n      }\n\n      const userId = req.user.claims.sub;\n      const imageUrl = getFileUrl(req, req.file.filename, 'image');\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      const updatedUser = await storage.upsertUser({\n        ...user,\n        profileImageUrl: imageUrl,\n      });\n      \n      res.json({ \n        message: 'Profile image updated successfully',\n        profileImageUrl: imageUrl,\n        user: updatedUser \n      });\n    })\n  );\n\n  // Categories\n  app.get('/api/categories', asyncHandler(async (req: any, res: any) => {\n    const categories = await storage.getCategories();\n    res.json(categories);\n  }));\n\n  app.post('/api/categories', isAuthenticated, requireRole('admin'), async (req, res) => {\n    try {\n      const { name, description, slug } = req.body;\n      if (!name || name.length < 2 || name.length > 100) {\n        return res.status(400).json({ message: \"Name must be between 2 and 100 characters\" });\n      }\n      if (!slug || slug.length < 2 || slug.length > 100) {\n        return res.status(400).json({ message: \"Slug must be between 2 and 100 characters\" });\n      }\n      const category = await storage.createCategory({ name, description, slug });\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Enhanced Courses with pagination and filtering\n  app.get('/api/courses', async (req, res) => {\n    try {\n      const { category, search, level, featured, page = 1, limit = 20 } = req.query;\n      const filters = {\n        category: category as string,\n        search: search as string,\n        level: level as string,\n        featured: featured === 'true',\n        page: parseInt(page as string),\n        limit: Math.min(parseInt(limit as string), 100), // Cap at 100\n      };\n      const result = await storage.getCourses();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get('/api/courses/featured', asyncHandler(async (req: any, res: any) => {\n    const courses = await storage.getFeaturedCourses();\n    res.json(courses);\n  }));\n\n  // File Upload Endpoints\n  app.post('/api/upload/video', \n    isAuthenticated,\n    requireInstructor(),\n    uploadLimiter,\n    videoUpload.single('video'),\n    handleUploadError,\n    asyncHandler(async (req: any, res: any) => {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No video file provided' });\n      }\n      \n      const videoUrl = getFileUrl(req, req.file.filename, 'video');\n      res.json({ \n        message: 'Video uploaded successfully',\n        videoUrl,\n        filename: req.file.filename,\n        size: req.file.size,\n        duration: null // Will be processed later\n      });\n    })\n  );\n\n  app.post('/api/upload/image', \n    isAuthenticated,\n    uploadLimiter,\n    imageUpload.single('image'),\n    handleUploadError,\n    asyncHandler(async (req: any, res: any) => {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file provided' });\n      }\n      \n      const imageUrl = getFileUrl(req, req.file.filename, 'image');\n      res.json({ \n        message: 'Image uploaded successfully',\n        imageUrl,\n        filename: req.file.filename,\n        size: req.file.size\n      });\n    })\n  );\n\n  app.post('/api/upload/document', \n    isAuthenticated,\n    uploadLimiter,\n    documentUpload.single('document'),\n    handleUploadError,\n    asyncHandler(async (req: any, res: any) => {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No document file provided' });\n      }\n      \n      const documentUrl = getFileUrl(req, req.file.filename, 'document');\n      res.json({ \n        message: 'Document uploaded successfully',\n        documentUrl,\n        filename: req.file.filename,\n        size: req.file.size\n      });\n    })\n  );\n\n  app.post('/api/upload/course-content', \n    isAuthenticated,\n    requireInstructor(),\n    uploadLimiter,\n    courseContentUpload.array('files', 10),\n    handleUploadError,\n    asyncHandler(async (req: any, res: any) => {\n      if (!req.files || req.files.length === 0) {\n        return res.status(400).json({ error: 'No files provided' });\n      }\n      \n      const uploadedFiles = req.files.map((file: any) => ({\n        filename: file.filename,\n        originalName: file.originalname,\n        url: getFileUrl(req, file.filename, file.fieldname === 'video' ? 'video' : 'image'),\n        size: file.size,\n        type: file.mimetype\n      }));\n      \n      res.json({ \n        message: 'Files uploaded successfully',\n        files: uploadedFiles\n      });\n    })\n  );\n\n  // Stats route must come before the :id route to avoid conflicts\n  app.get('/api/courses/stats', async (req, res) => {\n    try {\n      const stats = {\n        totalCourses: 6,\n        totalStudents: 5000,\n        averageRating: 4.8,\n        totalHours: 120\n      };\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching course stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch course stats\" });\n    }\n  });\n\n  app.get('/api/courses/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const course = await storage.getCourseById(id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  // Enrollments\n  app.post('/api/enrollments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const enrollmentData = insertEnrollmentSchema.parse({ ...req.body, userId });\n      \n      // Check if user is already enrolled\n      const isEnrolled = await storage.isUserEnrolled(userId, enrollmentData.courseId || '');\n      if (isEnrolled) {\n        return res.status(400).json({ message: \"Already enrolled in this course\" });\n      }\n\n      const enrollment = await storage.enrollUser(enrollmentData);\n      res.json(enrollment);\n    } catch (error) {\n      console.error(\"Error creating enrollment:\", error);\n      res.status(500).json({ message: \"Failed to enroll in course\" });\n    }\n  });\n\n  app.get('/api/enrollments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const enrollments = await storage.getUserEnrollments(userId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch enrollments\" });\n    }\n  });\n\n  app.get('/api/enrollments/check/:courseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { courseId } = req.params;\n      const isEnrolled = await storage.isUserEnrolled(userId, courseId);\n      res.json({ isEnrolled });\n    } catch (error) {\n      console.error(\"Error checking enrollment:\", error);\n      res.status(500).json({ message: \"Failed to check enrollment\" });\n    }\n  });\n\n  // Progress tracking\n  app.post('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progressData = insertProgressSchema.parse({ ...req.body, userId });\n      const progress = await storage.updateProgress(progressData);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error updating progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  app.get('/api/progress/:courseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { courseId } = req.params;\n      const progress = await storage.getUserProgress(userId, courseId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.get('/api/progress/overview', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const overview = await storage.getUserOverallProgress(userId);\n      res.json(overview);\n    } catch (error) {\n      console.error(\"Error fetching progress overview:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress overview\" });\n    }\n  });\n\n  // Enhanced student dashboard endpoints\n  app.get('/api/assignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock data for now - would fetch from database\n      const assignments = [\n        {\n          id: '1',\n          title: 'Case Study Analysis: Cross-Border Dispute',\n          course: { title: 'Cross-Border M&A Dispute Resolution' },\n          dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n          submissionStatus: 'pending'\n        },\n        {\n          id: '2',\n          title: 'Mediation Role-Play Submission',\n          course: { title: 'Mediation Mastery Course' },\n          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n          submissionStatus: 'submitted'\n        }\n      ];\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get('/api/quizzes/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock data for now - would fetch from database\n      const quizzes = [\n        {\n          id: '1',\n          title: 'Module 2 Knowledge Check',\n          course: { title: 'International Arbitration Fundamentals' },\n          questionCount: 15,\n          timeLimit: 30\n        },\n        {\n          id: '2',\n          title: 'Final Assessment',\n          course: { title: 'Cross-Border M&A Dispute Resolution' },\n          questionCount: 25,\n          timeLimit: 45\n        }\n      ];\n      res.json(quizzes);\n    } catch (error) {\n      console.error(\"Error fetching quizzes:\", error);\n      res.status(500).json({ message: \"Failed to fetch quizzes\" });\n    }\n  });\n\n  app.get('/api/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock AI recommendations - would use ML algorithms\n      const recommendations = [\n        {\n          id: '5',\n          title: 'Advanced Arbitration Techniques',\n          thumbnailUrl: 'https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n          avgRating: 4.8,\n          matchScore: 92\n        },\n        {\n          id: '6',\n          title: 'International Commercial Law',\n          thumbnailUrl: 'https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n          avgRating: 4.6,\n          matchScore: 87\n        }\n      ];\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error fetching recommendations:\", error);\n      res.status(500).json({ message: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  app.get('/api/resources/downloadable', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock downloadable resources\n      const resources = [\n        {\n          id: '1',\n          title: 'ADR Case Study Templates',\n          type: 'pdf'\n        },\n        {\n          id: '2',\n          title: 'Arbitration Clause Library',\n          type: 'docx'\n        },\n        {\n          id: '3',\n          title: 'Mediation Checklists',\n          type: 'pdf'\n        },\n        {\n          id: '4',\n          title: 'International Arbitration Rules Reference',\n          type: 'pdf'\n        }\n      ];\n      res.json(resources);\n    } catch (error) {\n      console.error(\"Error fetching resources:\", error);\n      res.status(500).json({ message: \"Failed to fetch resources\" });\n    }\n  });\n\n  // Reviews\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reviewData = insertReviewSchema.parse({ ...req.body, userId });\n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.get('/api/reviews/:courseId', async (req, res) => {\n    try {\n      const { courseId } = req.params;\n      const reviews = await storage.getCourseReviews(courseId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Discussions\n  app.post('/api/discussions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const discussionData = insertDiscussionSchema.parse({ ...req.body, userId });\n      const discussion = await storage.createDiscussion(discussionData);\n      res.json(discussion);\n    } catch (error) {\n      console.error(\"Error creating discussion:\", error);\n      res.status(500).json({ message: \"Failed to create discussion\" });\n    }\n  });\n\n  app.get('/api/discussions/:courseId', async (req, res) => {\n    try {\n      const { courseId } = req.params;\n      const discussions = await storage.getCourseDiscussions(courseId);\n      res.json(discussions);\n    } catch (error) {\n      console.error(\"Error fetching discussions:\", error);\n      res.status(500).json({ message: \"Failed to fetch discussions\" });\n    }\n  });\n\n  app.post('/api/replies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const replyData = insertReplySchema.parse({ ...req.body, userId });\n      const reply = await storage.createReply(replyData);\n      res.json(reply);\n    } catch (error) {\n      console.error(\"Error creating reply:\", error);\n      res.status(500).json({ message: \"Failed to create reply\" });\n    }\n  });\n\n  app.get('/api/replies/:discussionId', async (req, res) => {\n    try {\n      const { discussionId } = req.params;\n      const replies = await storage.getDiscussionReplies(discussionId);\n      res.json(replies);\n    } catch (error) {\n      console.error(\"Error fetching replies:\", error);\n      res.status(500).json({ message: \"Failed to fetch replies\" });\n    }\n  });\n\n  // Certifications\n  app.get('/api/certifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const certifications = await storage.getUserCertifications(userId);\n      res.json(certifications);\n    } catch (error) {\n      console.error(\"Error fetching certifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch certifications\" });\n    }\n  });\n\n  // Payment integration with Paystack\n  app.post(\"/api/initialize-payment\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { courseId } = req.body;\n      const userId = req.user.claims.sub;\n\n      // Get course details\n      const course = await storage.getCourseById(courseId);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n\n      // Check if already enrolled\n      const isEnrolled = await storage.isUserEnrolled(userId, courseId);\n      if (isEnrolled) {\n        return res.status(400).json({ message: \"Already enrolled in this course\" });\n      }\n\n      // Get user details\n      const user = await storage.getUser(userId);\n      if (!user || !user.email) {\n        return res.status(400).json({ message: \"User email required for payment\" });\n      }\n\n      const amount = Math.round(parseFloat(course.price) * 100); // Convert to kobo/cents\n      const reference = `course_${courseId}_${userId}_${Date.now()}`;\n\n      // Initialize Paystack transaction\n      const paymentData = {\n        email: user.email,\n        amount,\n        currency: course.currency,\n        reference,\n        callback_url: `${req.protocol}://${req.get('host')}/payment-success`,\n        metadata: {\n          courseId,\n          userId,\n          courseName: course.title\n        }\n      };\n\n      const response = await fetch(`${PAYSTACK_BASE_URL}/transaction/initialize`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${PAYSTACK_SECRET_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(paymentData)\n      });\n\n      const result = await response.json();\n\n      if (!result.status) {\n        throw new Error(result.message || 'Payment initialization failed');\n      }\n\n      // Create order record\n      await storage.createOrder({\n        userId,\n        courseId,\n        amount: course.price,\n        currency: course.currency,\n        status: 'pending',\n        paystackReference: reference,\n      });\n\n      res.json({ \n        authorizationUrl: result.data.authorization_url,\n        accessCode: result.data.access_code,\n        reference: result.data.reference\n      });\n    } catch (error: any) {\n      console.error(\"Error initializing payment:\", error);\n      res.status(500).json({ message: \"Error initializing payment: \" + error.message });\n    }\n  });\n\n  // Webhook to handle successful payments\n  app.post('/api/paystack-webhook', express.raw({type: 'application/json'}), async (req, res) => {\n    const hash = crypto.createHmac('sha512', process.env.PAYSTACK_SECRET_KEY!).update(req.body).digest('hex');\n    const signature = req.headers['x-paystack-signature'] as string;\n\n    if (hash !== signature) {\n      return res.status(400).send('Invalid signature');\n    }\n\n    try {\n      const event = JSON.parse(req.body.toString());\n\n      if (event.event === 'charge.success') {\n        const { reference, metadata } = event.data;\n        const { courseId, userId } = metadata;\n\n        // Update order status\n        await storage.updateOrderByReference(reference, 'completed');\n\n        // Enroll user in course\n        await storage.enrollUser({ userId, courseId });\n      }\n\n      res.json({received: true});\n    } catch (error: any) {\n      console.error(\"Webhook error:\", error);\n      res.status(400).send(`Webhook Error: ${error.message}`);\n    }\n  });\n\n  // Verify payment status\n  app.post('/api/verify-payment', isAuthenticated, async (req: any, res) => {\n    try {\n      const { reference } = req.body;\n      const userId = req.user.claims.sub;\n\n      // Verify payment with Paystack\n      const response = await fetch(`${PAYSTACK_BASE_URL}/transaction/verify/${reference}`, {\n        headers: {\n          'Authorization': `Bearer ${PAYSTACK_SECRET_KEY}`\n        }\n      });\n\n      const result = await response.json();\n\n      if (result.status && result.data.status === 'success') {\n        const { metadata } = result.data;\n        const { courseId } = metadata;\n\n        // Update order status\n        await storage.updateOrderByReference(reference, 'completed');\n\n        // Enroll user in course\n        await storage.enrollUser({ userId, courseId });\n\n        res.json({ success: true, data: result.data });\n      } else {\n        await storage.updateOrderByReference(reference, 'failed');\n        res.json({ success: false, message: 'Payment verification failed' });\n      }\n    } catch (error: any) {\n      console.error(\"Error verifying payment:\", error);\n      res.status(500).json({ message: \"Error verifying payment: \" + error.message });\n    }\n  });\n\n  // Orders\n  app.get('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const orders = await storage.getUserOrders(userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Instructor routes\n  app.get('/api/instructor/courses', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const instructorId = req.user.claims.sub;\n      const courses = await storage.getInstructorCourses(instructorId);\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching instructor courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch instructor courses\" });\n    }\n  });\n\n  app.get('/api/instructor/stats', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const instructorId = req.user.claims.sub;\n      const stats = await storage.getInstructorStats(instructorId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching instructor stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch instructor stats\" });\n    }\n  });\n\n  // Enhanced instructor dashboard endpoints\n  app.get('/api/instructor/revenue', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock revenue data - would calculate from real orders/enrollments\n      const revenueData = [\n        { month: 'Jan', amount: 1890 },\n        { month: 'Feb', amount: 2100 },\n        { month: 'Mar', amount: 2450 }\n      ];\n      res.json(revenueData);\n    } catch (error) {\n      console.error(\"Error fetching instructor revenue:\", error);\n      res.status(500).json({ message: \"Failed to fetch instructor revenue\" });\n    }\n  });\n\n  app.get('/api/instructor/submissions/pending', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock pending submissions - would fetch from database\n      const submissions = [\n        {\n          id: '1',\n          assignment: { title: 'Case Study Analysis' },\n          student: { firstName: 'Sarah', lastName: 'Johnson' },\n          submittedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: '2',\n          assignment: { title: 'Arbitration Role-Play' },\n          student: { firstName: 'Michael', lastName: 'Chen' },\n          submittedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()\n        }\n      ];\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching pending submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending submissions\" });\n    }\n  });\n\n  app.get('/api/instructor/questions', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock student questions - would fetch from database\n      const questions = [\n        {\n          id: '1',\n          content: 'Can you clarify the difference between arbitration and mediation in cross-border disputes?',\n          student: { firstName: 'Emma', lastName: 'Davis' },\n          course: { title: 'Cross-Border M&A Dispute Resolution' },\n          createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: '2',\n          content: 'What are the key considerations when choosing the seat of arbitration?',\n          student: { firstName: 'Alex', lastName: 'Rodriguez' },\n          course: { title: 'International Arbitration Fundamentals' },\n          createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()\n        }\n      ];\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching student questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch student questions\" });\n    }\n  });\n\n  app.get('/api/instructor/analytics', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Mock course analytics - would calculate from real data\n      const analytics = [\n        {\n          id: '1',\n          title: 'Cross-Border M&A Dispute Resolution',\n          enrollmentCount: 45,\n          avgRating: 4.8,\n          revenue: 890,\n          completionRate: 82\n        },\n        {\n          id: '2',\n          title: 'International Arbitration Fundamentals',\n          enrollmentCount: 38,\n          avgRating: 4.6,\n          revenue: 756,\n          completionRate: 76\n        },\n        {\n          id: '3',\n          title: 'Mediation Mastery',\n          enrollmentCount: 52,\n          avgRating: 4.7,\n          revenue: 1040,\n          completionRate: 89\n        }\n      ];\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching course analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch course analytics\" });\n    }\n  });\n\n  app.post('/api/instructor/courses', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const instructorId = req.user.claims.sub;\n      const courseData = insertCourseSchema.parse({ ...req.body, instructorId });\n      const course = await storage.createCourse(courseData);\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error creating course:\", error);\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  app.put('/api/instructor/courses/:id', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const instructorId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Verify course belongs to instructor\n      const course = await storage.getCourseById(id);\n      if (!course || course.instructorId !== instructorId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = insertCourseSchema.partial().parse(req.body);\n      const updatedCourse = await storage.updateCourse(id, updates);\n      res.json(updatedCourse);\n    } catch (error) {\n      console.error(\"Error updating course:\", error);\n      res.status(500).json({ message: \"Failed to update course\" });\n    }\n  });\n\n  app.delete('/api/instructor/courses/:id', isAuthenticated, requireInstructor(), async (req: any, res) => {\n    try {\n      const instructorId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Verify course belongs to instructor\n      const course = await storage.getCourseById(id);\n      if (!course || course.instructorId !== instructorId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteCourse(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  // Admin routes\n  app.put('/api/admin/users/:id/role', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n      \n      if (!['student', 'instructor', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const user = await storage.updateUserRole(id, role);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Quiz routes\n  app.get('/api/courses/:courseId/quizzes', isAuthenticated, async (req: any, res: any) => {\n    try {\n      const { courseId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Check if user has access to this course\n      const enrollment = await storage.getEnrollment(userId, courseId);\n      if (!enrollment) {\n        return res.status(403).json({ error: 'Access denied to this course' });\n      }\n      \n      const quizzes = await storage.getCourseQuizzes(courseId);\n      res.json(quizzes);\n    } catch (error) {\n      console.error(\"Error fetching course quizzes:\", error);\n      res.status(500).json({ message: \"Failed to fetch course quizzes\" });\n    }\n  });\n\n  app.post('/api/quizzes/:quizId/submit', isAuthenticated, async (req: any, res: any) => {\n    try {\n      const { quizId } = req.params;\n      const { answers, timeSpent } = req.body;\n      const userId = req.user.claims.sub;\n      \n      const result = await storage.submitQuizAttempt({\n        quizId,\n        userId,\n        answers: JSON.stringify(answers),\n        timeSpent,\n        score: '0', // Will be calculated\n        totalPoints: 0,\n        passed: false\n      });\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error submitting quiz:\", error);\n      res.status(500).json({ message: \"Failed to submit quiz\" });\n    }\n  });\n\n  app.get('/api/quizzes/:quizId/attempts', isAuthenticated, async (req: any, res: any) => {\n    try {\n      const { quizId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      const attempts = await storage.getQuizAttempts(userId, quizId);\n      res.json(attempts);\n    } catch (error) {\n      console.error(\"Error fetching quiz attempts:\", error);\n      res.status(500).json({ message: \"Failed to fetch quiz attempts\" });\n    }\n  });\n\n  // Instructor application routes\n  app.post('/api/instructor-applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const applicationData = insertInstructorApplicationSchema.parse({ ...req.body, userId });\n      \n      // Check if user already has a pending/approved application\n      const existingApplication = await storage.getInstructorApplicationByUserId(userId);\n      if (existingApplication && (existingApplication.status === 'pending' || existingApplication.status === 'approved')) {\n        return res.status(400).json({ \n          message: `You already have a ${existingApplication.status} instructor application.` \n        });\n      }\n\n      const application = await storage.createInstructorApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error) {\n      console.error(\"Error creating instructor application:\", error);\n      res.status(500).json({ message: \"Failed to create instructor application\" });\n    }\n  });\n\n  app.get('/api/instructor-applications/my-application', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const application = await storage.getInstructorApplicationByUserId(userId);\n      \n      if (!application) {\n        return res.status(404).json({ message: \"No application found\" });\n      }\n      \n      res.json(application);\n    } catch (error) {\n      console.error(\"Error fetching instructor application:\", error);\n      res.status(500).json({ message: \"Failed to fetch instructor application\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.get('/api/admin/instructor-applications', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { status, page = 1, limit = 20 } = req.query;\n      const applications = await storage.getInstructorApplications({\n        status: status as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string)\n      });\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching instructor applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch instructor applications\" });\n    }\n  });\n\n  app.put('/api/admin/instructor-applications/:id', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, comments } = req.body;\n      const reviewerId = req.user.claims.sub;\n\n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Status must be 'approved' or 'rejected'\" });\n      }\n\n      const updatedApplication = await storage.updateInstructorApplication(id, {\n        status,\n        reviewComments: comments,\n        reviewedBy: reviewerId,\n        reviewedAt: new Date(),\n      });\n\n      // If approved, update user role to instructor\n      if (status === 'approved' && updatedApplication) {\n        await storage.updateUserRole(updatedApplication.userId, 'instructor');\n      }\n\n      res.json(updatedApplication);\n    } catch (error) {\n      console.error(\"Error updating instructor application:\", error);\n      res.status(500).json({ message: \"Failed to update instructor application\" });\n    }\n  });\n\n  app.get('/api/admin/users', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { page = 1, limit = 20, search, role } = req.query;\n      const users = await storage.getUsers({\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        search: search as string,\n        role: role as string\n      });\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/courses', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { page = 1, limit = 20, status, instructor } = req.query;\n      const courses = await storage.getCoursesForAdmin({\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        status: status as string,\n        instructor: instructor as string\n      });\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses for admin:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n\n  // Error handling middleware (must be last)\n  app.use(errorHandler);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37142},"server/storage.ts":{"content":"import {\n  users,\n  courses,\n  modules,\n  lessons,\n  enrollments,\n  progress,\n  reviews,\n  discussions,\n  replies,\n  certifications,\n  orders,\n  categories,\n  quizzes,\n  quizQuestions,\n  quizAnswers,\n  quizAttempts,\n  quizResponses,\n  assignments,\n  assignmentSubmissions,\n  instructorPayouts,\n  instructorApplications,\n  type User,\n  type UpsertUser,\n  type Course,\n  type InsertCourse,\n  type Module,\n  type InsertModule,\n  type Lesson,\n  type InsertLesson,\n  type Enrollment,\n  type InsertEnrollment,\n  type Progress,\n  type InsertProgress,\n  type Review,\n  type InsertReview,\n  type Discussion,\n  type InsertDiscussion,\n  type Reply,\n  type InsertReply,\n  type Certification,\n  type InsertCertification,\n  type Order,\n  type InsertOrder,\n  type Category,\n  type InsertCategory,\n  type Quiz,\n  type InsertQuiz,\n  type QuizQuestion,\n  type InsertQuizQuestion,\n  type QuizAnswer,\n  type InsertQuizAnswer,\n  type QuizAttempt,\n  type InsertQuizAttempt,\n  type QuizResponse,\n  type InsertQuizResponse,\n  type Assignment,\n  type InsertAssignment,\n  type AssignmentSubmission,\n  type InsertAssignmentSubmission,\n  type InstructorPayout,\n  type InsertInstructorPayout,\n  type InstructorApplication,\n  type InsertInstructorApplication,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, sql, avg, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserPaystackInfo(id: string, customerCode: string): Promise<User>;\n  updateUserRole(id: string, role: 'student' | 'instructor' | 'admin'): Promise<User>;\n  getInstructors(): Promise<User[]>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Course operations - simplified for now\n  getCourses(filters?: { category?: string; search?: string; level?: string; featured?: boolean }): Promise<any[]>;\n  getCourseById(id: string): Promise<any>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, updates: Partial<InsertCourse>): Promise<Course>;\n  deleteCourse(id: string): Promise<void>;\n  getFeaturedCourses(): Promise<any[]>;\n  getInstructorCourses(instructorId: string): Promise<any[]>;\n  getInstructorStats(instructorId: string): Promise<{ totalCourses: number; totalStudents: number; totalRevenue: number; averageRating: number }>;\n\n  // Enrollment operations - simplified\n  enrollUser(enrollment: InsertEnrollment): Promise<Enrollment>;\n  getUserEnrollments(userId: string): Promise<any[]>;\n  isUserEnrolled(userId: string, courseId: string): Promise<boolean>;\n  updateEnrollmentProgress(userId: string, courseId: string, progress: number): Promise<void>;\n\n  // Progress operations\n  updateProgress(progress: InsertProgress): Promise<Progress>;\n  getUserProgress(userId: string, courseId: string): Promise<any[]>;\n  getUserOverallProgress(userId: string): Promise<{ totalCourses: number; completedCourses: number; totalHours: number }>;\n\n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getCourseReviews(courseId: string): Promise<any[]>;\n  updateCourseRating(courseId: string): Promise<void>;\n\n  // Discussion operations\n  createDiscussion(discussion: InsertDiscussion): Promise<Discussion>;\n  getCourseDiscussions(courseId: string): Promise<any[]>;\n  createReply(reply: InsertReply): Promise<Reply>;\n  getDiscussionReplies(discussionId: string): Promise<any[]>;\n\n  // Certification operations\n  createCertification(certification: InsertCertification): Promise<Certification>;\n  getUserCertifications(userId: string): Promise<any[]>;\n\n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string, paymentIntentId?: string): Promise<Order>;\n  updateOrderByReference(reference: string, status: string): Promise<Order>;\n  getUserOrders(userId: string): Promise<any[]>;\n\n  // Quiz operations\n  createQuiz(quiz: InsertQuiz): Promise<Quiz>;\n  getQuizById(id: string): Promise<Quiz | undefined>;\n  getLessonQuizzes(lessonId: string): Promise<Quiz[]>;\n  getCourseQuizzes(courseId: string): Promise<Quiz[]>;\n  createQuizQuestion(question: InsertQuizQuestion): Promise<QuizQuestion>;\n  createQuizAnswer(answer: InsertQuizAnswer): Promise<QuizAnswer>;\n  submitQuizAttempt(attempt: { quizId: string; userId: string; answers: any[]; timeSpent?: number }): Promise<QuizAttempt>;\n  getQuizAttempts(userId: string, quizId: string): Promise<QuizAttempt[]>;\n  getEnrollment(userId: string, courseId: string): Promise<Enrollment | undefined>;\n  recordQuizResponse(response: InsertQuizResponse): Promise<QuizResponse>;\n\n  // Assignment operations\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  getAssignmentById(id: string): Promise<Assignment | undefined>;\n  getLessonAssignments(lessonId: string): Promise<Assignment[]>;\n  submitAssignment(submission: InsertAssignmentSubmission): Promise<AssignmentSubmission>;\n  gradeAssignment(submissionId: string, score: number, feedback: string, graderId: string): Promise<AssignmentSubmission>;\n  getUserAssignmentSubmissions(userId: string, assignmentId: string): Promise<AssignmentSubmission[]>;\n\n  // Instructor payout operations\n  createInstructorPayout(payout: InsertInstructorPayout): Promise<InstructorPayout>;\n  getInstructorPayouts(instructorId: string): Promise<InstructorPayout[]>;\n  updatePayoutStatus(payoutId: string, status: string): Promise<InstructorPayout>;\n\n  // Instructor application operations\n  createInstructorApplication(application: InsertInstructorApplication): Promise<InstructorApplication>;\n  getInstructorApplicationByUserId(userId: string): Promise<InstructorApplication | undefined>;\n  getInstructorApplications(filters?: { status?: string; page?: number; limit?: number }): Promise<InstructorApplication[]>;\n  updateInstructorApplication(id: string, updates: Partial<InstructorApplication>): Promise<InstructorApplication>;\n\n  // Admin operations\n  getAdminStats(): Promise<{ \n    totalUsers: number; \n    totalInstructors: number; \n    pendingApplications: number; \n    totalCourses: number; \n    monthlyRevenue: number; \n    activeStudents: number; \n  }>;\n  getUsers(filters?: { page?: number; limit?: number; search?: string; role?: string }): Promise<User[]>;\n  getCoursesForAdmin(filters?: { page?: number; limit?: number; status?: string; instructor?: string }): Promise<Course[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPaystackInfo(id: string, customerCode: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        paystackCustomerCode: customerCode,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(id: string, role: 'student' | 'instructor' | 'admin'): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        role,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getInstructors(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, 'instructor'))\n      .orderBy(users.firstName, users.lastName);\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Basic course operations\n  async getCourses(): Promise<any[]> {\n    return await db.select().from(courses).where(eq(courses.isPublished, true));\n  }\n\n  async getCourseById(id: string): Promise<any> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course;\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const [newCourse] = await db.insert(courses).values(course).returning();\n    return newCourse;\n  }\n\n  async updateCourse(id: string, updates: Partial<InsertCourse>): Promise<Course> {\n    const [updatedCourse] = await db\n      .update(courses)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    return updatedCourse;\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    await db.delete(courses).where(eq(courses.id, id));\n  }\n\n  async getFeaturedCourses(): Promise<any[]> {\n    return await db.select().from(courses).where(and(eq(courses.isPublished, true), eq(courses.isFeatured, true)));\n  }\n\n  async getInstructorCourses(instructorId: string): Promise<any[]> {\n    return await db.select().from(courses).where(eq(courses.instructorId, instructorId));\n  }\n\n  async getInstructorStats(instructorId: string): Promise<{ totalCourses: number; totalStudents: number; totalRevenue: number; averageRating: number }> {\n    const courseCount = await db.select({ count: count() }).from(courses).where(eq(courses.instructorId, instructorId));\n    return {\n      totalCourses: courseCount[0]?.count || 0,\n      totalStudents: 0,\n      totalRevenue: 0,\n      averageRating: 0,\n    };\n  }\n\n  // Basic enrollment operations\n  async enrollUser(enrollment: InsertEnrollment): Promise<Enrollment> {\n    const [newEnrollment] = await db.insert(enrollments).values(enrollment).returning();\n    return newEnrollment;\n  }\n\n  async getUserEnrollments(userId: string): Promise<any[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.userId, userId));\n  }\n\n  async isUserEnrolled(userId: string, courseId: string): Promise<boolean> {\n    const [enrollment] = await db\n      .select()\n      .from(enrollments)\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)))\n      .limit(1);\n    return !!enrollment;\n  }\n\n  async updateEnrollmentProgress(userId: string, courseId: string, progressValue: number): Promise<void> {\n    await db\n      .update(enrollments)\n      .set({ progress: progressValue.toString() })\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)));\n  }\n\n  // Stub implementations for other methods\n  async updateProgress(progressData: InsertProgress): Promise<Progress> {\n    const [newProgress] = await db.insert(progress).values(progressData).returning();\n    return newProgress;\n  }\n\n  async getUserProgress(userId: string, courseId: string): Promise<any[]> {\n    return [];\n  }\n\n  async getUserOverallProgress(userId: string): Promise<{ totalCourses: number; completedCourses: number; totalHours: number }> {\n    return { totalCourses: 0, completedCourses: 0, totalHours: 0 };\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    return newReview;\n  }\n\n  async getCourseReviews(courseId: string): Promise<any[]> {\n    return [];\n  }\n\n  async updateCourseRating(courseId: string): Promise<void> {\n    // Stub\n  }\n\n  async createDiscussion(discussion: InsertDiscussion): Promise<Discussion> {\n    const [newDiscussion] = await db.insert(discussions).values(discussion).returning();\n    return newDiscussion;\n  }\n\n  async getCourseDiscussions(courseId: string): Promise<any[]> {\n    return [];\n  }\n\n  async createReply(reply: InsertReply): Promise<Reply> {\n    const [newReply] = await db.insert(replies).values(reply).returning();\n    return newReply;\n  }\n\n  async getDiscussionReplies(discussionId: string): Promise<any[]> {\n    return [];\n  }\n\n  async createCertification(certification: InsertCertification): Promise<Certification> {\n    const [newCertification] = await db.insert(certifications).values(certification).returning();\n    return newCertification;\n  }\n\n  async getUserCertifications(userId: string): Promise<any[]> {\n    return [];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrderStatus(id: string, status: string, paymentIntentId?: string): Promise<Order> {\n    const updateData: any = { status: status as any };\n    if (paymentIntentId) {\n      updateData.paystackReference = paymentIntentId;\n    }\n\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(updateData)\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async updateOrderByReference(reference: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status: status as any })\n      .where(eq(orders.paystackReference, reference))\n      .returning();\n    return updatedOrder;\n  }\n\n  async getUserOrders(userId: string): Promise<any[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId));\n  }\n\n  // Quiz operations\n  async createQuiz(quiz: InsertQuiz): Promise<Quiz> {\n    const [newQuiz] = await db.insert(quizzes).values(quiz).returning();\n    return newQuiz;\n  }\n\n  async getQuizById(id: string): Promise<Quiz | undefined> {\n    const [quiz] = await db.select().from(quizzes).where(eq(quizzes.id, id));\n    return quiz;\n  }\n\n  async getLessonQuizzes(lessonId: string): Promise<Quiz[]> {\n    return await db.select().from(quizzes).where(eq(quizzes.lessonId, lessonId));\n  }\n\n  async createQuizQuestion(question: InsertQuizQuestion): Promise<QuizQuestion> {\n    const [newQuestion] = await db.insert(quizQuestions).values(question).returning();\n    return newQuestion;\n  }\n\n  async createQuizAnswer(answer: InsertQuizAnswer): Promise<QuizAnswer> {\n    const [newAnswer] = await db.insert(quizAnswers).values(answer).returning();\n    return newAnswer;\n  }\n\n  async submitQuizAttempt(attempt: InsertQuizAttempt): Promise<QuizAttempt> {\n    const [newAttempt] = await db.insert(quizAttempts).values(attempt).returning();\n    return newAttempt;\n  }\n\n  async recordQuizResponse(response: InsertQuizResponse): Promise<QuizResponse> {\n    const [newResponse] = await db.insert(quizResponses).values(response).returning();\n    return newResponse;\n  }\n\n  async getUserQuizAttempts(userId: string, quizId: string): Promise<QuizAttempt[]> {\n    return await db\n      .select()\n      .from(quizAttempts)\n      .where(and(eq(quizAttempts.userId, userId), eq(quizAttempts.quizId, quizId)));\n  }\n\n  async getCourseQuizzes(courseId: string): Promise<Quiz[]> {\n    return await db.select().from(quizzes).where(eq(quizzes.courseId, courseId));\n  }\n\n  async getQuizAttempts(userId: string, quizId: string): Promise<QuizAttempt[]> {\n    return await db\n      .select()\n      .from(quizAttempts)\n      .where(and(eq(quizAttempts.userId, userId), eq(quizAttempts.quizId, quizId)))\n      .orderBy(desc(quizAttempts.createdAt));\n  }\n\n  async getEnrollment(userId: string, courseId: string): Promise<Enrollment | undefined> {\n    const [enrollment] = await db\n      .select()\n      .from(enrollments)\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)));\n    return enrollment;\n  }\n\n  // Assignment operations\n  async createAssignment(assignment: InsertAssignment): Promise<Assignment> {\n    const [newAssignment] = await db.insert(assignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async getAssignmentById(id: string): Promise<Assignment | undefined> {\n    const [assignment] = await db.select().from(assignments).where(eq(assignments.id, id));\n    return assignment;\n  }\n\n  async getLessonAssignments(lessonId: string): Promise<Assignment[]> {\n    return await db.select().from(assignments).where(eq(assignments.lessonId, lessonId));\n  }\n\n  async submitAssignment(submission: InsertAssignmentSubmission): Promise<AssignmentSubmission> {\n    const [newSubmission] = await db.insert(assignmentSubmissions).values(submission).returning();\n    return newSubmission;\n  }\n\n  async gradeAssignment(submissionId: string, score: number, feedback: string, graderId: string): Promise<AssignmentSubmission> {\n    const [updatedSubmission] = await db\n      .update(assignmentSubmissions)\n      .set({\n        score,\n        feedback,\n        gradedBy: graderId,\n        gradedAt: new Date(),\n      })\n      .where(eq(assignmentSubmissions.id, submissionId))\n      .returning();\n    return updatedSubmission;\n  }\n\n  async getUserAssignmentSubmissions(userId: string, assignmentId: string): Promise<AssignmentSubmission[]> {\n    return await db\n      .select()\n      .from(assignmentSubmissions)\n      .where(and(eq(assignmentSubmissions.userId, userId), eq(assignmentSubmissions.assignmentId, assignmentId)));\n  }\n\n  // Instructor payout operations\n  async createInstructorPayout(payout: InsertInstructorPayout): Promise<InstructorPayout> {\n    const [newPayout] = await db.insert(instructorPayouts).values(payout).returning();\n    return newPayout;\n  }\n\n  async getInstructorPayouts(instructorId: string): Promise<InstructorPayout[]> {\n    return await db\n      .select()\n      .from(instructorPayouts)\n      .where(eq(instructorPayouts.instructorId, instructorId));\n  }\n\n  async updatePayoutStatus(payoutId: string, status: string): Promise<InstructorPayout> {\n    const [updatedPayout] = await db\n      .update(instructorPayouts)\n      .set({\n        status: status as any,\n        processedAt: status === 'completed' ? new Date() : undefined,\n      })\n      .where(eq(instructorPayouts.id, payoutId))\n      .returning();\n    return updatedPayout;\n  }\n\n  // Instructor application operations\n  async createInstructorApplication(application: InsertInstructorApplication): Promise<InstructorApplication> {\n    const [newApplication] = await db.insert(instructorApplications).values(application).returning();\n    return newApplication;\n  }\n\n  async getInstructorApplicationByUserId(userId: string): Promise<InstructorApplication | undefined> {\n    const [application] = await db\n      .select()\n      .from(instructorApplications)\n      .where(eq(instructorApplications.userId, userId))\n      .orderBy(desc(instructorApplications.submittedAt));\n    return application;\n  }\n\n  async getInstructorApplications(filters?: { status?: string; page?: number; limit?: number }): Promise<InstructorApplication[]> {\n    let query = db.select().from(instructorApplications);\n    \n    if (filters?.status) {\n      query = query.where(eq(instructorApplications.status, filters.status as any));\n    }\n    \n    query = query.orderBy(desc(instructorApplications.submittedAt));\n    \n    if (filters?.page && filters?.limit) {\n      const offset = (filters.page - 1) * filters.limit;\n      query = query.limit(filters.limit).offset(offset);\n    }\n    \n    return await query;\n  }\n\n  async updateInstructorApplication(id: string, updates: Partial<InstructorApplication>): Promise<InstructorApplication> {\n    const [updatedApplication] = await db\n      .update(instructorApplications)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(instructorApplications.id, id))\n      .returning();\n    return updatedApplication;\n  }\n\n  // Admin operations\n  async getAdminStats(): Promise<{ \n    totalUsers: number; \n    totalInstructors: number; \n    pendingApplications: number; \n    totalCourses: number; \n    monthlyRevenue: number; \n    activeStudents: number; \n  }> {\n    // Get total users\n    const [{ totalUsers }] = await db\n      .select({ totalUsers: count() })\n      .from(users);\n\n    // Get total instructors\n    const [{ totalInstructors }] = await db\n      .select({ totalInstructors: count() })\n      .from(users)\n      .where(eq(users.role, 'instructor'));\n\n    // Get pending applications\n    const [{ pendingApplications }] = await db\n      .select({ pendingApplications: count() })\n      .from(instructorApplications)\n      .where(eq(instructorApplications.status, 'pending'));\n\n    // Get total courses\n    const [{ totalCourses }] = await db\n      .select({ totalCourses: count() })\n      .from(courses);\n\n    // Mock data for now - would calculate from orders\n    const monthlyRevenue = 25000;\n    const activeStudents = 450;\n\n    return {\n      totalUsers: Number(totalUsers),\n      totalInstructors: Number(totalInstructors),\n      pendingApplications: Number(pendingApplications),\n      totalCourses: Number(totalCourses),\n      monthlyRevenue,\n      activeStudents,\n    };\n  }\n\n  async getUsers(filters?: { page?: number; limit?: number; search?: string; role?: string }): Promise<User[]> {\n    let query = db.select().from(users);\n    \n    if (filters?.role) {\n      query = query.where(eq(users.role, filters.role as any));\n    }\n    \n    if (filters?.search) {\n      query = query.where(\n        sql`${users.firstName} ILIKE ${`%${filters.search}%`} OR ${users.lastName} ILIKE ${`%${filters.search}%`} OR ${users.email} ILIKE ${`%${filters.search}%`}`\n      );\n    }\n    \n    query = query.orderBy(desc(users.createdAt));\n    \n    if (filters?.page && filters?.limit) {\n      const offset = (filters.page - 1) * filters.limit;\n      query = query.limit(filters.limit).offset(offset);\n    }\n    \n    return await query;\n  }\n\n  async getCoursesForAdmin(filters?: { page?: number; limit?: number; status?: string; instructor?: string }): Promise<Course[]> {\n    let query = db.select().from(courses);\n    \n    if (filters?.instructor) {\n      query = query.where(eq(courses.instructorId, filters.instructor));\n    }\n    \n    query = query.orderBy(desc(courses.createdAt));\n    \n    if (filters?.page && filters?.limit) {\n      const offset = (filters.page - 1) * filters.limit;\n      query = query.limit(filters.limit).offset(offset);\n    }\n    \n    return await query;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":22229},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  uuid,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { enum: ['student', 'instructor', 'admin'] }).default('student'),\n  bio: text(\"bio\"),\n  country: varchar(\"country\"),\n  timezone: varchar(\"timezone\"),\n  paystackCustomerCode: varchar(\"paystack_customer_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Course categories\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Courses\nexport const courses = pgTable(\"courses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  subtitle: varchar(\"subtitle\", { length: 300 }),\n  description: text(\"description\"),\n  instructorId: varchar(\"instructor_id\").references(() => users.id),\n  categoryId: uuid(\"category_id\").references(() => categories.id),\n  level: varchar(\"level\", { enum: ['beginner', 'intermediate', 'advanced'] }).default('beginner'),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default('USD'),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  promoVideoUrl: varchar(\"promo_video_url\"),\n  duration: integer(\"duration_hours\"),\n  isPublished: boolean(\"is_published\").default(false),\n  isFeatured: boolean(\"is_featured\").default(false),\n  avgRating: decimal(\"avg_rating\", { precision: 3, scale: 2 }).default('0'),\n  ratingCount: integer(\"rating_count\").default(0),\n  enrollmentCount: integer(\"enrollment_count\").default(0),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Course modules/sections\nexport const modules = pgTable(\"modules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Lessons within modules\nexport const lessons = pgTable(\"lessons\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: uuid(\"module_id\").references(() => modules.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  contentType: varchar(\"content_type\", { enum: ['video', 'text', 'quiz', 'assignment'] }).default('video'),\n  videoUrl: varchar(\"video_url\"),\n  duration: integer(\"duration_seconds\"),\n  content: text(\"content\"),\n  order: integer(\"order\").notNull(),\n  isFree: boolean(\"is_free\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Course enrollments\nexport const enrollments = pgTable(\"enrollments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  progress: decimal(\"progress\", { precision: 5, scale: 2 }).default('0'),\n});\n\n// User progress on lessons\nexport const progress = pgTable(\"progress\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  lessonId: uuid(\"lesson_id\").references(() => lessons.id, { onDelete: 'cascade' }),\n  completed: boolean(\"completed\").default(false),\n  watchTime: integer(\"watch_time_seconds\").default(0),\n  lastWatchedAt: timestamp(\"last_watched_at\").defaultNow(),\n});\n\n// Course reviews and ratings\nexport const reviews = pgTable(\"reviews\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Discussion forums\nexport const discussions = pgTable(\"discussions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Discussion replies\nexport const replies = pgTable(\"replies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  discussionId: uuid(\"discussion_id\").references(() => discussions.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  parentId: uuid(\"parent_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Certifications\nexport const certifications = pgTable(\"certifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  certificateUrl: varchar(\"certificate_url\"),\n  issuedAt: timestamp(\"issued_at\").defaultNow(),\n  validUntil: timestamp(\"valid_until\"),\n});\n\n// Payment orders\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default('USD'),\n  status: varchar(\"status\", { enum: ['pending', 'completed', 'failed', 'refunded'] }).default('pending'),\n  paystackReference: varchar(\"paystack_reference\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Quiz tables for interactive content\nexport const quizzes = pgTable(\"quizzes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  lessonId: uuid(\"lesson_id\").references(() => lessons.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  timeLimit: integer(\"time_limit_minutes\"),\n  passingScore: integer(\"passing_score\").default(80),\n  maxAttempts: integer(\"max_attempts\").default(3),\n  isRequired: boolean(\"is_required\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quizQuestions = pgTable(\"quiz_questions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  quizId: uuid(\"quiz_id\").references(() => quizzes.id, { onDelete: 'cascade' }),\n  question: text(\"question\").notNull(),\n  questionType: varchar(\"question_type\", { enum: ['multiple_choice', 'true_false', 'fill_blank'] }).default('multiple_choice'),\n  points: integer(\"points\").default(1),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quizAnswers = pgTable(\"quiz_answers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  questionId: uuid(\"question_id\").references(() => quizQuestions.id, { onDelete: 'cascade' }),\n  answer: text(\"answer\").notNull(),\n  isCorrect: boolean(\"is_correct\").default(false),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quizAttempts = pgTable(\"quiz_attempts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  quizId: uuid(\"quiz_id\").references(() => quizzes.id, { onDelete: 'cascade' }),\n  score: decimal(\"score\", { precision: 5, scale: 2 }),\n  totalPoints: integer(\"total_points\"),\n  passed: boolean(\"passed\").default(false),\n  timeSpent: integer(\"time_spent_minutes\"),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const quizResponses = pgTable(\"quiz_responses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  attemptId: uuid(\"attempt_id\").references(() => quizAttempts.id, { onDelete: 'cascade' }),\n  questionId: uuid(\"question_id\").references(() => quizQuestions.id, { onDelete: 'cascade' }),\n  answerId: uuid(\"answer_id\").references(() => quizAnswers.id),\n  responseText: text(\"response_text\"),\n  isCorrect: boolean(\"is_correct\").default(false),\n  pointsEarned: integer(\"points_earned\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Assignment tables\nexport const assignments = pgTable(\"assignments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  lessonId: uuid(\"lesson_id\").references(() => lessons.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\").notNull(),\n  instructions: text(\"instructions\"),\n  dueDate: timestamp(\"due_date\"),\n  maxScore: integer(\"max_score\").default(100),\n  allowLateSubmission: boolean(\"allow_late_submission\").default(true),\n  isRequired: boolean(\"is_required\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const assignmentSubmissions = pgTable(\"assignment_submissions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  assignmentId: uuid(\"assignment_id\").references(() => assignments.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  attachmentUrls: text(\"attachment_urls\").array(),\n  score: integer(\"score\"),\n  feedback: text(\"feedback\"),\n  gradedAt: timestamp(\"graded_at\"),\n  gradedBy: varchar(\"graded_by\").references(() => users.id),\n  isLateSubmission: boolean(\"is_late_submission\").default(false),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\n// Instructor payout tracking\nexport const instructorPayouts = pgTable(\"instructor_payouts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  instructorId: varchar(\"instructor_id\").references(() => users.id, { onDelete: 'cascade' }),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default('USD'),\n  period: varchar(\"period\", { length: 7 }).notNull(), // YYYY-MM format\n  revenueShare: decimal(\"revenue_share\", { precision: 5, scale: 2 }).default('70.00'), // 70% default\n  totalRevenue: decimal(\"total_revenue\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { enum: ['pending', 'processing', 'completed', 'failed'] }).default('pending'),\n  payoutReference: varchar(\"payout_reference\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Course favorites\nexport const favorites = pgTable(\"favorites\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  courseId: uuid(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Instructor applications\nexport const instructorApplications = pgTable(\"instructor_applications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 50 }).notNull(),\n  bio: text(\"bio\").notNull(),\n  experience: text(\"experience\").notNull(),\n  qualifications: text(\"qualifications\").notNull(),\n  previousTeaching: text(\"previous_teaching\").notNull(),\n  areasOfExpertise: text(\"areas_of_expertise\").array().notNull(),\n  cvUrl: varchar(\"cv_url\"),\n  videoIntroUrl: varchar(\"video_intro_url\"),\n  status: varchar(\"status\", { enum: ['pending', 'approved', 'rejected'] }).default('pending'),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewComments: text(\"review_comments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  courses: many(courses),\n  enrollments: many(enrollments),\n  progress: many(progress),\n  reviews: many(reviews),\n  discussions: many(discussions),\n  replies: many(replies),\n  certifications: many(certifications),\n  orders: many(orders),\n  favorites: many(favorites),\n  quizAttempts: many(quizAttempts),\n  assignmentSubmissions: many(assignmentSubmissions),\n  instructorPayouts: many(instructorPayouts),\n  instructorApplications: many(instructorApplications),\n  reviewedApplications: many(instructorApplications, {\n    relationName: \"ApplicationReviewer\",\n  }),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  instructor: one(users, {\n    fields: [courses.instructorId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [courses.categoryId],\n    references: [categories.id],\n  }),\n  modules: many(modules),\n  enrollments: many(enrollments),\n  reviews: many(reviews),\n  discussions: many(discussions),\n  certifications: many(certifications),\n  orders: many(orders),\n  favorites: many(favorites),\n}));\n\nexport const modulesRelations = relations(modules, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [modules.courseId],\n    references: [courses.id],\n  }),\n  lessons: many(lessons),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one, many }) => ({\n  module: one(modules, {\n    fields: [lessons.moduleId],\n    references: [modules.id],\n  }),\n  progress: many(progress),\n  quizzes: many(quizzes),\n  assignments: many(assignments),\n}));\n\n// Quiz relations\nexport const quizzesRelations = relations(quizzes, ({ one, many }) => ({\n  lesson: one(lessons, {\n    fields: [quizzes.lessonId],\n    references: [lessons.id],\n  }),\n  questions: many(quizQuestions),\n  attempts: many(quizAttempts),\n}));\n\nexport const quizQuestionsRelations = relations(quizQuestions, ({ one, many }) => ({\n  quiz: one(quizzes, {\n    fields: [quizQuestions.quizId],\n    references: [quizzes.id],\n  }),\n  answers: many(quizAnswers),\n  responses: many(quizResponses),\n}));\n\nexport const quizAnswersRelations = relations(quizAnswers, ({ one, many }) => ({\n  question: one(quizQuestions, {\n    fields: [quizAnswers.questionId],\n    references: [quizQuestions.id],\n  }),\n  responses: many(quizResponses),\n}));\n\nexport const quizAttemptsRelations = relations(quizAttempts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [quizAttempts.userId],\n    references: [users.id],\n  }),\n  quiz: one(quizzes, {\n    fields: [quizAttempts.quizId],\n    references: [quizzes.id],\n  }),\n  responses: many(quizResponses),\n}));\n\nexport const quizResponsesRelations = relations(quizResponses, ({ one }) => ({\n  attempt: one(quizAttempts, {\n    fields: [quizResponses.attemptId],\n    references: [quizAttempts.id],\n  }),\n  question: one(quizQuestions, {\n    fields: [quizResponses.questionId],\n    references: [quizQuestions.id],\n  }),\n  answer: one(quizAnswers, {\n    fields: [quizResponses.answerId],\n    references: [quizAnswers.id],\n  }),\n}));\n\n// Assignment relations\nexport const assignmentsRelations = relations(assignments, ({ one, many }) => ({\n  lesson: one(lessons, {\n    fields: [assignments.lessonId],\n    references: [lessons.id],\n  }),\n  submissions: many(assignmentSubmissions),\n}));\n\nexport const assignmentSubmissionsRelations = relations(assignmentSubmissions, ({ one }) => ({\n  user: one(users, {\n    fields: [assignmentSubmissions.userId],\n    references: [users.id],\n  }),\n  assignment: one(assignments, {\n    fields: [assignmentSubmissions.assignmentId],\n    references: [assignments.id],\n  }),\n  grader: one(users, {\n    fields: [assignmentSubmissions.gradedBy],\n    references: [users.id],\n  }),\n}));\n\n// Instructor payout relations\nexport const instructorPayoutsRelations = relations(instructorPayouts, ({ one }) => ({\n  instructor: one(users, {\n    fields: [instructorPayouts.instructorId],\n    references: [users.id],\n  }),\n}));\n\n// Instructor application relations\nexport const instructorApplicationsRelations = relations(instructorApplications, ({ one }) => ({\n  user: one(users, {\n    fields: [instructorApplications.userId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [instructorApplications.reviewedBy],\n    references: [users.id],\n    relationName: \"ApplicationReviewer\",\n  }),\n}));\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = typeof courses.$inferInsert;\nexport type Module = typeof modules.$inferSelect;\nexport type InsertModule = typeof modules.$inferInsert;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type InsertLesson = typeof lessons.$inferInsert;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = typeof enrollments.$inferInsert;\nexport type Progress = typeof progress.$inferSelect;\nexport type InsertProgress = typeof progress.$inferInsert;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = typeof reviews.$inferInsert;\nexport type Discussion = typeof discussions.$inferSelect;\nexport type InsertDiscussion = typeof discussions.$inferInsert;\nexport type Reply = typeof replies.$inferSelect;\nexport type InsertReply = typeof replies.$inferInsert;\nexport type Certification = typeof certifications.$inferSelect;\nexport type InsertCertification = typeof certifications.$inferInsert;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = typeof favorites.$inferInsert;\nexport type InstructorApplication = typeof instructorApplications.$inferSelect;\nexport type InsertInstructorApplication = typeof instructorApplications.$inferInsert;\n\n// Quiz types\nexport type Quiz = typeof quizzes.$inferSelect;\nexport type InsertQuiz = typeof quizzes.$inferInsert;\nexport type QuizQuestion = typeof quizQuestions.$inferSelect;\nexport type InsertQuizQuestion = typeof quizQuestions.$inferInsert;\nexport type QuizAnswer = typeof quizAnswers.$inferSelect;\nexport type InsertQuizAnswer = typeof quizAnswers.$inferInsert;\nexport type QuizAttempt = typeof quizAttempts.$inferSelect;\nexport type InsertQuizAttempt = typeof quizAttempts.$inferInsert;\nexport type QuizResponse = typeof quizResponses.$inferSelect;\nexport type InsertQuizResponse = typeof quizResponses.$inferInsert;\n\n// Assignment types\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = typeof assignments.$inferInsert;\nexport type AssignmentSubmission = typeof assignmentSubmissions.$inferSelect;\nexport type InsertAssignmentSubmission = typeof assignmentSubmissions.$inferInsert;\n\n// Instructor payout types\nexport type InstructorPayout = typeof instructorPayouts.$inferSelect;\nexport type InsertInstructorPayout = typeof instructorPayouts.$inferInsert;\n\n// Zod schemas for validation\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDiscussionSchema = createInsertSchema(discussions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReplySchema = createInsertSchema(replies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProgressSchema = createInsertSchema(progress).omit({\n  id: true,\n  lastWatchedAt: true,\n});\n\n// Quiz schemas\nexport const insertQuizSchema = createInsertSchema(quizzes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizQuestionSchema = createInsertSchema(quizQuestions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizAnswerSchema = createInsertSchema(quizAnswers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizAttemptSchema = createInsertSchema(quizAttempts).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertQuizResponseSchema = createInsertSchema(quizResponses).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Assignment schemas\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssignmentSubmissionSchema = createInsertSchema(assignmentSubmissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\n// Instructor payout schema\nexport const insertInstructorPayoutSchema = createInsertSchema(instructorPayouts).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Instructor application schema\nexport const insertInstructorApplicationSchema = createInsertSchema(instructorApplications).omit({\n  id: true,\n  submittedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Add self-reference for replies after table definition\nexport const repliesRelations = relations(replies, ({ one, many }) => ({\n  discussion: one(discussions, {\n    fields: [replies.discussionId],\n    references: [discussions.id],\n  }),\n  user: one(users, {\n    fields: [replies.userId],\n    references: [users.id],\n  }),\n  parent: one(replies, {\n    fields: [replies.parentId],\n    references: [replies.id],\n    relationName: \"ParentChild\",\n  }),\n  children: many(replies, {\n    relationName: \"ParentChild\",\n  }),\n}));\n\n// Extended types for API responses\nexport type CourseWithDetails = Course & {\n  instructor: User;\n  category: Category;\n  modules?: (Module & { lessons: Lesson[] })[];\n  reviews?: (Review & { user: User })[];\n  isEnrolled?: boolean;\n};\n\n// Quiz extended types\nexport type QuizWithQuestions = Quiz & {\n  questions: (QuizQuestion & { answers: QuizAnswer[] })[];\n};\n\nexport type QuizAttemptWithDetails = QuizAttempt & {\n  user: User;\n  quiz: Quiz;\n  responses: (QuizResponse & { question: QuizQuestion; answer?: QuizAnswer })[];\n};\n\n// Assignment extended types\nexport type AssignmentWithSubmissions = Assignment & {\n  submissions: (AssignmentSubmission & { user: User })[];\n};\n\nexport type AssignmentSubmissionWithDetails = AssignmentSubmission & {\n  user: User;\n  assignment: Assignment;\n  grader?: User;\n};\n\nexport type EnrollmentWithCourse = Enrollment & {\n  course: Course & { instructor: User };\n};\n\nexport type DiscussionWithUser = Discussion & {\n  user: User;\n  _count?: { replies: number };\n};\n\nexport type ReplyWithUser = Reply & {\n  user: User;\n};\n\nexport type ReviewWithUser = Review & {\n  user: User;\n};\n","size_bytes":24168},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Courses from \"@/pages/courses\";\nimport CourseDetail from \"@/pages/course-detail\";\nimport Dashboard from \"@/pages/dashboard\";\nimport InstructorDashboard from \"@/pages/instructor-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport BecomeInstructor from \"@/pages/become-instructor\";\nimport CreateCourse from \"@/pages/create-course\";\nimport Checkout from \"@/pages/checkout\";\nimport Programs from \"@/pages/programs\";\nimport VideoPlayer from \"@/pages/video-player\";\nimport Community from \"@/pages/community\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport CookiePolicy from \"@/pages/cookie-policy\";\nimport HelpCenter from \"@/pages/help-center\";\nimport Contact from \"@/pages/contact\";\nimport TechnicalSupport from \"@/pages/technical-support\";\nimport AcademicAdvising from \"@/pages/academic-advising\";\nimport CourseCatalog from \"@/pages/course-catalog\";\nimport GlobalMAProgram from \"@/pages/global-ma-program\";\nimport FCIMarbFellowship from \"@/pages/fcrimarb-fellowship\";\nimport Certification from \"@/pages/certification\";\nimport Resources from \"@/pages/resources\";\nimport CommunityForum from \"@/pages/community-forum\";\nimport ProfessionalStandards from \"@/pages/professional-standards\";\nimport QuizPage from \"@/pages/quiz\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/instructor\" component={InstructorDashboard} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n          <Route path=\"/instructor/courses/new\" component={CreateCourse} />\n          <Route path=\"/checkout/:courseId\" component={Checkout} />\n          <Route path=\"/programs\" component={Programs} />\n          <Route path=\"/learn/:courseId/:lessonId\" component={VideoPlayer} />\n          <Route path=\"/quiz/:quizId\" component={QuizPage} />\n          <Route path=\"/community\" component={Community} />\n        </>\n      )}\n      {/* Public routes available regardless of authentication */}\n      <Route path=\"/courses\" component={Courses} />\n      <Route path=\"/course/:id\" component={CourseDetail} />\n      <Route path=\"/become-instructor\" component={BecomeInstructor} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-of-service\" component={TermsOfService} />\n      <Route path=\"/cookie-policy\" component={CookiePolicy} />\n      <Route path=\"/help-center\" component={HelpCenter} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/technical-support\" component={TechnicalSupport} />\n      <Route path=\"/academic-advising\" component={AcademicAdvising} />\n      <Route path=\"/course-catalog\" component={CourseCatalog} />\n      <Route path=\"/global-ma-program\" component={GlobalMAProgram} />\n      <Route path=\"/fcrimarb-fellowship\" component={FCIMarbFellowship} />\n      <Route path=\"/certification\" component={Certification} />\n      <Route path=\"/resources\" component={Resources} />\n      <Route path=\"/community-forum\" component={CommunityForum} />\n      <Route path=\"/professional-standards\" component={ProfessionalStandards} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4174},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* RTL support for Arabic language */\n[dir=\"rtl\"] {\n  direction: rtl;\n  text-align: right;\n}\n\n[dir=\"rtl\"] .space-x-3 > * + * {\n  margin-right: 0.75rem;\n  margin-left: 0;\n}\n\n[dir=\"rtl\"] .space-x-2 > * + * {\n  margin-right: 0.5rem;\n  margin-left: 0;\n}\n\n[dir=\"rtl\"] .space-x-4 > * + * {\n  margin-right: 1rem;\n  margin-left: 0;\n}\n\n[dir=\"rtl\"] .ml-auto {\n  margin-left: 0;\n  margin-right: auto;\n}\n\n[dir=\"rtl\"] .mr-2 {\n  margin-right: 0;\n  margin-left: 0.5rem;\n}\n\n[dir=\"rtl\"] .mr-3 {\n  margin-right: 0;\n  margin-left: 0.75rem;\n}\n\n[dir=\"rtl\"] .justify-start {\n  justify-content: flex-end;\n}\n\n[dir=\"rtl\"] .text-left {\n  text-align: right;\n}\n\n[dir=\"rtl\"] .text-right {\n  text-align: left;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 20%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 20%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 20%);\n  --primary: hsl(0, 100%, 37.3%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 96.1%);\n  --secondary-foreground: hsl(0, 0%, 20%);\n  --muted: hsl(0, 0%, 96.1%);\n  --muted-foreground: hsl(0, 0%, 45.1%);\n  --accent: hsl(0, 100%, 37.3%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 89.8%);\n  --input: hsl(0, 0%, 89.8%);\n  --ring: hsl(0, 100%, 37.3%);\n  --chart-1: hsl(220, 91%, 32%);\n  --chart-2: hsl(38, 92%, 50%);\n  --chart-3: hsl(160, 60%, 45%);\n  --chart-4: hsl(30, 80%, 55%);\n  --chart-5: hsl(280, 65%, 60%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(220, 91%, 32%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(220, 91%, 32%);\n  --chart-1: hsl(220, 91%, 32%);\n  --chart-2: hsl(38, 92%, 50%);\n  --chart-3: hsl(160, 60%, 45%);\n  --chart-4: hsl(30, 80%, 55%);\n  --chart-5: hsl(280, 65%, 60%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3613},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/certification-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CertificationBadgeProps {\n  title: string;\n  issuedDate: string;\n  status: \"completed\" | \"in-progress\" | \"locked\";\n  type?: \"certificate\" | \"badge\" | \"fellowship\";\n  className?: string;\n}\n\nexport default function CertificationBadge({ \n  title, \n  issuedDate, \n  status, \n  type = \"certificate\",\n  className \n}: CertificationBadgeProps) {\n  const statusConfig = {\n    completed: {\n      icon: \"fas fa-medal\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      borderColor: \"border-accent/20\",\n      label: \"Completed\"\n    },\n    \"in-progress\": {\n      icon: \"fas fa-clock\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      borderColor: \"border-primary/20\",\n      label: \"In Progress\"\n    },\n    locked: {\n      icon: \"fas fa-lock\",\n      color: \"text-muted-foreground\",\n      bgColor: \"bg-muted/30\",\n      borderColor: \"border-border\",\n      label: \"Locked\"\n    }\n  };\n\n  const typeConfig = {\n    certificate: \"Certificate\",\n    badge: \"Achievement\",\n    fellowship: \"Fellowship\"\n  };\n\n  const config = statusConfig[status];\n\n  return (\n    <Card \n      className={cn(\n        \"transition-all duration-200 hover:shadow-md\",\n        config.bgColor,\n        config.borderColor,\n        status === 'locked' && \"opacity-60\",\n        className\n      )}\n      data-testid={`certification-${status}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={cn(\"text-xl\", config.color)}>\n            <i className={config.icon}></i>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <h4 className={cn(\n                \"font-medium text-sm truncate\",\n                status === 'locked' ? \"text-muted-foreground\" : \"text-foreground\"\n              )} data-testid=\"certification-title\">\n                {title}\n              </h4>\n              <Badge \n                variant=\"outline\" \n                className={cn(\"text-xs\", config.color)}\n                data-testid=\"certification-type\"\n              >\n                {typeConfig[type]}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className={cn(\n                \"text-xs\",\n                status === 'locked' ? \"text-muted-foreground\" : \"text-muted-foreground\"\n              )} data-testid=\"certification-date\">\n                {status === 'completed' ? `Earned ${issuedDate}` : \n                 status === 'in-progress' ? `Started ${issuedDate}` : \n                 'Requirements not met'}\n              </span>\n              <Badge \n                variant=\"secondary\" \n                className={cn(\"text-xs\", config.color)}\n                data-testid=\"certification-status\"\n              >\n                {config.label}\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3102},"client/src/components/course-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Star, Users, Clock, Crown, ShoppingCart } from \"lucide-react\";\n\ninterface CourseCardProps {\n  course: {\n    id: string;\n    title: string;\n    subtitle?: string;\n    description?: string;\n    price: string;\n    currency: string;\n    thumbnailUrl?: string;\n    level: string;\n    avgRating: string;\n    ratingCount: number;\n    enrollmentCount: number;\n    duration?: number;\n    instructor?: {\n      firstName?: string;\n      lastName?: string;\n    };\n    category?: {\n      name: string;\n    };\n    isFeatured?: boolean;\n  };\n}\n\nexport default function CourseCard({ course }: CourseCardProps) {\n  const defaultThumbnail = course.level === 'advanced' \n    ? \"https://images.unsplash.com/photo-1589829545856-d10d557cf95f?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\"\n    : course.category?.name?.toLowerCase().includes('mediation')\n    ? \"https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\"\n    : \"https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\";\n\n  const levelColors = {\n    beginner: \"bg-secondary/10 text-secondary\",\n    intermediate: \"bg-green-100 text-green-700\",\n    advanced: \"bg-accent/10 text-accent\"\n  };\n\n  return (\n    <Card \n      className=\"group hover:shadow-xl transition-shadow overflow-hidden\" \n      data-testid={`course-card-${course.id}`}\n    >\n      <div className=\"relative\">\n        <img \n          src={course.thumbnailUrl || defaultThumbnail}\n          alt={course.title}\n          className=\"w-full h-40 object-cover group-hover:scale-105 transition-transform duration-300\"\n          data-testid=\"course-thumbnail\"\n        />\n        {course.isFeatured && (\n          <Badge \n            className=\"absolute top-3 left-3 bg-primary text-primary-foreground\"\n            data-testid=\"featured-badge\"\n          >\n            <Crown className=\"w-3 h-3 mr-1\" />\n            Featured\n          </Badge>\n        )}\n        <Badge \n          className={`absolute top-3 right-3 ${levelColors[course.level as keyof typeof levelColors] || levelColors.beginner}`}\n          data-testid=\"level-badge\"\n        >\n          {course.level}\n        </Badge>\n      </div>\n\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-1\">\n            <Star className=\"w-4 h-4 text-accent fill-current\" />\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"course-rating\">\n              {course.avgRating} ({course.ratingCount})\n            </span>\n          </div>\n          {course.category && (\n            <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"category-badge\">\n              {course.category.name}\n            </Badge>\n          )}\n        </div>\n\n        <h3 className=\"text-lg font-semibold text-foreground mb-2 group-hover:text-primary transition-colors\" data-testid=\"course-title\">\n          {course.title}\n        </h3>\n        \n        <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\" data-testid=\"course-description\">\n          {course.subtitle || course.description || \"Professional development course for ADR practitioners.\"}\n        </p>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            {course.duration && (\n              <span className=\"flex items-center space-x-1\" data-testid=\"course-duration\">\n                <Clock className=\"w-3 h-3\" />\n                <span>{course.duration} hours</span>\n              </span>\n            )}\n            <span className=\"flex items-center space-x-1\" data-testid=\"course-students\">\n              <Users className=\"w-3 h-3\" />\n              <span>{course.enrollmentCount}</span>\n            </span>\n          </div>\n        </div>\n\n        {course.instructor && (\n          <div className=\"text-sm text-muted-foreground mb-4\" data-testid=\"instructor-info\">\n            By {course.instructor.firstName} {course.instructor.lastName}\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-xl font-bold text-foreground\" data-testid=\"course-price\">\n              {parseFloat(course.price) > 0 ? `$${course.price}` : 'Free'}\n            </div>\n            {parseFloat(course.price) > 0 && (\n              <div className=\"text-sm text-muted-foreground\">{course.currency}</div>\n            )}\n          </div>\n          <Link href={`/course/${course.id}`}>\n            <Button \n              className=\"bg-primary text-primary-foreground hover:bg-blue-800 transition-colors\"\n              data-testid=\"view-course-button\"\n            >\n              <ShoppingCart className=\"w-4 h-4 mr-2\" />\n              View Course\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5129},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport cimaLogo from \"@/assets/cima-logo.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\" data-testid=\"footer-company\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src={cimaLogo} \n                alt=\"CIMA Logo\" \n                className=\"h-12 w-auto\"\n              />\n              <div>\n                <h3 className=\"text-lg font-bold text-primary\">CIMA Learn</h3>\n                <p className=\"text-xs text-muted-foreground -mt-1\">Professional ADR Education</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Center for International Mediators and Arbitrators - Leading global alternative dispute resolution education and certification.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"social-linkedin\"\n              >\n                <i className=\"fab fa-linkedin text-xl\"></i>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"social-twitter\"\n              >\n                <i className=\"fab fa-twitter text-xl\"></i>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"social-facebook\"\n              >\n                <i className=\"fab fa-facebook text-xl\"></i>\n              </a>\n            </div>\n          </div>\n\n          {/* Learning Links */}\n          <div data-testid=\"footer-learning\">\n            <h4 className=\"text-sm font-semibold text-foreground mb-4 uppercase tracking-wider\">Learning</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/course-catalog\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Course Catalog\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/global-ma-program\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Global M&A Program\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/fcrimarb-fellowship\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    FCIMArb Fellowship\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/certification\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Certification\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/resources\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Resources\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/become-instructor\">\n                  <span className=\"text-sm text-primary font-medium hover:text-primary/80 transition-colors\">\n                    Become an Instructor\n                  </span>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support Links */}\n          <div data-testid=\"footer-support\">\n            <h4 className=\"text-sm font-semibold text-foreground mb-4 uppercase tracking-wider\">Support</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/help-center\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Help Center\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/community-forum\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Community Forum\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/technical-support\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Technical Support\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/academic-advising\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Academic Advising\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                    Contact Us\n                  </span>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div data-testid=\"footer-contact\">\n            <h4 className=\"text-sm font-semibold text-foreground mb-4 uppercase tracking-wider\">Contact</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <i className=\"fas fa-map-marker-alt text-muted-foreground text-sm mt-1\"></i>\n                <div className=\"text-sm text-muted-foreground\">\n                  Oxford Science Park<br />\n                  John Eccles House<br />\n                  Oxford, Oxfordshire, UK\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-envelope text-muted-foreground text-sm\"></i>\n                <a \n                  href=\"mailto:info@thecima.org\" \n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                  data-testid=\"contact-email\"\n                >\n                  info@thecima.org\n                </a>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-globe text-muted-foreground text-sm\"></i>\n                <a \n                  href=\"https://thecima.org\" \n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                  data-testid=\"contact-website\"\n                >\n                  thecima.org\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-border mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"copyright\">\n            © {new Date().getFullYear()} Center for International Mediators and Arbitrators. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <Link href=\"/privacy-policy\">\n              <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Privacy Policy\n              </span>\n            </Link>\n            <Link href=\"/terms-of-service\">\n              <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Terms of Service\n              </span>\n            </Link>\n            <Link href=\"/cookie-policy\">\n              <span className=\"text-sm text-muted-foreground hover:text-primary transition-colors\">\n                Cookie Policy\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":8196},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { Menu, X, User, BookOpen, GraduationCap, MessageSquare, LogOut, Presentation } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { LanguageSwitcher } from \"@/components/language-switcher\";\nimport cimaLogo from \"@/assets/cima-logo.png\";\n\nexport default function Header() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { user, isAuthenticated, isInstructor } = useAuth();\n  const { t } = useLanguage();\n\n  const navigation = [\n    { name: t('nav.home'), href: \"/\", icon: BookOpen },\n    { name: t('nav.courses'), href: \"/courses\", icon: GraduationCap },\n    { name: t('nav.dashboard'), href: \"/dashboard\", icon: User, authRequired: true },\n    { name: \"Instructor\", href: \"/instructor\", icon: Presentation, authRequired: true, instructorOnly: true },\n    { name: \"Community\", href: \"/community\", icon: MessageSquare, authRequired: true },\n  ];\n\n  const isActivePath = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const filteredNavigation = navigation.filter(\n    (item) => {\n      if (item.authRequired && !isAuthenticated) return false;\n      if (item.instructorOnly && !isInstructor()) return false;\n      return true;\n    }\n  );\n\n  const UserMenu = () => (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage\n              src={user?.profileImageUrl}\n              alt={`${user?.firstName} ${user?.lastName}`}\n            />\n            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">\n              {user?.firstName} {user?.lastName}\n            </p>\n            <p className=\"text-xs leading-none text-muted-foreground\">\n              {user?.email}\n            </p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <Link href=\"/profile\" className=\"cursor-pointer\">\n            <User className=\"mr-2 h-4 w-4\" />\n            {t('nav.profile')}\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link href=\"/dashboard\" className=\"cursor-pointer\">\n            <GraduationCap className=\"mr-2 h-4 w-4\" />\n            {t('nav.dashboard')}\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <a href=\"/api/logout\" className=\"cursor-pointer\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            {t('nav.logout')}\n          </a>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 hover:opacity-90 transition-opacity\">\n            <img \n              src={cimaLogo} \n              alt=\"CIMA Logo\" \n              className=\"h-12 w-auto\"\n            />\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-xl font-bold text-primary\">CIMA Learn</h1>\n              <p className=\"text-xs text-muted-foreground -mt-1\">Professional ADR Education</p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-1\">\n            {filteredNavigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <Button\n                    variant={isActivePath(item.href) ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    className=\"flex items-center space-x-2\"\n                    data-testid={`nav-${item.name.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.name}</span>\n                  </Button>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Switcher */}\n            <LanguageSwitcher />\n            \n            {/* Desktop Auth */}\n            <div className=\"hidden md:flex items-center space-x-3\">\n              {isAuthenticated ? (\n                <UserMenu />\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <Link href=\"/api/login\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-sign-in\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      {t('nav.login')}\n                    </Button>\n                  </Link>\n                  <Link href=\"/api/login\">\n                    <Button size=\"sm\" data-testid=\"button-get-started\">\n                      <GraduationCap className=\"h-4 w-4 mr-2\" />\n                      {t('landing.getStarted')}\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n\n            {/* Mobile Menu */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"md:hidden\"\n                  data-testid=\"mobile-menu-trigger\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col h-full\">\n                  {/* Mobile Header */}\n                  <div className=\"flex items-center justify-between pb-4 border-b\">\n                    <div className=\"flex items-center space-x-3\">\n                      <img \n                        src={cimaLogo} \n                        alt=\"CIMA Logo\" \n                        className=\"h-10 w-auto\"\n                      />\n                      <div>\n                        <h2 className=\"font-bold text-primary\">CIMA Learn</h2>\n                        <p className=\"text-xs text-muted-foreground\">Professional ADR Education</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Mobile Navigation */}\n                  <nav className=\"flex-1 pt-6\">\n                    <div className=\"space-y-1\">\n                      {filteredNavigation.map((item) => {\n                        const Icon = item.icon;\n                        return (\n                          <Link\n                            key={item.name}\n                            href={item.href}\n                            onClick={() => setIsMobileMenuOpen(false)}\n                          >\n                            <Button\n                              variant={isActivePath(item.href) ? \"default\" : \"ghost\"}\n                              className=\"w-full justify-start\"\n                              data-testid={`mobile-nav-${item.name.toLowerCase()}`}\n                            >\n                              <Icon className=\"mr-3 h-4 w-4\" />\n                              {item.name}\n                            </Button>\n                          </Link>\n                        );\n                      })}\n                    </div>\n                  </nav>\n\n                  {/* Mobile Auth */}\n                  <div className=\"border-t pt-4\">\n                    {isAuthenticated ? (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-3 px-3 py-2\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage\n                              src={user?.profileImageUrl}\n                              alt={`${user?.firstName} ${user?.lastName}`}\n                            />\n                            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                              {user?.firstName?.[0]}{user?.lastName?.[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium truncate\">\n                              {user?.firstName} {user?.lastName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground truncate\">\n                              {user?.email}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Link href=\"/profile\" onClick={() => setIsMobileMenuOpen(false)}>\n                            <Button variant=\"ghost\" className=\"w-full justify-start\">\n                              <User className=\"mr-3 h-4 w-4\" />\n                              {t('nav.profile')}\n                            </Button>\n                          </Link>\n                          <a href=\"/api/logout\">\n                            <Button variant=\"ghost\" className=\"w-full justify-start\">\n                              <LogOut className=\"mr-3 h-4 w-4\" />\n                              {t('nav.logout')}\n                            </Button>\n                          </a>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <Link href=\"/api/login\" onClick={() => setIsMobileMenuOpen(false)}>\n                          <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-sign-in\">\n                            <User className=\"mr-3 h-4 w-4\" />\n                            {t('nav.login')}\n                          </Button>\n                        </Link>\n                        <Link href=\"/api/login\" onClick={() => setIsMobileMenuOpen(false)}>\n                          <Button className=\"w-full justify-start\" data-testid=\"mobile-get-started\">\n                            <GraduationCap className=\"mr-3 h-4 w-4\" />\n                            {t('landing.getStarted')}\n                          </Button>\n                        </Link>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":11631},"client/src/components/progress-bar.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface ProgressBarProps {\n  value: number;\n  max?: number;\n  className?: string;\n  showPercentage?: boolean;\n  size?: \"sm\" | \"md\" | \"lg\";\n  color?: \"primary\" | \"accent\" | \"success\" | \"warning\";\n}\n\nexport default function ProgressBar({ \n  value, \n  max = 100, \n  className,\n  showPercentage = false,\n  size = \"md\",\n  color = \"primary\"\n}: ProgressBarProps) {\n  const percentage = Math.min(Math.max((value / max) * 100, 0), 100);\n  \n  const sizeClasses = {\n    sm: \"h-1\",\n    md: \"h-2\",\n    lg: \"h-3\"\n  };\n\n  const colorClasses = {\n    primary: \"bg-primary\",\n    accent: \"bg-accent\",\n    success: \"bg-green-500\",\n    warning: \"bg-yellow-500\"\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", className)} data-testid=\"progress-container\">\n      {showPercentage && (\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Progress</span>\n          <span className=\"text-foreground font-medium\" data-testid=\"progress-percentage\">\n            {Math.round(percentage)}%\n          </span>\n        </div>\n      )}\n      <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", sizeClasses[size])} data-testid=\"progress-track\">\n        <div \n          className={cn(\n            \"h-full transition-all duration-300 ease-out rounded-full\",\n            colorClasses[color]\n          )}\n          style={{ width: `${percentage}%` }}\n          data-testid=\"progress-fill\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1500},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const hasRole = (role: 'student' | 'instructor' | 'admin') => {\n    return user?.role === role;\n  };\n\n  const isInstructor = () => hasRole('instructor') || hasRole('admin');\n  const isAdmin = () => hasRole('admin');\n  const isStudent = () => hasRole('student');\n\n  return {\n    user: user as User | undefined,\n    isLoading,\n    isAuthenticated: !!user,\n    hasRole,\n    isInstructor,\n    isAdmin,\n    isStudent,\n  };\n}\n","size_bytes":651},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/checkout.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, CreditCard, Shield, Clock, Users, Star } from \"lucide-react\";\nimport { useEffect, useRef } from \"react\";\nimport type { CourseWithDetails } from \"@shared/schema\";\n\n// PayStack configuration\ndeclare global {\n  interface Window {\n    PaystackPop: any;\n  }\n}\n\nexport default function Checkout() {\n  const { id } = useParams();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const scriptLoaded = useRef(false);\n\n  const { data: course, isLoading } = useQuery<CourseWithDetails>({\n    queryKey: [`/api/courses/${id}`],\n    enabled: !!id,\n  });\n\n  // Load PayStack script\n  useEffect(() => {\n    if (!scriptLoaded.current) {\n      const script = document.createElement('script');\n      script.src = 'https://js.paystack.co/v1/inline.js';\n      script.async = true;\n      document.body.appendChild(script);\n      scriptLoaded.current = true;\n    }\n  }, []);\n\n  const createOrderMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ courseId: id }),\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to create order');\n      return response.json();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayment = async () => {\n    if (!user || !course || !window.PaystackPop) {\n      toast({\n        title: \"Payment Error\",\n        description: \"Payment system not ready. Please refresh and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const order = await createOrderMutation.mutateAsync();\n      \n      const handler = window.PaystackPop.setup({\n        key: import.meta.env.VITE_PAYSTACK_PUBLIC_KEY,\n        email: user?.email || '',\n        amount: Math.round(parseFloat(course.price.toString()) * 100), // Convert to kobo\n        currency: course.currency || 'USD',\n        ref: order.paystackReference,\n        callback: async function(response: any) {\n          if (response.status === 'success') {\n            // Verify payment on server\n            try {\n              const verifyResponse = await fetch('/api/verify-payment', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ reference: response.reference }),\n              });\n              \n              const verifyResult = await verifyResponse.json();\n              \n              if (verifyResult.success) {\n                toast({\n                  title: \"Payment Successful!\",\n                  description: \"You have been enrolled in the course.\",\n                });\n                \n                // Invalidate relevant queries\n                queryClient.invalidateQueries({ queryKey: [`/api/enrollments/check/${id}`] });\n                queryClient.invalidateQueries({ queryKey: ['/api/enrollments'] });\n                \n                // Redirect to course\n                setLocation(`/learn/${id}/1`);\n              } else {\n                toast({\n                  title: \"Payment Verification Failed\",\n                  description: \"Please contact support if this persists.\",\n                  variant: \"destructive\",\n                });\n              }\n            } catch (error) {\n              console.error('Verification error:', error);\n              toast({\n                title: \"Payment Verification Error\",\n                description: \"Please contact support to confirm your enrollment.\",\n                variant: \"destructive\",\n              });\n            }\n          }\n        },\n        onClose: function() {\n          toast({\n            title: \"Payment Cancelled\",\n            description: \"You can retry the payment anytime.\",\n            variant: \"destructive\",\n          });\n        }\n      });\n      \n      handler.openIframe();\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment Error\",\n        description: \"Failed to process payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to sign in to purchase courses.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n                <div className=\"space-y-4\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                </div>\n              </div>\n              <div className=\"h-96 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Course Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The course you're trying to purchase doesn't exist.</p>\n          <Link href=\"/courses\">\n            <Button>Browse Courses</Button>\n          </Link>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const coursePrice = parseFloat(course.price.toString());\n  const avgRating = course.avgRating ? parseFloat(course.avgRating.toString()) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Breadcrumb */}\n      <div className=\"border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <Link href=\"/courses\" className=\"hover:text-primary\">Courses</Link>\n            <span>/</span>\n            <Link href={`/courses/${id}`} className=\"hover:text-primary\">\n              {course.title}\n            </Link>\n            <span>/</span>\n            <span className=\"text-foreground\">Checkout</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <Link href={`/courses/${id}`}>\n            <Button variant=\"ghost\" size=\"sm\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Course\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"checkout-title\">\n            Complete Your Enrollment\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Secure checkout with industry-standard encryption\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Course Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <span>Course Details</span>\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {course.level}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-4\">\n                  <div className=\"w-20 h-20 bg-muted rounded-lg flex-shrink-0 overflow-hidden\">\n                    {course.thumbnailUrl ? (\n                      <img \n                        src={course.thumbnailUrl}\n                        alt={course.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-primary/30 flex items-center justify-center\">\n                        <span className=\"text-primary font-semibold text-sm\">\n                          {course.title.charAt(0)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg mb-1\" data-testid=\"course-title\">\n                      {course.title}\n                    </h3>\n                    {course.subtitle && (\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        {course.subtitle}\n                      </p>\n                    )}\n                    {course.instructor && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        By {course.instructor.firstName} {course.instructor.lastName}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-4 h-4 fill-current text-yellow-500\" />\n                      <span>{avgRating.toFixed(1)}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{course.enrollmentCount} students</span>\n                    </div>\n                    {course.duration && (\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{course.duration}h</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* What's Included */}\n            <Card>\n              <CardHeader>\n                <CardTitle>What's Included</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-green-600\"></div>\n                    </div>\n                    <span>Lifetime access to course content</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-green-600\"></div>\n                    </div>\n                    <span>Certificate of completion</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-green-600\"></div>\n                    </div>\n                    <span>Access to course discussions</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-green-600\"></div>\n                    </div>\n                    <span>Mobile and desktop access</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  <span>Payment Summary</span>\n                </CardTitle>\n                <CardDescription>\n                  Review your order before completing payment\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Course Price</span>\n                    <span className=\"font-medium\" data-testid=\"course-price\">\n                      ${coursePrice.toFixed(2)} {course.currency || 'USD'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <span>Processing Fee</span>\n                    <span>$0.00</span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between text-lg font-semibold\">\n                  <span>Total</span>\n                  <span data-testid=\"total-price\">\n                    ${coursePrice.toFixed(2)} {course.currency || 'USD'}\n                  </span>\n                </div>\n\n                <div className=\"pt-4\">\n                  <Button\n                    onClick={handlePayment}\n                    disabled={createOrderMutation.isPending}\n                    className=\"w-full\"\n                    size=\"lg\"\n                    data-testid=\"pay-now-button\"\n                  >\n                    {createOrderMutation.isPending ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                        <span>Processing...</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <CreditCard className=\"w-4 h-4\" />\n                        <span>Pay Now</span>\n                      </div>\n                    )}\n                  </Button>\n                </div>\n\n                <div className=\"text-xs text-muted-foreground text-center space-y-2 pt-4\">\n                  <div className=\"flex items-center justify-center space-x-1\">\n                    <Shield className=\"w-3 h-3\" />\n                    <span>Secure 256-bit SSL encryption</span>\n                  </div>\n                  <p>\n                    By clicking \"Pay Now\", you agree to our Terms of Service and Privacy Policy.\n                    You'll be charged immediately upon successful payment.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Money Back Guarantee */}\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0\">\n                    <Shield className=\"w-4 h-4 text-green-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-green-800 mb-1\">30-Day Money-Back Guarantee</h4>\n                    <p className=\"text-sm text-green-700\">\n                      If you're not satisfied with this course, we'll refund your payment within 30 days of purchase.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17229},"client/src/pages/community.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nexport default function Community() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [newDiscussionTitle, setNewDiscussionTitle] = useState(\"\");\n  const [newDiscussionContent, setNewDiscussionContent] = useState(\"\");\n  const [newDiscussionCourse, setNewDiscussionCourse] = useState(\"\");\n  const [replyContent, setReplyContent] = useState(\"\");\n  const [selectedDiscussion, setSelectedDiscussion] = useState<string>(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Please sign in to access the community.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch user's enrolled courses for discussion categorization\n  const { data: enrollments = [] } = useQuery({\n    queryKey: ['/api/enrollments'],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch all discussions (we'll filter by course)\n  const { data: allDiscussions = [], isLoading: discussionsLoading } = useQuery({\n    queryKey: ['/api/discussions', 'all'],\n    queryFn: async () => {\n      // Since we don't have a general discussions endpoint, we'll aggregate from enrolled courses\n      if (enrollments.length === 0) return [];\n      \n      const discussionPromises = enrollments.map((enrollment: any) =>\n        fetch(`/api/discussions/${enrollment.course.id}`, { credentials: 'include' })\n          .then(res => res.ok ? res.json() : [])\n          .catch(() => [])\n      );\n      \n      const courseDiscussions = await Promise.all(discussionPromises);\n      return courseDiscussions.flat().map((discussion: any, index: number) => ({\n        ...discussion,\n        course: enrollments.find((e: any) => \n          courseDiscussions.findIndex(cd => cd.includes(discussion)) === enrollments.indexOf(e)\n        )?.course\n      }));\n    },\n    enabled: isAuthenticated && enrollments.length > 0,\n  });\n\n  // Fetch replies for selected discussion\n  const { data: replies = [] } = useQuery({\n    queryKey: [`/api/replies/${selectedDiscussion}`],\n    enabled: !!selectedDiscussion,\n  });\n\n  // Create new discussion mutation\n  const createDiscussionMutation = useMutation({\n    mutationFn: async ({ title, content, courseId }: { title: string; content: string; courseId: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/discussions\", {\n        title,\n        content,\n        courseId\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/discussions'] });\n      setNewDiscussionTitle(\"\");\n      setNewDiscussionContent(\"\");\n      setNewDiscussionCourse(\"\");\n      toast({\n        title: \"Discussion Created\",\n        description: \"Your discussion has been posted successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create discussion. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create reply mutation\n  const createReplyMutation = useMutation({\n    mutationFn: async ({ discussionId, content }: { discussionId: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/replies\", {\n        discussionId,\n        content\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/replies/${selectedDiscussion}`] });\n      setReplyContent(\"\");\n      toast({\n        title: \"Reply Posted\",\n        description: \"Your reply has been added to the discussion.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\", \n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to post reply. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter discussions based on search and category\n  const filteredDiscussions = allDiscussions.filter((discussion: any) => {\n    const matchesSearch = discussion.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         discussion.content.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || discussion.course?.id === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  // Get recent discussions (last 5)\n  const recentDiscussions = allDiscussions\n    .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 py-16\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-blue-900 text-primary-foreground py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-3xl lg:text-4xl font-bold\" data-testid=\"community-title\">\n              ADR Professional Community\n            </h1>\n            <p className=\"text-xl text-blue-100 max-w-3xl mx-auto\">\n              Connect with fellow practitioners, share knowledge, and advance your career in alternative dispute resolution.\n            </p>\n          </div>\n\n          {/* Community Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-12\">\n            <Card className=\"bg-white/10 backdrop-blur border-white/20\" data-testid=\"stat-members\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">5,000+</div>\n                <div className=\"text-blue-200\">Active Members</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/10 backdrop-blur border-white/20\" data-testid=\"stat-discussions\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">{allDiscussions.length}</div>\n                <div className=\"text-blue-200\">Discussions</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/10 backdrop-blur border-white/20\" data-testid=\"stat-countries\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">50+</div>\n                <div className=\"text-blue-200\">Countries</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/10 backdrop-blur border-white/20\" data-testid=\"stat-expertise\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">95%</div>\n                <div className=\"text-blue-200\">Expert Members</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-4 gap-8\">\n            {/* Main Discussion Area */}\n            <div className=\"lg:col-span-3 space-y-6\">\n              {/* Search and Filters */}\n              <Card data-testid=\"search-filters\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    <div className=\"relative flex-1\">\n                      <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                      <Input\n                        data-testid=\"search-discussions\"\n                        type=\"text\"\n                        placeholder=\"Search discussions...\"\n                        className=\"pl-10\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                      />\n                    </div>\n                    <Select onValueChange={setSelectedCategory} data-testid=\"filter-category\">\n                      <SelectTrigger className=\"w-full md:w-48\">\n                        <SelectValue placeholder=\"All Courses\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All Courses</SelectItem>\n                        {enrollments.map((enrollment: any) => (\n                          <SelectItem key={enrollment.course.id} value={enrollment.course.id}>\n                            {enrollment.course.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"new-discussion-button\">\n                          <i className=\"fas fa-plus mr-2\"></i>\n                          New Discussion\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-md\" data-testid=\"new-discussion-dialog\">\n                        <DialogHeader>\n                          <DialogTitle>Start a New Discussion</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"discussion-course\">Course</Label>\n                            <Select onValueChange={setNewDiscussionCourse} data-testid=\"discussion-course-select\">\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a course\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {enrollments.map((enrollment: any) => (\n                                  <SelectItem key={enrollment.course.id} value={enrollment.course.id}>\n                                    {enrollment.course.title}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label htmlFor=\"discussion-title\">Title</Label>\n                            <Input\n                              id=\"discussion-title\"\n                              data-testid=\"discussion-title-input\"\n                              placeholder=\"Discussion title...\"\n                              value={newDiscussionTitle}\n                              onChange={(e) => setNewDiscussionTitle(e.target.value)}\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"discussion-content\">Content</Label>\n                            <Textarea\n                              id=\"discussion-content\"\n                              data-testid=\"discussion-content-input\"\n                              placeholder=\"Share your thoughts, ask questions...\"\n                              value={newDiscussionContent}\n                              onChange={(e) => setNewDiscussionContent(e.target.value)}\n                              className=\"min-h-[120px]\"\n                            />\n                          </div>\n                          <Button\n                            data-testid=\"submit-discussion\"\n                            onClick={() => createDiscussionMutation.mutate({\n                              title: newDiscussionTitle,\n                              content: newDiscussionContent,\n                              courseId: newDiscussionCourse\n                            })}\n                            disabled={!newDiscussionTitle || !newDiscussionContent || !newDiscussionCourse || createDiscussionMutation.isPending}\n                            className=\"w-full\"\n                          >\n                            {createDiscussionMutation.isPending ? 'Posting...' : 'Post Discussion'}\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Discussion Categories */}\n              <Tabs defaultValue=\"all\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"discussion-tabs\">\n                  <TabsTrigger value=\"all\">All Discussions</TabsTrigger>\n                  <TabsTrigger value=\"questions\">Q&A</TabsTrigger>\n                  <TabsTrigger value=\"general\">General</TabsTrigger>\n                  <TabsTrigger value=\"career\">Career</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"all\" data-testid=\"tab-all-discussions\">\n                  {discussionsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-discussion-${i}`}>\n                          <CardContent className=\"p-6\">\n                            <div className=\"h-6 bg-muted rounded w-3/4 mb-4\"></div>\n                            <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n                            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : filteredDiscussions.length === 0 ? (\n                    <Card data-testid=\"no-discussions\">\n                      <CardContent className=\"p-8 text-center\">\n                        <i className=\"fas fa-comments text-6xl text-muted-foreground mb-4\"></i>\n                        <h3 className=\"text-xl font-semibold text-foreground mb-2\">No discussions yet</h3>\n                        <p className=\"text-muted-foreground mb-6\">\n                          Be the first to start a conversation in the community.\n                        </p>\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button data-testid=\"start-first-discussion\">Start First Discussion</Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"sm:max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Start a New Discussion</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"discussion-course\">Course</Label>\n                                <Select onValueChange={setNewDiscussionCourse}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a course\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {enrollments.map((enrollment: any) => (\n                                      <SelectItem key={enrollment.course.id} value={enrollment.course.id}>\n                                        {enrollment.course.title}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"discussion-title\">Title</Label>\n                                <Input\n                                  id=\"discussion-title\"\n                                  placeholder=\"Discussion title...\"\n                                  value={newDiscussionTitle}\n                                  onChange={(e) => setNewDiscussionTitle(e.target.value)}\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"discussion-content\">Content</Label>\n                                <Textarea\n                                  id=\"discussion-content\"\n                                  placeholder=\"Share your thoughts, ask questions...\"\n                                  value={newDiscussionContent}\n                                  onChange={(e) => setNewDiscussionContent(e.target.value)}\n                                  className=\"min-h-[120px]\"\n                                />\n                              </div>\n                              <Button\n                                onClick={() => createDiscussionMutation.mutate({\n                                  title: newDiscussionTitle,\n                                  content: newDiscussionContent,\n                                  courseId: newDiscussionCourse\n                                })}\n                                disabled={!newDiscussionTitle || !newDiscussionContent || !newDiscussionCourse || createDiscussionMutation.isPending}\n                                className=\"w-full\"\n                              >\n                                {createDiscussionMutation.isPending ? 'Posting...' : 'Post Discussion'}\n                              </Button>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {filteredDiscussions.map((discussion: any) => (\n                        <Card key={discussion.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`discussion-${discussion.id}`}>\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between mb-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Avatar className=\"h-10 w-10\">\n                                  <AvatarImage src={discussion.user?.profileImageUrl} />\n                                  <AvatarFallback className=\"bg-accent text-accent-foreground\">\n                                    {discussion.user?.firstName?.[0]}{discussion.user?.lastName?.[0]}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <div className=\"font-medium text-foreground\">\n                                    {discussion.user?.firstName} {discussion.user?.lastName}\n                                  </div>\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {new Date(discussion.createdAt).toLocaleDateString()}\n                                  </div>\n                                </div>\n                              </div>\n                              {discussion.course && (\n                                <Badge variant=\"outline\" data-testid={`discussion-course-${discussion.id}`}>\n                                  {discussion.course.title}\n                                </Badge>\n                              )}\n                            </div>\n\n                            <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid={`discussion-title-${discussion.id}`}>\n                              {discussion.title}\n                            </h3>\n                            <p className=\"text-muted-foreground mb-4 line-clamp-3\" data-testid={`discussion-content-${discussion.id}`}>\n                              {discussion.content}\n                            </p>\n\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                <span data-testid={`discussion-replies-${discussion.id}`}>\n                                  <i className=\"fas fa-reply mr-1\"></i>\n                                  {discussion._count?.replies || 0} replies\n                                </span>\n                                <span>\n                                  <i className=\"fas fa-eye mr-1\"></i>\n                                  {Math.floor(Math.random() * 100) + 50} views\n                                </span>\n                              </div>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    data-testid={`view-discussion-${discussion.id}`}\n                                    onClick={() => setSelectedDiscussion(discussion.id)}\n                                  >\n                                    View Discussion\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-y-auto\" data-testid=\"discussion-detail-dialog\">\n                                  <DialogHeader>\n                                    <DialogTitle>{discussion.title}</DialogTitle>\n                                  </DialogHeader>\n                                  <div className=\"space-y-6\">\n                                    {/* Original Post */}\n                                    <div className=\"border-b pb-4\">\n                                      <div className=\"flex items-center space-x-3 mb-4\">\n                                        <Avatar className=\"h-10 w-10\">\n                                          <AvatarImage src={discussion.user?.profileImageUrl} />\n                                          <AvatarFallback className=\"bg-accent text-accent-foreground\">\n                                            {discussion.user?.firstName?.[0]}{discussion.user?.lastName?.[0]}\n                                          </AvatarFallback>\n                                        </Avatar>\n                                        <div>\n                                          <div className=\"font-medium text-foreground\">\n                                            {discussion.user?.firstName} {discussion.user?.lastName}\n                                          </div>\n                                          <div className=\"text-sm text-muted-foreground\">\n                                            {new Date(discussion.createdAt).toLocaleDateString()}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      <p className=\"text-foreground whitespace-pre-wrap\">{discussion.content}</p>\n                                    </div>\n\n                                    {/* Replies */}\n                                    <div className=\"space-y-4\">\n                                      <h4 className=\"font-semibold text-foreground\">Replies ({replies.length})</h4>\n                                      {replies.map((reply: any) => (\n                                        <div key={reply.id} className=\"flex items-start space-x-3 p-3 bg-muted/30 rounded-lg\" data-testid={`reply-${reply.id}`}>\n                                          <Avatar className=\"h-8 w-8 flex-shrink-0\">\n                                            <AvatarImage src={reply.user?.profileImageUrl} />\n                                            <AvatarFallback className=\"bg-secondary text-secondary-foreground\">\n                                              {reply.user?.firstName?.[0]}{reply.user?.lastName?.[0]}\n                                            </AvatarFallback>\n                                          </Avatar>\n                                          <div className=\"flex-1\">\n                                            <div className=\"flex items-center space-x-2 mb-1\">\n                                              <span className=\"font-medium text-foreground text-sm\">\n                                                {reply.user?.firstName} {reply.user?.lastName}\n                                              </span>\n                                              <span className=\"text-xs text-muted-foreground\">\n                                                {new Date(reply.createdAt).toLocaleDateString()}\n                                              </span>\n                                            </div>\n                                            <p className=\"text-sm text-foreground whitespace-pre-wrap\">{reply.content}</p>\n                                          </div>\n                                        </div>\n                                      ))}\n                                    </div>\n\n                                    {/* Reply Form */}\n                                    <div className=\"border-t pt-4\">\n                                      <h4 className=\"font-semibold text-foreground mb-3\">Add a Reply</h4>\n                                      <div className=\"space-y-3\">\n                                        <Textarea\n                                          data-testid=\"reply-content-input\"\n                                          placeholder=\"Share your thoughts...\"\n                                          value={replyContent}\n                                          onChange={(e) => setReplyContent(e.target.value)}\n                                          className=\"min-h-[100px]\"\n                                        />\n                                        <Button\n                                          data-testid=\"submit-reply\"\n                                          onClick={() => createReplyMutation.mutate({\n                                            discussionId: selectedDiscussion,\n                                            content: replyContent\n                                          })}\n                                          disabled={!replyContent || createReplyMutation.isPending}\n                                        >\n                                          {createReplyMutation.isPending ? 'Posting...' : 'Post Reply'}\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"questions\" data-testid=\"tab-questions\">\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <i className=\"fas fa-question-circle text-6xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"text-xl font-semibold text-foreground mb-2\">Q&A Section</h3>\n                      <p className=\"text-muted-foreground\">\n                        Ask questions and get answers from experienced ADR professionals.\n                      </p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"general\" data-testid=\"tab-general\">\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <i className=\"fas fa-users text-6xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"text-xl font-semibold text-foreground mb-2\">General Discussions</h3>\n                      <p className=\"text-muted-foreground\">\n                        General topics related to ADR practice and industry trends.\n                      </p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"career\" data-testid=\"tab-career\">\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <i className=\"fas fa-briefcase text-6xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"text-xl font-semibold text-foreground mb-2\">Career Discussions</h3>\n                      <p className=\"text-muted-foreground\">\n                        Career advice, job opportunities, and professional development.\n                      </p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Recent Discussions */}\n              <Card data-testid=\"recent-discussions\">\n                <CardHeader>\n                  <CardTitle>Recent Discussions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {recentDiscussions.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No recent discussions</p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {recentDiscussions.map((discussion: any) => (\n                        <div key={discussion.id} className=\"p-3 border rounded-lg hover:bg-muted/50 transition-colors\" data-testid={`recent-discussion-${discussion.id}`}>\n                          <h4 className=\"font-medium text-foreground text-sm mb-1 line-clamp-2\">\n                            {discussion.title}\n                          </h4>\n                          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                            <span>{discussion.user?.firstName} {discussion.user?.lastName}</span>\n                            <span>•</span>\n                            <span>{new Date(discussion.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Community Guidelines */}\n              <Card data-testid=\"community-guidelines\">\n                <CardHeader>\n                  <CardTitle>Community Guidelines</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-green-600 mt-1\"></i>\n                      <span className=\"text-muted-foreground\">Be respectful and professional</span>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-green-600 mt-1\"></i>\n                      <span className=\"text-muted-foreground\">Share relevant and valuable content</span>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-green-600 mt-1\"></i>\n                      <span className=\"text-muted-foreground\">Use clear and descriptive titles</span>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-green-600 mt-1\"></i>\n                      <span className=\"text-muted-foreground\">Search before posting duplicates</span>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <i className=\"fas fa-check text-green-600 mt-1\"></i>\n                      <span className=\"text-muted-foreground\">Maintain confidentiality</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Top Contributors */}\n              <Card data-testid=\"top-contributors\">\n                <CardHeader>\n                  <CardTitle>Top Contributors</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {[\n                      { name: \"Dr. Sarah Chen\", posts: 45, badge: \"Expert\" },\n                      { name: \"Michael Rodriguez\", posts: 32, badge: \"Mentor\" },\n                      { name: \"Emma Thompson\", posts: 28, badge: \"Active\" },\n                    ].map((contributor, index) => (\n                      <div key={index} className=\"flex items-center space-x-3\" data-testid={`contributor-${index}`}>\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback className=\"bg-accent text-accent-foreground text-xs\">\n                            {contributor.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground text-sm\">{contributor.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">{contributor.posts} posts</div>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {contributor.badge}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Upcoming Events */}\n              <Card data-testid=\"upcoming-events\">\n                <CardHeader>\n                  <CardTitle>Upcoming Events</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 border rounded-lg\">\n                      <h4 className=\"font-medium text-foreground text-sm mb-1\">\n                        Monthly ADR Webinar\n                      </h4>\n                      <div className=\"text-xs text-muted-foreground mb-2\">\n                        Dec 15, 2024 • 2:00 PM UTC\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" data-testid=\"register-webinar\">\n                        Register\n                      </Button>\n                    </div>\n                    <div className=\"p-3 border rounded-lg\">\n                      <h4 className=\"font-medium text-foreground text-sm mb-1\">\n                        Networking Session\n                      </h4>\n                      <div className=\"text-xs text-muted-foreground mb-2\">\n                        Dec 20, 2024 • 7:00 PM UTC\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" data-testid=\"join-networking\">\n                        Join\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":37534},"client/src/pages/course-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Link, useLocation } from \"wouter\";\nimport { Star, Clock, Users, BookOpen, PlayCircle, CheckCircle } from \"lucide-react\";\nimport type { CourseWithDetails, ReviewWithUser } from \"@shared/schema\";\n\nexport default function CourseDetail() {\n  const { id } = useParams();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: course, isLoading } = useQuery<CourseWithDetails>({\n    queryKey: [`/api/courses/${id}`],\n    enabled: !!id,\n  });\n\n  const { data: enrollment } = useQuery({\n    queryKey: [`/api/enrollments/check/${id}`],\n    enabled: !!id && !!user,\n  });\n\n  const { data: reviews = [] } = useQuery<ReviewWithUser[]>({\n    queryKey: [`/api/reviews/${id}`],\n    enabled: !!id,\n  });\n\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      if (course?.price && parseFloat(course.price.toString()) > 0) {\n        setLocation(`/checkout/${id}`);\n        return;\n      }\n      const response = await fetch('/api/enrollments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ courseId: id }),\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to enroll');\n      return response.json();\n    },\n    onSuccess: () => {\n      if (!course?.price || parseFloat(course.price.toString()) === 0) {\n        queryClient.invalidateQueries({ queryKey: [`/api/enrollments/check/${id}`] });\n        queryClient.invalidateQueries({ queryKey: ['/api/enrollments'] });\n        toast({\n          title: \"Enrolled Successfully\",\n          description: \"You can now start learning!\",\n        });\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Enrollment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-2/3 mb-4\"></div>\n            <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <div className=\"h-64 bg-muted rounded mb-6\"></div>\n                <div className=\"space-y-4\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-5/6\"></div>\n                </div>\n              </div>\n              <div className=\"lg:col-span-1\">\n                <div className=\"h-96 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Course Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The course you're looking for doesn't exist.</p>\n          <Link href=\"/courses\">\n            <Button>Browse Courses</Button>\n          </Link>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const isEnrolled = !!enrollment;\n  const totalLessons = course.modules?.reduce((total, module) => total + (module.lessons?.length || 0), 0) || 0;\n  const avgRating = course.avgRating ? parseFloat(course.avgRating.toString()) : 0;\n  const ratingCount = course.ratingCount || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Course Header */}\n      <section className=\"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8 items-start\">\n            <div className=\"lg:col-span-2\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Badge variant=\"secondary\" className=\"bg-white/20 text-white\">\n                  {course.level}\n                </Badge>\n                {course.category && (\n                  <Badge variant=\"secondary\" className=\"bg-white/20 text-white\">\n                    {course.category.name}\n                  </Badge>\n                )}\n              </div>\n              <h1 className=\"text-3xl lg:text-4xl font-bold mb-4\" data-testid=\"course-title\">\n                {course.title}\n              </h1>\n              {course.subtitle && (\n                <p className=\"text-lg text-primary-foreground/90 mb-6\" data-testid=\"course-subtitle\">\n                  {course.subtitle}\n                </p>\n              )}\n              \n              <div className=\"flex flex-wrap items-center gap-6 text-sm\">\n                {course.instructor && (\n                  <div className=\"flex items-center space-x-2\">\n                    <img \n                      src={course.instructor.profileImageUrl || `https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100`}\n                      alt={`${course.instructor.firstName} ${course.instructor.lastName}`}\n                      className=\"w-8 h-8 rounded-full object-cover\"\n                      data-testid=\"instructor-avatar\"\n                    />\n                    <span>By {course.instructor.firstName} {course.instructor.lastName}</span>\n                  </div>\n                )}\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-4 h-4 fill-current\" />\n                  <span>{avgRating.toFixed(1)} ({ratingCount} reviews)</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>{course.enrollmentCount} students</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Course Card Preview */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-white shadow-lg\">\n                <div className=\"aspect-video bg-muted rounded-t-lg relative overflow-hidden\">\n                  {course.thumbnailUrl ? (\n                    <img \n                      src={course.thumbnailUrl}\n                      alt={course.title}\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"course-thumbnail\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-primary/20 to-primary/30\">\n                      <PlayCircle className=\"w-16 h-16 text-primary\" />\n                    </div>\n                  )}\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"course-price\">\n                    {course.price && parseFloat(course.price.toString()) > 0 \n                      ? `$${parseFloat(course.price.toString()).toFixed(2)} ${course.currency || 'USD'}`\n                      : 'Free'\n                    }\n                  </div>\n                  \n                  {isEnrolled ? (\n                    <Link href={`/learn/${course.id}/1`}>\n                      <Button className=\"w-full\" size=\"lg\" data-testid=\"button-continue-learning\">\n                        <PlayCircle className=\"w-4 h-4 mr-2\" />\n                        Continue Learning\n                      </Button>\n                    </Link>\n                  ) : (\n                    <Button \n                      onClick={() => enrollMutation.mutate()}\n                      disabled={enrollMutation.isPending}\n                      className=\"w-full\" \n                      size=\"lg\"\n                      data-testid=\"button-enroll\"\n                    >\n                      {enrollMutation.isPending \n                        ? 'Processing...' \n                        : course.price && parseFloat(course.price.toString()) > 0 \n                          ? 'Enroll Now' \n                          : 'Enroll Free'\n                      }\n                    </Button>\n                  )}\n\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-4 text-sm\">\n                    {course.duration && (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                          <span>Duration</span>\n                        </div>\n                        <span className=\"font-medium\">{course.duration} hours</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Lessons</span>\n                      </div>\n                      <span className=\"font-medium\">{totalLessons}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Certificate</span>\n                      </div>\n                      <span className=\"font-medium\">Yes</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Course Content */}\n      <section className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"curriculum\" data-testid=\"tab-curriculum\">Curriculum</TabsTrigger>\n                  <TabsTrigger value=\"reviews\" data-testid=\"tab-reviews\">Reviews</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"mt-6\">\n                  <div className=\"prose prose-slate max-w-none\">\n                    <h3 className=\"text-xl font-semibold mb-4\">Course Description</h3>\n                    <div className=\"text-muted-foreground leading-relaxed mb-6\" data-testid=\"course-description\">\n                      {course.description || 'No description available.'}\n                    </div>\n\n                    {course.tags && course.tags.length > 0 && (\n                      <div>\n                        <h3 className=\"text-xl font-semibold mb-4\">What you'll learn</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {course.tags.map((tag, index) => (\n                            <Badge key={index} variant=\"outline\" data-testid={`tag-${index}`}>\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"curriculum\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold\">Course Curriculum</h3>\n                    {course.modules && course.modules.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {course.modules.map((module, moduleIndex) => (\n                          <Card key={module.id} data-testid={`module-${moduleIndex}`}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{module.title}</h4>\n                              {module.description && (\n                                <p className=\"text-sm text-muted-foreground mb-3\">{module.description}</p>\n                              )}\n                              {module.lessons && module.lessons.length > 0 && (\n                                <div className=\"space-y-2 ml-4\">\n                                  {module.lessons.map((lesson, lessonIndex) => (\n                                    <div key={lesson.id} className=\"flex items-center justify-between py-2 border-b border-border last:border-0\">\n                                      <div className=\"flex items-center space-x-3\">\n                                        <div className=\"w-6 h-6 rounded-full bg-muted flex items-center justify-center text-xs\">\n                                          {lessonIndex + 1}\n                                        </div>\n                                        <span className=\"text-sm\">{lesson.title}</span>\n                                      </div>\n                                      {lesson.duration && (\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {Math.floor(lesson.duration / 60)}:{(lesson.duration % 60).toString().padStart(2, '0')}\n                                        </span>\n                                      )}\n                                    </div>\n                                  ))}\n                                </div>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-muted-foreground\">Curriculum will be available soon.</p>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"reviews\" className=\"mt-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-xl font-semibold\">Student Reviews</h3>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star \n                              key={i} \n                              className={`w-4 h-4 ${i < Math.floor(avgRating) ? 'fill-current text-yellow-500' : 'text-muted-foreground'}`} \n                            />\n                          ))}\n                        </div>\n                        <span className=\"font-medium\">{avgRating.toFixed(1)}</span>\n                        <span className=\"text-muted-foreground\">({ratingCount} reviews)</span>\n                      </div>\n                    </div>\n\n                    {reviews.length > 0 ? (\n                      <div className=\"space-y-6\">\n                        {reviews.map((review) => (\n                          <Card key={review.id}>\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-start space-x-4\">\n                                <img \n                                  src={review.user.profileImageUrl || `https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100`}\n                                  alt={`${review.user.firstName} ${review.user.lastName}`}\n                                  className=\"w-10 h-10 rounded-full object-cover\"\n                                />\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <div>\n                                      <p className=\"font-medium\">{review.user.firstName} {review.user.lastName}</p>\n                                      <div className=\"flex items-center space-x-1\">\n                                        {[...Array(5)].map((_, i) => (\n                                          <Star \n                                            key={i} \n                                            className={`w-3 h-3 ${i < review.rating ? 'fill-current text-yellow-500' : 'text-muted-foreground'}`} \n                                          />\n                                        ))}\n                                      </div>\n                                    </div>\n                                    <span className=\"text-xs text-muted-foreground\">\n                                      {review.createdAt ? new Date(review.createdAt).toLocaleDateString() : 'N/A'}\n                                    </span>\n                                  </div>\n                                  {review.comment && (\n                                    <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n                                  )}\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-muted-foreground\">No reviews yet. Be the first to review this course!</p>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n\n            {/* Instructor Info */}\n            <div className=\"lg:col-span-1\">\n              {course.instructor && (\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Instructor</h3>\n                    <div className=\"text-center space-y-4\">\n                      <img \n                        src={course.instructor.profileImageUrl || `https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200`}\n                        alt={`${course.instructor.firstName} ${course.instructor.lastName}`}\n                        className=\"w-20 h-20 rounded-full object-cover mx-auto\"\n                        data-testid=\"instructor-profile-image\"\n                      />\n                      <div>\n                        <h4 className=\"font-semibold text-lg\">\n                          {course.instructor.firstName} {course.instructor.lastName}\n                        </h4>\n                        {course.instructor.bio && (\n                          <p className=\"text-sm text-muted-foreground mt-2\">\n                            {course.instructor.bio}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":20166},"client/src/pages/courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CourseCard from \"@/components/course-card\";\nimport { Search, Filter, SortAsc, SortDesc, Grid, List, Heart, BookOpen, Clock, Star, Users } from \"lucide-react\";\n\nexport default function Courses() {\n  const { t } = useLanguage();\n  const [search, setSearch] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [priceRange, setPriceRange] = useState(\"\");\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: courses = [], isLoading } = useQuery({\n    queryKey: ['/api/courses', { \n      search, \n      category: category === 'all' ? '' : category, \n      level: level === 'all' ? '' : level, \n      sortBy, \n      priceRange: priceRange === 'all' ? '' : priceRange \n    }],\n    enabled: true,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/courses/stats'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary/90 to-primary/70 text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"space-y-4\">\n              <Badge className=\"bg-white/20 text-white border-white/30 backdrop-blur\">\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                {stats?.totalCourses || '50+'} Professional Courses\n              </Badge>\n              <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight\">\n                {t('courses.title')}\n              </h1>\n              <p className=\"text-xl text-primary-foreground/90 max-w-3xl mx-auto leading-relaxed\">\n                {t('courses.subtitle')}\n              </p>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"flex flex-wrap justify-center gap-8 mt-8 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-4 h-4 text-yellow-300\" />\n                <span>5,000+ Global Members</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Star className=\"w-4 h-4 text-yellow-300\" />\n                <span>4.8 Average Rating</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-yellow-300\" />\n                <span>International Recognition</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen className=\"w-4 h-4 text-yellow-300\" />\n                <span>6 Professional Courses</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Advanced Search & Filters */}\n      <section className=\"py-12 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Search Bar */}\n          <div className=\"relative max-w-2xl mx-auto mb-8\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n            <Input\n              data-testid=\"input-search\"\n              type=\"text\"\n              placeholder=\"Search courses, topics, or instructors...\"\n              className=\"pl-12 pr-4 py-3 text-lg border-0 bg-white shadow-md rounded-xl focus:ring-2 focus:ring-primary/20\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n\n          {/* Filter Row */}\n          <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n            {/* Left Filters */}\n            <div className=\"flex flex-wrap items-center gap-4\">\n              <Select onValueChange={setCategory} data-testid=\"select-category\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((cat: any) => (\n                    <SelectItem key={cat.id} value={cat.slug || cat.id}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={setLevel} data-testid=\"select-level\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"beginner\">Beginner</SelectItem>\n                  <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                  <SelectItem value=\"advanced\">Advanced</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={setPriceRange} data-testid=\"select-price\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Price Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Prices</SelectItem>\n                  <SelectItem value=\"0-1000\">Under $1,000</SelectItem>\n                  <SelectItem value=\"1000-2000\">$1,000 - $2,000</SelectItem>\n                  <SelectItem value=\"2000-3000\">$2,000 - $3,000</SelectItem>\n                  <SelectItem value=\"3000+\">$3,000+</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={setSortBy} data-testid=\"select-sort\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"popular\">Most Popular</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Right View Controls */}\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                data-testid=\"button-grid-view\"\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                data-testid=\"button-list-view\"\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {(search || category || level || priceRange) && (\n            <div className=\"flex flex-wrap items-center gap-2 mb-6\">\n              <span className=\"text-sm text-muted-foreground\">Active filters:</span>\n              {search && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Search: \"{search}\"\n                  <button onClick={() => setSearch(\"\")} className=\"ml-1 hover:text-destructive\">×</button>\n                </Badge>\n              )}\n              {category && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Category: {categories.find((c: any) => c.slug === category)?.name || category}\n                  <button onClick={() => setCategory(\"\")} className=\"ml-1 hover:text-destructive\">×</button>\n                </Badge>\n              )}\n              {level && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Level: {level}\n                  <button onClick={() => setLevel(\"\")} className=\"ml-1 hover:text-destructive\">×</button>\n                </Badge>\n              )}\n              {priceRange && (\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  Price: {priceRange === \"free\" ? \"Free\" : `$${priceRange}`}\n                  <button onClick={() => setPriceRange(\"\")} className=\"ml-1 hover:text-destructive\">×</button>\n                </Badge>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setSearch(\"\");\n                  setCategory(\"all\");\n                  setLevel(\"all\");\n                  setPriceRange(\"all\");\n                }}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                Clear all\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Courses Section */}\n      <section className=\"py-12 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Featured Professional Courses</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Internationally recognized courses designed by leading ADR experts and practitioners\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8 mb-8\">\n            {/* Highlight top courses */}\n            {courses.filter((course: any) => course.isFeatured).slice(0, 2).map((course: any) => (\n              <Card key={course.id} className=\"overflow-hidden group hover:shadow-xl transition-all duration-300\">\n                <div className=\"relative\">\n                  <img \n                    src={course.thumbnailUrl} \n                    alt={course.title}\n                    className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute top-4 left-4\">\n                    <Badge className=\"bg-primary text-primary-foreground\">\n                      Featured\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-4 right-4\">\n                    <Badge variant=\"secondary\" className=\"bg-black/20 text-white border-0\">\n                      {course.level}\n                    </Badge>\n                  </div>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-xl font-bold text-foreground mb-2 line-clamp-2\">\n                        {course.title}\n                      </h3>\n                      <p className=\"text-muted-foreground text-sm line-clamp-3\">\n                        {course.description}\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <div className=\"text-2xl font-bold text-foreground\">\n                          ${course.price.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {course.duration} hours • {course.enrollmentCount} enrolled\n                        </div>\n                      </div>\n                      <Button>\n                        Learn More\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Results Section */}\n      <section className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n\n          {/* Results Header */}\n          {!isLoading && (\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">\n                  {courses.length === 0 ? 'No courses found' : 'Available Courses'}\n                </h2>\n                <p className=\"text-muted-foreground mt-1\" data-testid=\"results-count\">\n                  {courses.length > 0 && `${courses.length} course${courses.length !== 1 ? 's' : ''} available`}\n                </p>\n              </div>\n              \n              {courses.length > 0 && (\n                <div className=\"flex items-center gap-4\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Showing {Math.min(courses.length, 12)} of {courses.length} results\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Loading State */}\n          {isLoading && (\n            <div className={viewMode === \"grid\" ? \"grid md:grid-cols-2 lg:grid-cols-3 gap-8\" : \"space-y-6\"}>\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-course-${i}`}>\n                  {viewMode === \"grid\" ? (\n                    <>\n                      <div className=\"w-full h-48 bg-muted\"></div>\n                      <CardContent className=\"p-6 space-y-4\">\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                        <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                        <div className=\"h-10 bg-muted rounded\"></div>\n                      </CardContent>\n                    </>\n                  ) : (\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex space-x-4\">\n                        <div className=\"w-24 h-16 bg-muted rounded flex-shrink-0\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          <div className=\"h-8 bg-muted rounded w-24\"></div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Empty State */}\n          {!isLoading && courses.length === 0 && (\n            <div className=\"text-center py-16\" data-testid=\"empty-state\">\n              <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Search className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No courses found</h3>\n              <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n                We couldn't find any courses matching your criteria. Try adjusting your filters or search terms.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearch(\"\");\n                    setCategory(\"\");\n                    setLevel(\"\");\n                    setPriceRange(\"\");\n                  }}\n                >\n                  Clear all filters\n                </Button>\n                <Button asChild>\n                  <a href=\"/courses\">Browse all courses</a>\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Course Results */}\n          {!isLoading && courses.length > 0 && (\n            <div className={\n              viewMode === \"grid\" \n                ? \"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n                : \"space-y-6\"\n            }>\n              {courses.map((course: any) => (\n                viewMode === \"grid\" ? (\n                  <CourseCard key={course.id} course={course} />\n                ) : (\n                  <Card key={course.id} className=\"hover:shadow-lg transition-all duration-300 group\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex space-x-4\">\n                        <div className=\"w-24 h-16 bg-muted rounded overflow-hidden flex-shrink-0\">\n                          {course.thumbnailUrl ? (\n                            <img \n                              src={course.thumbnailUrl}\n                              alt={course.title}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-primary/30 flex items-center justify-center\">\n                              <BookOpen className=\"w-6 h-6 text-primary\" />\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1 min-w-0\">\n                              <h3 className=\"font-semibold text-lg group-hover:text-primary transition-colors truncate\">\n                                {course.title}\n                              </h3>\n                              {course.subtitle && (\n                                <p className=\"text-sm text-muted-foreground mt-1 line-clamp-1\">\n                                  {course.subtitle}\n                                </p>\n                              )}\n                              <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center space-x-1\">\n                                  <Star className=\"w-4 h-4 fill-current text-yellow-500\" />\n                                  <span>{course.avgRating?.toFixed(1) || '0.0'}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <Users className=\"w-4 h-4\" />\n                                  <span>{course.enrollmentCount || 0}</span>\n                                </div>\n                                {course.duration && (\n                                  <div className=\"flex items-center space-x-1\">\n                                    <Clock className=\"w-4 h-4\" />\n                                    <span>{course.duration}h</span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end space-y-2 ml-4\">\n                              <div className=\"text-lg font-bold text-primary\">\n                                {course.price && parseFloat(course.price.toString()) > 0 \n                                  ? `$${parseFloat(course.price.toString()).toFixed(2)}`\n                                  : 'Free'\n                                }\n                              </div>\n                              <Button size=\"sm\" asChild>\n                                <a href={`/courses/${course.id}`}>View Course</a>\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":20475},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CourseCard from \"@/components/course-card\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  BookOpen, \n  Clock, \n  Trophy, \n  Heart, \n  Play, \n  MoreVertical, \n  Star, \n  Users, \n  Calendar,\n  Award,\n  TrendingUp,\n  Target,\n  CheckCircle,\n  HeartIcon,\n  Download,\n  FileText,\n  Video,\n  MessageSquare,\n  Brain,\n  GraduationCap,\n  PlayCircle,\n  PauseCircle,\n  FileDown,\n  ClipboardCheck,\n  Award as Certificate\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to sign in to access your dashboard.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, toast]);\n\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['/api/enrollments'],\n    enabled: !!user,\n  });\n\n  const { data: favorites = [], isLoading: favoritesLoading } = useQuery({\n    queryKey: ['/api/favorites'],\n    enabled: !!user,\n  });\n\n  const { data: progressOverview } = useQuery({\n    queryKey: ['/api/progress/overview'],\n    enabled: !!user,\n  });\n\n  const { data: certificates = [] } = useQuery({\n    queryKey: ['/api/certificates'],\n    enabled: !!user,\n  });\n\n  const { data: assignments = [] } = useQuery({\n    queryKey: ['/api/assignments'],\n    enabled: !!user,\n  });\n\n  const { data: quizzes = [] } = useQuery({\n    queryKey: ['/api/quizzes/pending'],\n    enabled: !!user,\n  });\n\n  const { data: recommendations = [] } = useQuery({\n    queryKey: ['/api/recommendations'],\n    enabled: !!user,\n  });\n\n  const { data: downloadableResources = [] } = useQuery({\n    queryKey: ['/api/resources/downloadable'],\n    enabled: !!user,\n  });\n\n  const { data: recentActivity = [] } = useQuery({\n    queryKey: ['/api/activity/recent'],\n    enabled: !!user,\n  });\n\n  const removeFavoriteMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      const response = await fetch(`/api/favorites/${courseId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to remove favorite');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      toast({\n        title: \"Removed from Favorites\",\n        description: \"Course removed from your favorites list.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[50vh]\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary/90 to-primary/70 text-primary-foreground py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col lg:flex-row items-center justify-between space-y-6 lg:space-y-0\">\n            <div className=\"text-center lg:text-left space-y-4\">\n              <h1 className=\"text-3xl lg:text-4xl font-bold\" data-testid=\"dashboard-title\">\n                Welcome back, {user?.firstName}!\n              </h1>\n              <p className=\"text-xl text-primary-foreground/90\">\n                Continue your journey to mastering Alternative Dispute Resolution\n              </p>\n            </div>\n            \n            {/* Quick Action */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link href=\"/courses\">\n                <Button size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                  <BookOpen className=\"w-5 h-5 mr-2\" />\n                  Browse Courses\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          {progressOverview && (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-8\">\n              <Card className=\"bg-white/10 backdrop-blur border-white/20\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <BookOpen className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-yellow-300\">\n                    {progressOverview.totalCourses || '0'}\n                  </div>\n                  <div className=\"text-xs text-primary-foreground/80\">Enrolled</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Trophy className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-yellow-300\">\n                    {progressOverview.completedCourses || '0'}\n                  </div>\n                  <div className=\"text-xs text-primary-foreground/80\">Completed</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Clock className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-yellow-300\">\n                    {progressOverview.totalHours || '0'}\n                  </div>\n                  <div className=\"text-xs text-primary-foreground/80\">Hours</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Award className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-yellow-300\">\n                    {certificates.length || '0'}\n                  </div>\n                  <div className=\"text-xs text-primary-foreground/80\">Certificates</div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Dashboard Content */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              {/* Current Courses */}\n              <div>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Current Courses</h2>\n                  <Link href=\"/courses\">\n                    <Button variant=\"outline\" data-testid=\"button-browse-courses\">Browse Courses</Button>\n                  </Link>\n                </div>\n\n                {enrollmentsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(2)].map((_, i) => (\n                      <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-course-${i}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"h-6 bg-muted rounded w-3/4 mb-4\"></div>\n                          <div className=\"h-4 bg-muted rounded w-1/2 mb-4\"></div>\n                          <div className=\"h-2 bg-muted rounded mb-2\"></div>\n                          <div className=\"h-8 bg-muted rounded w-32\"></div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : enrollments.length === 0 ? (\n                  <Card data-testid=\"no-enrollments\">\n                    <CardContent className=\"p-8 text-center\">\n                      <i className=\"fas fa-graduation-cap text-6xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"text-xl font-semibold text-foreground mb-2\">No courses yet</h3>\n                      <p className=\"text-muted-foreground mb-6\">\n                        Start your ADR journey by enrolling in your first course.\n                      </p>\n                      <Link href=\"/courses\">\n                        <Button data-testid=\"button-explore-courses\">Explore Courses</Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {enrollments.map((enrollment) => (\n                      <Card key={enrollment.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`course-${enrollment.course.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <img \n                                src={enrollment.course.thumbnailUrl || `https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250`}\n                                alt={enrollment.course.title}\n                                className=\"w-16 h-16 object-cover rounded-lg\"\n                              />\n                              <div>\n                                <h3 className=\"font-semibold text-foreground\" data-testid={`course-title-${enrollment.course.id}`}>\n                                  {enrollment.course.title}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  By {enrollment.course.instructor?.firstName} {enrollment.course.instructor?.lastName}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge \n                              data-testid={`course-progress-badge-${enrollment.course.id}`}\n                              variant={enrollment.progress === '100' ? 'default' : 'secondary'}\n                            >\n                              {enrollment.progress}% Complete\n                            </Badge>\n                          </div>\n\n                          <div className=\"mb-4\">\n                            <Progress \n                              value={parseFloat(enrollment.progress || '0')} \n                              className=\"h-2\"\n                              data-testid={`progress-bar-${enrollment.course.id}`}\n                            />\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              Enrolled on {new Date(enrollment.enrolledAt).toLocaleDateString()}\n                            </div>\n                            <Link href={`/learn/${enrollment.course.id}/1`}>\n                              <Button \n                                data-testid={`button-continue-${enrollment.course.id}`}\n                                size=\"sm\"\n                              >\n                                {enrollment.progress === '100' ? 'Review' : 'Continue'}\n                              </Button>\n                            </Link>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Interactive Quizzes */}\n              <div>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Pending Quizzes</h2>\n                  <Badge variant=\"secondary\">{quizzes.length} available</Badge>\n                </div>\n                \n                {quizzes.length === 0 ? (\n                  <Card data-testid=\"no-quizzes\">\n                    <CardContent className=\"p-8 text-center\">\n                      <ClipboardCheck className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No pending quizzes</h3>\n                      <p className=\"text-muted-foreground\">Complete lessons to unlock quizzes</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {quizzes.slice(0, 3).map((quiz) => (\n                      <Card key={quiz.id} className=\"border-accent/20 bg-accent/5\" data-testid={`quiz-${quiz.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center\">\n                                <ClipboardCheck className=\"w-6 h-6 text-accent\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-foreground\">{quiz.title}</h3>\n                                <p className=\"text-sm text-muted-foreground\">{quiz.course?.title}</p>\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\">{quiz.questionCount} questions</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              Time limit: {quiz.timeLimit || 30} minutes\n                            </div>\n                            <Link href={`/quiz/${quiz.id}`}>\n                              <Button size=\"sm\" data-testid={`button-start-quiz-${quiz.id}`}>\n                                <Play className=\"w-4 h-4 mr-2\" />\n                                Start Quiz\n                              </Button>\n                            </Link>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Assignment Submissions */}\n              <div>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Assignments</h2>\n                  <Badge variant=\"secondary\">{assignments.length} pending</Badge>\n                </div>\n                \n                {assignments.length === 0 ? (\n                  <Card data-testid=\"no-assignments\">\n                    <CardContent className=\"p-8 text-center\">\n                      <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No assignments yet</h3>\n                      <p className=\"text-muted-foreground\">Assignments will appear as you progress through courses</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {assignments.slice(0, 3).map((assignment) => (\n                      <Card key={assignment.id} className=\"border-destructive/20 bg-destructive/5\" data-testid={`assignment-${assignment.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-12 h-12 bg-destructive/20 rounded-lg flex items-center justify-center\">\n                                <FileText className=\"w-6 h-6 text-destructive\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-foreground\">{assignment.title}</h3>\n                                <p className=\"text-sm text-muted-foreground\">{assignment.course?.title}</p>\n                              </div>\n                            </div>\n                            <Badge variant=\"destructive\">\n                              Due {new Date(assignment.dueDate).toLocaleDateString()}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              {assignment.submissionStatus === 'submitted' ? 'Submitted - Awaiting grade' : 'Not submitted'}\n                            </div>\n                            <Button \n                              size=\"sm\" \n                              variant={assignment.submissionStatus === 'submitted' ? 'outline' : 'default'}\n                              data-testid={`button-assignment-${assignment.id}`}\n                            >\n                              {assignment.submissionStatus === 'submitted' ? 'View Submission' : 'Submit Assignment'}\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Downloadable Resources */}\n              <div>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Resources</h2>\n                  <Badge variant=\"secondary\">{downloadableResources.length} available</Badge>\n                </div>\n                \n                {downloadableResources.length === 0 ? (\n                  <Card data-testid=\"no-resources\">\n                    <CardContent className=\"p-8 text-center\">\n                      <Download className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No resources yet</h3>\n                      <p className=\"text-muted-foreground\">Downloadable materials will appear as you enroll in courses</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    {downloadableResources.slice(0, 4).map((resource) => (\n                      <Card key={resource.id} className=\"hover:shadow-md transition-shadow\" data-testid={`resource-${resource.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center space-x-3 mb-3\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                              <FileDown className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-foreground truncate\">{resource.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{resource.type.toUpperCase()}</p>\n                            </div>\n                          </div>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            data-testid={`button-download-${resource.id}`}\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-8\">\n              {/* Learning Stats */}\n              {progressOverview && (\n                <Card data-testid=\"learning-stats\">\n                  <CardHeader>\n                    <CardTitle>Learning Stats</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Enrolled Courses</span>\n                      <span className=\"font-semibold text-foreground\" data-testid=\"stat-enrolled\">\n                        {progressOverview.totalCourses}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Completed Courses</span>\n                      <span className=\"font-semibold text-foreground\" data-testid=\"stat-completed\">\n                        {progressOverview.completedCourses}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Study Hours</span>\n                      <span className=\"font-semibold text-foreground\" data-testid=\"stat-hours\">\n                        {progressOverview.totalHours}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Success Rate</span>\n                      <span className=\"font-semibold text-accent\" data-testid=\"stat-success-rate\">95%</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* AI Learning Recommendations */}\n              <Card data-testid=\"ai-recommendations\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Brain className=\"w-5 h-5 mr-2\" />\n                    Recommended for You\n                  </CardTitle>\n                  <CardDescription>AI-powered course suggestions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {recommendations.length === 0 ? (\n                    <div className=\"text-center py-6\">\n                      <Brain className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">No recommendations yet</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">Complete more courses to get personalized suggestions</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {recommendations.slice(0, 3).map((course) => (\n                        <div key={course.id} className=\"border rounded-lg p-3 hover:bg-muted/50 transition-colors\" data-testid={`recommendation-${course.id}`}>\n                          <div className=\"flex items-start space-x-3\">\n                            <img \n                              src={course.thumbnailUrl || `https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=60`}\n                              alt={course.title}\n                              className=\"w-12 h-8 object-cover rounded\"\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-sm text-foreground truncate\">{course.title}</h4>\n                              <div className=\"flex items-center mt-1 space-x-2\">\n                                <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                                <span className=\"text-xs text-muted-foreground\">{course.avgRating}</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">{course.matchScore}% match</Badge>\n                              </div>\n                            </div>\n                          </div>\n                          <Link href={`/course/${course.id}`}>\n                            <Button size=\"sm\" variant=\"outline\" className=\"w-full mt-2\">\n                              View Course\n                            </Button>\n                          </Link>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Certificates & Achievements */}\n              <Card data-testid=\"certificates\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Certificate className=\"w-5 h-5 mr-2\" />\n                    Award as Certificates\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {certificates.length === 0 ? (\n                    <div className=\"text-center py-6\">\n                      <Certificate className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">No certificates yet</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">Complete courses to earn PDF certificates</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {certificates.map((cert) => (\n                        <div \n                          key={cert.id} \n                          className=\"flex items-center space-x-3 p-3 bg-accent/10 rounded-lg border border-accent/20 hover:shadow-sm transition-shadow\"\n                          data-testid={`cert-${cert.course.id}`}\n                        >\n                          <div className=\"w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center\">\n                            <GraduationCap className=\"w-5 h-5 text-accent\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"font-medium text-foreground text-sm truncate\">\n                              {cert.course.title}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Earned {new Date(cert.issuedAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`download-cert-${cert.id}`}>\n                            <Download className=\"w-3 h-3 mr-1\" />\n                            PDF\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Community Activity */}\n              <Card data-testid=\"community-activity\">\n                <CardHeader>\n                  <CardTitle>Community</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Forum Posts</span>\n                    <span className=\"font-medium text-foreground\">8</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Questions Asked</span>\n                    <span className=\"font-medium text-foreground\">3</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Answers Given</span>\n                    <span className=\"font-medium text-foreground\">12</span>\n                  </div>\n                  <Link href=\"/community\">\n                    <Button \n                      data-testid=\"button-join-community\"\n                      variant=\"outline\" \n                      className=\"w-full\" \n                      size=\"sm\"\n                    >\n                      Join Discussions\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":30384},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CourseCard from \"@/components/course-card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, BookOpen, Clock, Trophy, Users, Star, TrendingUp, Award } from \"lucide-react\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  \n  const { data: featuredCourses = [], isLoading: coursesLoading } = useQuery({\n    queryKey: ['/api/courses/featured'],\n  });\n\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['/api/enrollments'],\n  });\n\n  const { data: progressOverview } = useQuery({\n    queryKey: ['/api/progress/overview'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary via-primary/90 to-primary/70 text-primary-foreground\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`,\n          }}></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center space-y-8 animate-in fade-in duration-1000\">\n            <div className=\"space-y-4\">\n              <Badge className=\"bg-white/20 text-white border-white/30 backdrop-blur text-sm px-4 py-2\">\n                <Award className=\"w-4 h-4 mr-2\" />\n                Professional ADR Certification\n              </Badge>\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight\">\n                Welcome back,<br />\n                <span className=\"text-yellow-300\">{user?.firstName || 'Student'}</span>!\n              </h1>\n              <p className=\"text-xl lg:text-2xl text-primary-foreground/90 max-w-3xl mx-auto leading-relaxed\">\n                Continue your journey to becoming a certified Alternative Dispute Resolution professional\n              </p>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/dashboard\">\n                <Button size=\"lg\" className=\"bg-white text-primary hover:bg-white/90 transform hover:scale-105 transition-all duration-200\">\n                  <BookOpen className=\"w-5 h-5 mr-2\" />\n                  Continue Learning\n                  <ArrowRight className=\"w-5 h-5 ml-2\" />\n                </Button>\n              </Link>\n              <Link href=\"/courses\">\n                <Button size=\"lg\" variant=\"outline\" className=\"border-white/30 text-white hover:bg-white/10 backdrop-blur\">\n                  Explore Courses\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          {progressOverview && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-16\">\n              <Card className=\"bg-white/10 backdrop-blur border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"stat-enrolled-courses\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <BookOpen className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-yellow-300 mb-2\">\n                    {progressOverview.totalCourses || '0'}\n                  </div>\n                  <div className=\"text-primary-foreground/80 text-sm\">Enrolled Courses</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"stat-completed-courses\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Trophy className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-yellow-300 mb-2\">\n                    {progressOverview.completedCourses || '0'}\n                  </div>\n                  <div className=\"text-primary-foreground/80 text-sm\">Completed Courses</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:-translate-y-1\" data-testid=\"stat-study-hours\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Clock className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-yellow-300 mb-2\">\n                    {progressOverview.totalHours || '0'}\n                  </div>\n                  <div className=\"text-primary-foreground/80 text-sm\">Study Hours</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:-translate-y-1\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <TrendingUp className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-yellow-300 mb-2\">\n                    {progressOverview?.averageProgress || '0'}%\n                  </div>\n                  <div className=\"text-primary-foreground/80 text-sm\">Avg. Progress</div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Continue Learning */}\n      {!enrollmentsLoading && enrollments.length > 0 && (\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Continue Learning</h2>\n              <Link href=\"/dashboard\">\n                <Button variant=\"outline\" data-testid=\"button-view-all-courses\">\n                  View All Courses\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {enrollments.slice(0, 3).map((enrollment) => (\n                <Card key={enrollment.id} className=\"group hover:shadow-lg transition-shadow\" data-testid={`card-enrollment-${enrollment.course.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <img \n                        src={enrollment.course.thumbnailUrl || `https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250`}\n                        alt={enrollment.course.title}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                      />\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-foreground mb-1\">{enrollment.course.title}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          By {enrollment.course.instructor?.firstName} {enrollment.course.instructor?.lastName}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n                        <span>Progress</span>\n                        <span>{enrollment.progress}%</span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                          style={{ width: `${enrollment.progress}%` }}\n                        />\n                      </div>\n                    </div>\n\n                    <Button \n                      data-testid={`button-continue-${enrollment.course.id}`}\n                      className=\"w-full\" \n                      onClick={() => window.location.href = `/learn/${enrollment.course.id}/1`}\n                    >\n                      Continue Learning\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Featured Courses */}\n      <section className=\"py-16 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Featured Programs</h2>\n              <p className=\"text-muted-foreground\">Expand your expertise with our premium offerings</p>\n            </div>\n            <Link href=\"/courses\">\n              <Button variant=\"outline\" data-testid=\"button-browse-courses\">\n                Browse All Courses\n              </Button>\n            </Link>\n          </div>\n\n          {coursesLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-course-${i}`}>\n                  <div className=\"w-full h-48 bg-muted\"></div>\n                  <CardContent className=\"p-6 space-y-4\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    <div className=\"h-10 bg-muted rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {featuredCourses.map((course) => (\n                <CourseCard key={course.id} course={course} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-16 bg-gradient-to-r from-accent to-yellow-600 text-accent-foreground\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Advance Your Career?</h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join thousands of professionals who have elevated their careers with CIMA's internationally recognized programs.\n          </p>\n          <div className=\"space-x-4\">\n            <Link href=\"/programs\">\n              <Button \n                data-testid=\"button-explore-programs\"\n                size=\"lg\" \n                className=\"bg-white text-primary hover:bg-gray-100\"\n              >\n                Explore Programs\n              </Button>\n            </Link>\n            <Link href=\"/community\">\n              <Button \n                data-testid=\"button-join-community\"\n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-white text-white hover:bg-white hover:text-accent\"\n              >\n                Join Community\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12248},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport WorldMap from \"@/components/world-map\";\n\nexport default function Landing() {\n  const { t } = useLanguage();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary to-blue-900 text-primary-foreground\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight\">\n                  {t('landing.heroTitle')}{\" \"}\n                  <span className=\"text-white\">{t('landing.heroHighlight')}</span>\n                </h1>\n                <p className=\"text-xl text-blue-100 leading-relaxed\">\n                  {t('landing.heroSubtitle')}\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  data-testid=\"button-explore-programs\"\n                  onClick={() => window.location.href = '/api/login'}\n                  className=\"bg-amber-500 text-white px-8 py-4 rounded-lg font-semibold hover:bg-amber-600 transition-colors shadow-lg\"\n                >\n                  {t('landing.getStarted')}\n                </Button>\n                <Button \n                  data-testid=\"button-watch-overview\"\n                  variant=\"outline\"\n                  className=\"border-2 border-white/30 bg-white/10 text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-900 transition-colors backdrop-blur-sm\"\n                >\n                  <i className=\"fas fa-play mr-2\"></i>\n                  {t('landing.watchOverview')}\n                </Button>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-3 gap-8 pt-8 border-t border-blue-400\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-members\">5,000+</div>\n                  <div className=\"text-sm text-blue-200\">{t('landing.globalMembers')}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-success\">95%</div>\n                  <div className=\"text-sm text-blue-200\">{t('landing.successRate')}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-countries\">50+</div>\n                  <div className=\"text-sm text-blue-200\">{t('landing.countries')}</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Professional arbitration meeting\" \n                className=\"rounded-xl shadow-2xl\"\n                data-testid=\"img-hero\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-tr from-primary/20 to-transparent rounded-xl\"></div>\n              \n              {/* Floating Achievement Card */}\n              <Card className=\"absolute -bottom-6 -left-6 shadow-xl border border-border relative\" data-testid=\"card-achievement\">\n                {/* Ribbon */}\n                <div className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground px-2 py-1 rounded-full text-xs font-bold shadow-lg transform rotate-12\">\n                  <i className=\"fas fa-ribbon mr-1\"></i>\n                  Certified\n                </div>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-certificate text-accent-foreground\"></i>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-foreground\">FCIMArb Qualified</div>\n                      <div className=\"text-sm text-muted-foreground\">International Recognition</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Programs */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">{t('landing.featuredCoursesTitle')}</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Accelerate your career with our internationally recognized qualification programs designed for aspiring ADR professionals.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Global M&A Program */}\n            <Card className=\"shadow-lg border border-border overflow-hidden group hover:shadow-xl transition-shadow\" data-testid=\"card-program-ma\">\n              <img \n                src=\"https://images.unsplash.com/photo-1556761175-b413da4baf72?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                alt=\"M&A arbitration and mediation training\" \n                className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n              />\n              \n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-2\">Global M&A Program</h3>\n                    <p className=\"text-sm text-accent font-medium\">International Arbitration & Mediation</p>\n                  </div>\n                  <div className=\"bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium\">\n                    Featured\n                  </div>\n                </div>\n                \n                <p className=\"text-muted-foreground mb-6\">\n                  An expedited route for career development in international M&A dispute resolution. Master complex cross-border transactions and disputes.\n                </p>\n\n                <div className=\"space-y-4 mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-clock text-primary\"></i>\n                    <span className=\"text-sm text-muted-foreground\">12 weeks intensive</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-globe text-primary\"></i>\n                    <span className=\"text-sm text-muted-foreground\">International faculty</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-certificate text-primary\"></i>\n                    <span className=\"text-sm text-muted-foreground\">Professional certification</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\" data-testid=\"price-ma\">$2,950</div>\n                    <div className=\"text-sm text-muted-foreground\">USD</div>\n                  </div>\n                  <Button \n                    data-testid=\"button-learn-more-ma\"\n                    onClick={() => window.location.href = '/api/login'}\n                    className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg font-medium hover:bg-blue-800 transition-colors\"\n                  >\n                    Learn More\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FCIMArb Fellowship */}\n            <Card className=\"shadow-lg border border-border overflow-hidden group hover:shadow-xl transition-shadow relative\" data-testid=\"card-program-fellowship\">\n              {/* Ribbon Badge */}\n              <div className=\"absolute top-4 right-4 z-10\">\n                <div className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-xs font-bold flex items-center space-x-1 shadow-lg\">\n                  <i className=\"fas fa-ribbon text-xs\"></i>\n                  <span>International Recognition</span>\n                </div>\n              </div>\n              \n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                alt=\"FCIMArb Fellowship professional development\" \n                className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n              />\n              \n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-2\">FCIMArb Fellowship</h3>\n                    <p className=\"text-sm text-accent font-medium\">Professional Qualification</p>\n                  </div>\n                  <div className=\"bg-accent/10 text-accent px-3 py-1 rounded-full text-sm font-medium\">\n                    Premium\n                  </div>\n                </div>\n                \n                <p className=\"text-muted-foreground mb-6\">\n                  Internationally recognized and respected qualification upon program completion. Join an elite community of certified arbitrators and mediators.\n                </p>\n\n                <div className=\"space-y-4 mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-award text-accent\"></i>\n                    <span className=\"text-sm text-muted-foreground\">Fellow designation</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-users text-accent\"></i>\n                    <span className=\"text-sm text-muted-foreground\">Global network access</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-infinity text-accent\"></i>\n                    <span className=\"text-sm text-muted-foreground\">Lifetime membership</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\" data-testid=\"price-fellowship\">$4,750</div>\n                    <div className=\"text-sm text-muted-foreground\">USD</div>\n                  </div>\n                  <Button \n                    data-testid=\"button-apply-fellowship\"\n                    onClick={() => window.location.href = '/api/login'}\n                    className=\"bg-accent text-accent-foreground px-6 py-3 rounded-lg font-medium hover:bg-yellow-500 transition-colors\"\n                  >\n                    Apply Now\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Global Community */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">Global ADR Community</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Connect with professionals worldwide and access opportunities in major international cities.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <WorldMap />\n\n            <div className=\"space-y-8\">\n              <div>\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">Worldwide Presence</h3>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  Join a distinguished global community with connections to prestigious international organizations in major financial and legal centers.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-london\">\n                    <i className=\"fas fa-map-marker-alt text-accent\"></i>\n                    <span className=\"font-medium text-foreground\">London</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-accra\">\n                    <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                    <span className=\"font-medium text-foreground\">Accra</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-singapore\">\n                    <i className=\"fas fa-map-marker-alt text-secondary\"></i>\n                    <span className=\"font-medium text-foreground\">Singapore</span>\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-dubai\">\n                    <i className=\"fas fa-map-marker-alt text-accent\"></i>\n                    <span className=\"font-medium text-foreground\">Dubai</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-newyork\">\n                    <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                    <span className=\"font-medium text-foreground\">New York</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\" data-testid=\"location-oxford\">\n                    <i className=\"fas fa-map-marker-alt text-secondary\"></i>\n                    <span className=\"font-medium text-foreground\">Oxford</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <Card className=\"p-4 bg-muted/30\" data-testid=\"benefit-network\">\n                  <div className=\"flex items-center space-x-4\">\n                    <i className=\"fas fa-users text-primary text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-foreground\">Professional Network</div>\n                      <div className=\"text-sm text-muted-foreground\">Connect with 5,000+ ADR professionals globally</div>\n                    </div>\n                  </div>\n                </Card>\n                <Card className=\"p-4 bg-muted/30\" data-testid=\"benefit-opportunities\">\n                  <div className=\"flex items-center space-x-4\">\n                    <i className=\"fas fa-briefcase text-accent text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-foreground\">Career Opportunities</div>\n                      <div className=\"text-sm text-muted-foreground\">Access exclusive job postings and referrals</div>\n                    </div>\n                  </div>\n                </Card>\n                <Card className=\"p-4 bg-muted/30\" data-testid=\"benefit-recognition\">\n                  <div className=\"flex items-center space-x-4\">\n                    <i className=\"fas fa-globe text-secondary text-xl\"></i>\n                    <div>\n                      <div className=\"font-medium text-foreground\">International Recognition</div>\n                      <div className=\"text-sm text-muted-foreground\">Credentials recognized worldwide</div>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16345},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport cimaLogo from \"@/assets/cima-logo.png\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted flex items-center justify-center\">\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <div className=\"space-y-8\">\n          {/* Logo */}\n          <div className=\"flex justify-center\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src={cimaLogo} \n                alt=\"CIMA Logo\" \n                className=\"h-16 w-auto\"\n                data-testid=\"logo-404\"\n              />\n              <div>\n                <h2 className=\"text-2xl font-bold text-primary\">CIMA Learn</h2>\n                <p className=\"text-sm text-muted-foreground\">Professional ADR Education</p>\n              </div>\n            </div>\n          </div>\n\n          {/* 404 Error */}\n          <div className=\"space-y-4\">\n            <h1 className=\"text-9xl font-bold text-primary/20\" data-testid=\"error-code\">404</h1>\n            <h2 className=\"text-3xl font-bold text-foreground\">Page Not Found</h2>\n            <p className=\"text-lg text-muted-foreground max-w-md mx-auto\">\n              The page you're looking for doesn't exist or has been moved to a different location.\n            </p>\n          </div>\n\n          {/* Navigation Options */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-md mx-auto\">\n            <Link href=\"/\">\n              <Button \n                className=\"w-full\"\n                data-testid=\"button-home\"\n              >\n                <i className=\"fas fa-home mr-2\"></i>\n                Go Home\n              </Button>\n            </Link>\n            <Link href=\"/courses\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                data-testid=\"button-courses\"\n              >\n                <i className=\"fas fa-book mr-2\"></i>\n                Browse Courses\n              </Button>\n            </Link>\n          </div>\n\n          {/* Help Links */}\n          <div className=\"space-y-4 pt-8 border-t border-border\">\n            <p className=\"text-sm text-muted-foreground\">Still need help?</p>\n            <div className=\"flex justify-center space-x-6\">\n              <Link href=\"/help-center\">\n                <span className=\"text-sm text-primary hover:underline\" data-testid=\"link-help\">\n                  Help Center\n                </span>\n              </Link>\n              <Link href=\"/contact\">\n                <span className=\"text-sm text-primary hover:underline\" data-testid=\"link-contact\">\n                  Contact Support\n                </span>\n              </Link>\n              <Link href=\"/community\">\n                <span className=\"text-sm text-primary hover:underline\" data-testid=\"link-community\">\n                  Community Forum\n                </span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3097},"client/src/pages/programs.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Link } from \"wouter\";\n\nexport default function Programs() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary to-blue-900 text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-6\" data-testid=\"programs-title\">\n            Professional ADR Programs\n          </h1>\n          <p className=\"text-xl text-blue-100 max-w-4xl mx-auto mb-8\">\n            Advance your career with internationally recognized qualifications designed for aspiring and experienced ADR professionals. Join our global community of mediators and arbitrators.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              data-testid=\"button-compare-programs\"\n              className=\"bg-accent text-accent-foreground px-8 py-4 rounded-lg font-semibold hover:bg-yellow-500 transition-colors\"\n            >\n              Compare Programs\n            </Button>\n            <Button \n              data-testid=\"button-speak-advisor\"\n              variant=\"outline\"\n              className=\"border border-blue-300 text-blue-100 px-8 py-4 rounded-lg font-semibold hover:bg-blue-800 transition-colors\"\n            >\n              Speak to an Advisor\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Program Categories */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Tabs defaultValue=\"flagship\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"program-tabs\">\n              <TabsTrigger value=\"flagship\">Flagship Programs</TabsTrigger>\n              <TabsTrigger value=\"specialized\">Specialized Courses</TabsTrigger>\n              <TabsTrigger value=\"certification\">Certification Paths</TabsTrigger>\n            </TabsList>\n\n            {/* Flagship Programs */}\n            <TabsContent value=\"flagship\" className=\"space-y-8\" data-testid=\"tab-flagship\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl font-bold text-foreground mb-4\">Flagship Programs</h2>\n                <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                  Our premier qualifications that provide comprehensive training and internationally recognized credentials.\n                </p>\n              </div>\n\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                {/* Global M&A Program */}\n                <Card className=\"relative overflow-hidden group hover:shadow-xl transition-shadow\" data-testid=\"program-ma\">\n                  <div className=\"absolute top-4 right-4 z-10\">\n                    <Badge className=\"bg-primary text-primary-foreground\">Most Popular</Badge>\n                  </div>\n                  <img \n                    src=\"https://images.unsplash.com/photo-1556761175-b413da4baf72?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                    alt=\"Global M&A Program\" \n                    className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <CardContent className=\"p-8\">\n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-foreground mb-2\">Global M&A Program</h3>\n                        <p className=\"text-lg text-accent font-medium mb-4\">International Arbitration & Mediation</p>\n                        <p className=\"text-muted-foreground\">\n                          An expedited route for career development in international M&A dispute resolution. Master complex cross-border transactions, regulatory frameworks, and dispute resolution mechanisms used in global mergers and acquisitions.\n                        </p>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-6\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-clock text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">12 weeks intensive</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-globe text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">International faculty</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-users text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Live case studies</span>\n                          </div>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-certificate text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Professional certification</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-network-wired text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Alumni network</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-briefcase text-primary\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Career placement</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-muted/30 rounded-lg p-4\">\n                        <h4 className=\"font-semibold text-foreground mb-2\">Program Highlights</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          <li>• Cross-border transaction structuring</li>\n                          <li>• Regulatory compliance frameworks</li>\n                          <li>• Due diligence and risk assessment</li>\n                          <li>• Dispute prevention strategies</li>\n                          <li>• International arbitration procedures</li>\n                        </ul>\n                      </div>\n\n                      <div className=\"flex items-center justify-between pt-4 border-t\">\n                        <div>\n                          <div className=\"text-3xl font-bold text-foreground\" data-testid=\"ma-price\">$2,950</div>\n                          <div className=\"text-sm text-muted-foreground\">USD • Payment plans available</div>\n                        </div>\n                        <Link href=\"/courses\">\n                          <Button \n                            data-testid=\"button-enroll-ma\"\n                            className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg font-medium hover:bg-blue-800 transition-colors\"\n                          >\n                            Learn More\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* FCIMArb Fellowship */}\n                <Card className=\"relative overflow-hidden group hover:shadow-xl transition-shadow\" data-testid=\"program-fellowship\">\n                  <div className=\"absolute top-4 right-4 z-10\">\n                    <Badge className=\"bg-accent text-accent-foreground\">Premium</Badge>\n                  </div>\n                  <img \n                    src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                    alt=\"FCIMArb Fellowship\" \n                    className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <CardContent className=\"p-8\">\n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-foreground mb-2\">FCIMArb Fellowship</h3>\n                        <p className=\"text-lg text-accent font-medium mb-4\">Fellow of the Center for International Mediators and Arbitrators</p>\n                        <p className=\"text-muted-foreground\">\n                          Our most prestigious qualification. Internationally recognized and respected designation upon program completion. Join an elite community of certified arbitrators and mediators with global practice opportunities.\n                        </p>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-6\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-award text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Fellow designation</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-users text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Global network access</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-gavel text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Tribunal appointments</span>\n                          </div>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-infinity text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Lifetime membership</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-handshake text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Referral network</span>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <i className=\"fas fa-graduation-cap text-accent\"></i>\n                            <span className=\"text-sm text-muted-foreground\">Continuing education</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-accent/10 rounded-lg p-4 border border-accent/20\">\n                        <h4 className=\"font-semibold text-foreground mb-2\">Fellowship Benefits</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          <li>• Use of FCIMArb post-nominal letters</li>\n                          <li>• Priority placement on arbitrator panels</li>\n                          <li>• Exclusive networking events</li>\n                          <li>• Advanced practice opportunities</li>\n                          <li>• Mentorship programs</li>\n                        </ul>\n                      </div>\n\n                      <div className=\"flex items-center justify-between pt-4 border-t\">\n                        <div>\n                          <div className=\"text-3xl font-bold text-foreground\" data-testid=\"fellowship-price\">$4,750</div>\n                          <div className=\"text-sm text-muted-foreground\">USD • Includes all materials</div>\n                        </div>\n                        <Link href=\"/courses\">\n                          <Button \n                            data-testid=\"button-apply-fellowship\"\n                            className=\"bg-accent text-accent-foreground px-6 py-3 rounded-lg font-medium hover:bg-yellow-500 transition-colors\"\n                          >\n                            Apply Now\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Specialized Courses */}\n            <TabsContent value=\"specialized\" className=\"space-y-8\" data-testid=\"tab-specialized\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl font-bold text-foreground mb-4\">Specialized Courses</h2>\n                <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                  Focus on specific areas of ADR practice with our targeted training programs.\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {/* Mediation Fundamentals */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"course-mediation\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Badge className=\"bg-secondary/10 text-secondary\">Beginner</Badge>\n                      <div className=\"flex items-center space-x-1 text-sm\">\n                        <i className=\"fas fa-star text-accent\"></i>\n                        <span className=\"text-muted-foreground\">4.8 (156)</span>\n                      </div>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Fundamentals of Mediation</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Master the core principles and techniques of effective mediation practice.\n                    </p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span><i className=\"fas fa-clock mr-1\"></i>8 hours</span>\n                        <span><i className=\"fas fa-video mr-1\"></i>12 lessons</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xl font-bold text-foreground\">$450</div>\n                      <Button size=\"sm\">Enroll Now</Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* International Arbitration */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"course-arbitration\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Badge className=\"bg-accent/10 text-accent\">Advanced</Badge>\n                      <div className=\"flex items-center space-x-1 text-sm\">\n                        <i className=\"fas fa-star text-accent\"></i>\n                        <span className=\"text-muted-foreground\">4.9 (89)</span>\n                      </div>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">International Arbitration</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Advanced strategies for complex cross-border commercial disputes.\n                    </p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span><i className=\"fas fa-clock mr-1\"></i>16 hours</span>\n                        <span><i className=\"fas fa-video mr-1\"></i>24 lessons</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xl font-bold text-foreground\">$850</div>\n                      <Button size=\"sm\">Enroll Now</Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* ADR Ethics */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"course-ethics\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Badge className=\"bg-green-100 text-green-700\">Intermediate</Badge>\n                      <div className=\"flex items-center space-x-1 text-sm\">\n                        <i className=\"fas fa-star text-accent\"></i>\n                        <span className=\"text-muted-foreground\">4.7 (124)</span>\n                      </div>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">ADR Ethics & Standards</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Professional conduct and ethical considerations in dispute resolution.\n                    </p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span><i className=\"fas fa-clock mr-1\"></i>6 hours</span>\n                        <span><i className=\"fas fa-video mr-1\"></i>10 lessons</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xl font-bold text-foreground\">$350</div>\n                      <Button size=\"sm\">Enroll Now</Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"text-center\">\n                <Link href=\"/courses\">\n                  <Button variant=\"outline\" size=\"lg\" data-testid=\"view-all-courses\">\n                    View All Courses\n                    <i className=\"fas fa-arrow-right ml-2\"></i>\n                  </Button>\n                </Link>\n              </div>\n            </TabsContent>\n\n            {/* Certification Paths */}\n            <TabsContent value=\"certification\" className=\"space-y-8\" data-testid=\"tab-certification\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl font-bold text-foreground mb-4\">Certification Paths</h2>\n                <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                  Choose your path to professional certification based on your career goals and experience level.\n                </p>\n              </div>\n\n              <div className=\"grid lg:grid-cols-3 gap-8\">\n                {/* Foundation Path */}\n                <Card className=\"border-2 border-secondary/20 hover:border-secondary transition-colors\" data-testid=\"path-foundation\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                      <i className=\"fas fa-play text-secondary text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-4\">Foundation Path</h3>\n                    <p className=\"text-muted-foreground mb-6\">Perfect for newcomers to ADR practice</p>\n                    \n                    <div className=\"space-y-3 mb-8\">\n                      <div className=\"text-sm text-left space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Fundamentals of Mediation</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Introduction to Arbitration</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>ADR Ethics & Standards</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-2xl font-bold text-foreground mb-2\">$1,200</div>\n                    <div className=\"text-sm text-muted-foreground mb-6\">Complete package</div>\n                    <Button className=\"w-full\">Start Foundation</Button>\n                  </CardContent>\n                </Card>\n\n                {/* Professional Path */}\n                <Card className=\"border-2 border-primary/50 hover:border-primary transition-colors relative\" data-testid=\"path-professional\">\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground\">Recommended</Badge>\n                  </div>\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                      <i className=\"fas fa-star text-primary text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-4\">Professional Path</h3>\n                    <p className=\"text-muted-foreground mb-6\">For practicing professionals seeking advancement</p>\n                    \n                    <div className=\"space-y-3 mb-8\">\n                      <div className=\"text-sm text-left space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Global M&A Program</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>International Arbitration</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Advanced Case Management</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Professional Certification</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-2xl font-bold text-foreground mb-2\">$3,500</div>\n                    <div className=\"text-sm text-muted-foreground mb-6\">Save $450 vs individual</div>\n                    <Button className=\"w-full bg-primary\">Start Professional</Button>\n                  </CardContent>\n                </Card>\n\n                {/* Fellowship Path */}\n                <Card className=\"border-2 border-accent/20 hover:border-accent transition-colors\" data-testid=\"path-fellowship\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                      <i className=\"fas fa-crown text-accent text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-4\">Fellowship Path</h3>\n                    <p className=\"text-muted-foreground mb-6\">Elite certification for senior practitioners</p>\n                    \n                    <div className=\"space-y-3 mb-8\">\n                      <div className=\"text-sm text-left space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>FCIMArb Fellowship</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Advanced Practice Methods</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Global Network Access</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <i className=\"fas fa-check text-green-600\"></i>\n                          <span>Lifetime Membership</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-2xl font-bold text-foreground mb-2\">$4,750</div>\n                    <div className=\"text-sm text-muted-foreground mb-6\">Premium qualification</div>\n                    <Button className=\"w-full bg-accent text-accent-foreground\">Apply for Fellowship</Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-20 bg-gradient-to-r from-accent to-yellow-600 text-accent-foreground\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Start Your ADR Journey?</h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join thousands of professionals who have advanced their careers with CIMA's internationally recognized programs.\n          </p>\n          <div className=\"space-x-4\">\n            <Button \n              data-testid=\"button-get-started\"\n              size=\"lg\" \n              className=\"bg-primary text-primary-foreground hover:bg-blue-800\"\n            >\n              Get Started Today\n            </Button>\n            <Button \n              data-testid=\"button-schedule-consultation\"\n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-white text-white hover:bg-white hover:text-accent\"\n            >\n              Schedule Consultation\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":27052},"client/src/pages/video-player.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\n\nexport default function VideoPlayer() {\n  const { courseId, lessonId } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [note, setNote] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: [`/api/courses/${courseId}`],\n    enabled: !!courseId && isAuthenticated,\n  });\n\n  const { data: enrollment } = useQuery({\n    queryKey: [`/api/enrollments/check/${courseId}`],\n    enabled: !!courseId && isAuthenticated,\n  });\n\n  const { data: progress = [] } = useQuery({\n    queryKey: [`/api/progress/${courseId}`],\n    enabled: !!courseId && isAuthenticated,\n  });\n\n  // Update progress mutation\n  const updateProgressMutation = useMutation({\n    mutationFn: async ({ lessonId, watchTime, completed }: { lessonId: string; watchTime: number; completed: boolean }) => {\n      const response = await apiRequest(\"POST\", \"/api/progress\", {\n        lessonId,\n        watchTime,\n        completed\n      });\n      return response.json();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  // Find current lesson and module\n  const currentLesson = course?.modules?.reduce((found: any, module: any) => {\n    if (found) return found;\n    return module.lessons?.find((lesson: any) => lesson.id === lessonId);\n  }, null);\n\n  const currentModule = course?.modules?.find((module: any) => \n    module.lessons?.some((lesson: any) => lesson.id === lessonId)\n  );\n\n  // Get all lessons in order\n  const allLessons = course?.modules?.reduce((acc: any[], module: any) => {\n    return [...acc, ...(module.lessons || [])];\n  }, []) || [];\n\n  const currentLessonIndex = allLessons.findIndex((lesson: any) => lesson.id === lessonId);\n  const nextLesson = allLessons[currentLessonIndex + 1];\n  const prevLesson = allLessons[currentLessonIndex - 1];\n\n  // Video event handlers\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n      \n      // Update progress every 10 seconds\n      if (Math.floor(video.currentTime) % 10 === 0 && currentLesson) {\n        const watchTimeSeconds = Math.floor(video.currentTime);\n        const completed = video.currentTime >= video.duration * 0.9; // 90% completion\n        \n        updateProgressMutation.mutate({\n          lessonId: currentLesson.id,\n          watchTime: watchTimeSeconds,\n          completed\n        });\n      }\n    };\n\n    const handleLoadedMetadata = () => {\n      setDuration(video.duration);\n      \n      // Resume from last watched position\n      const lessonProgress = progress.find((p: any) => p.lesson.id === lessonId);\n      if (lessonProgress && lessonProgress.watchTime > 0) {\n        video.currentTime = lessonProgress.watchTime;\n      }\n    };\n\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('play', handlePlay);\n    video.addEventListener('pause', handlePause);\n\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('play', handlePlay);\n      video.removeEventListener('pause', handlePause);\n    };\n  }, [currentLesson, progress, lessonId]);\n\n  const togglePlayPause = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isPlaying) {\n      video.pause();\n    } else {\n      video.play();\n    }\n  };\n\n  const handleSeek = (percentage: number) => {\n    const video = videoRef.current;\n    if (!video || !duration) return;\n\n    const newTime = (percentage / 100) * duration;\n    video.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"animate-pulse p-8\">\n          <div className=\"h-64 bg-muted rounded mb-4\"></div>\n          <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (courseLoading || !course) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"animate-pulse p-8\">\n          <div className=\"h-64 bg-muted rounded mb-4\"></div>\n          <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!enrollment?.isEnrolled) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16 text-center\" data-testid=\"not-enrolled\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Access Denied</h1>\n          <p className=\"text-muted-foreground mb-8\">You need to be enrolled in this course to access the content.</p>\n          <Link href={`/course/${courseId}`}>\n            <Button data-testid=\"enroll-button\">Enroll in Course</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentLesson) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16 text-center\" data-testid=\"lesson-not-found\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Lesson Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The lesson you're looking for doesn't exist.</p>\n          <Link href={`/course/${courseId}`}>\n            <Button data-testid=\"back-to-course\">Back to Course</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Video Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Video Player */}\n            <Card className=\"overflow-hidden\" data-testid=\"video-player\">\n              <div className=\"relative bg-black aspect-video\">\n                {currentLesson.videoUrl ? (\n                  <video\n                    ref={videoRef}\n                    className=\"w-full h-full\"\n                    poster={currentLesson.thumbnailUrl}\n                    controls\n                    data-testid=\"video-element\"\n                  >\n                    <source src={currentLesson.videoUrl} type=\"video/mp4\" />\n                    Your browser does not support the video tag.\n                  </video>\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center text-white\">\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-play-circle text-6xl mb-4 opacity-50\"></i>\n                      <p>Video content coming soon</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* Lesson Info */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\" data-testid=\"module-badge\">\n                      {currentModule?.title}\n                    </Badge>\n                    <Badge \n                      data-testid=\"lesson-type\"\n                      className={currentLesson.contentType === 'video' ? 'bg-primary' : 'bg-secondary'}\n                    >\n                      {currentLesson.contentType}\n                    </Badge>\n                  </div>\n                  <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"lesson-title\">\n                    {currentLesson.title}\n                  </h1>\n                  {currentLesson.description && (\n                    <p className=\"text-muted-foreground\" data-testid=\"lesson-description\">\n                      {currentLesson.description}\n                    </p>\n                  )}\n                </div>\n                <div className=\"text-right\">\n                  {currentLesson.duration && (\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"lesson-duration\">\n                      {formatTime(currentLesson.duration)}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Progress Bar */}\n              {duration > 0 && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm text-muted-foreground\">\n                    <span>Progress</span>\n                    <span data-testid=\"video-progress\">\n                      {formatTime(currentTime)} / {formatTime(duration)}\n                    </span>\n                  </div>\n                  <Progress \n                    value={(currentTime / duration) * 100} \n                    className=\"h-2\"\n                    data-testid=\"progress-bar\"\n                  />\n                </div>\n              )}\n\n              {/* Navigation */}\n              <div className=\"flex items-center justify-between pt-4 border-t\">\n                <div>\n                  {prevLesson && (\n                    <Link href={`/learn/${courseId}/${prevLesson.id}`}>\n                      <Button variant=\"outline\" data-testid=\"prev-lesson\">\n                        <i className=\"fas fa-chevron-left mr-2\"></i>\n                        Previous\n                      </Button>\n                    </Link>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Link href={`/course/${courseId}`}>\n                    <Button variant=\"outline\" data-testid=\"back-to-course\">\n                      <i className=\"fas fa-book mr-2\"></i>\n                      Course Overview\n                    </Button>\n                  </Link>\n                  {nextLesson ? (\n                    <Link href={`/learn/${courseId}/${nextLesson.id}`}>\n                      <Button data-testid=\"next-lesson\">\n                        Next\n                        <i className=\"fas fa-chevron-right ml-2\"></i>\n                      </Button>\n                    </Link>\n                  ) : (\n                    <Button disabled data-testid=\"course-complete\">\n                      <i className=\"fas fa-check mr-2\"></i>\n                      Course Complete\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Lesson Content Tabs */}\n            <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"lesson-tabs\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n                <TabsTrigger value=\"resources\">Resources</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" data-testid=\"tab-overview\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Lesson Overview</h3>\n                    <div className=\"prose prose-slate max-w-none\">\n                      {currentLesson.content ? (\n                        <div dangerouslySetInnerHTML={{ __html: currentLesson.content }} />\n                      ) : (\n                        <p className=\"text-muted-foreground\">\n                          This lesson covers essential concepts in {currentModule?.title?.toLowerCase()}. \n                          Follow along with the video content and take notes for future reference.\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"notes\" data-testid=\"tab-notes\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Personal Notes</h3>\n                    <Textarea\n                      placeholder=\"Take notes while watching the lesson...\"\n                      value={note}\n                      onChange={(e) => setNote(e.target.value)}\n                      className=\"min-h-[200px] mb-4\"\n                      data-testid=\"notes-textarea\"\n                    />\n                    <Button data-testid=\"save-notes\">\n                      <i className=\"fas fa-save mr-2\"></i>\n                      Save Notes\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"resources\" data-testid=\"tab-resources\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Additional Resources</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <i className=\"fas fa-file-pdf text-red-600\"></i>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground\">Lesson Transcript</div>\n                          <div className=\"text-sm text-muted-foreground\">PDF • 2 pages</div>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\" data-testid=\"download-transcript\">\n                          <i className=\"fas fa-download\"></i>\n                        </Button>\n                      </div>\n                      <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <i className=\"fas fa-file-powerpoint text-orange-600\"></i>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground\">Presentation Slides</div>\n                          <div className=\"text-sm text-muted-foreground\">PPTX • 15 slides</div>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\" data-testid=\"download-slides\">\n                          <i className=\"fas fa-download\"></i>\n                        </Button>\n                      </div>\n                      <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <i className=\"fas fa-external-link-alt text-blue-600\"></i>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground\">External Reading</div>\n                          <div className=\"text-sm text-muted-foreground\">Related articles and resources</div>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\" data-testid=\"external-resources\">\n                          <i className=\"fas fa-external-link-alt\"></i>\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Sidebar - Course Navigation */}\n          <div className=\"space-y-6\">\n            {/* Course Progress */}\n            <Card data-testid=\"course-progress\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Course Progress</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Overall Progress</span>\n                    <span className=\"font-medium\">\n                      {progress.filter((p: any) => p.completed).length} / {allLessons.length}\n                    </span>\n                  </div>\n                  <Progress \n                    value={(progress.filter((p: any) => p.completed).length / allLessons.length) * 100} \n                    className=\"h-2\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Course Modules */}\n            <Card data-testid=\"course-modules\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Course Content</h3>\n                <div className=\"space-y-4\">\n                  {course.modules?.map((module: any, moduleIndex: number) => (\n                    <div key={module.id} className=\"space-y-2\">\n                      <h4 className=\"font-medium text-foreground text-sm\">\n                        Module {moduleIndex + 1}: {module.title}\n                      </h4>\n                      <div className=\"space-y-1\">\n                        {module.lessons?.map((lesson: any, lessonIndex: number) => {\n                          const lessonProgress = progress.find((p: any) => p.lesson.id === lesson.id);\n                          const isCurrentLesson = lesson.id === lessonId;\n                          const isCompleted = lessonProgress?.completed || false;\n                          \n                          return (\n                            <Link \n                              key={lesson.id} \n                              href={`/learn/${courseId}/${lesson.id}`}\n                            >\n                              <div \n                                className={`flex items-center space-x-3 p-2 rounded-lg text-sm transition-colors cursor-pointer ${\n                                  isCurrentLesson \n                                    ? 'bg-primary text-primary-foreground' \n                                    : 'hover:bg-muted/50'\n                                }`}\n                                data-testid={`lesson-nav-${lesson.id}`}\n                              >\n                                <div className=\"flex-shrink-0\">\n                                  {isCompleted ? (\n                                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                                  ) : (\n                                    <i className={`fas ${lesson.contentType === 'video' ? 'fa-play-circle' : 'fa-file-text'} ${\n                                      isCurrentLesson ? 'text-primary-foreground' : 'text-muted-foreground'\n                                    }`}></i>\n                                  )}\n                                </div>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className={`font-medium truncate ${\n                                    isCurrentLesson ? 'text-primary-foreground' : 'text-foreground'\n                                  }`}>\n                                    {lesson.title}\n                                  </div>\n                                  {lesson.duration && (\n                                    <div className={`text-xs ${\n                                      isCurrentLesson ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                                    }`}>\n                                      {formatTime(lesson.duration)}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </Link>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21830},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# CIMA Learn - Professional ADR Education Platform\n\nA comprehensive Learning Management System (LMS) for the Center for International Mediators and Arbitrators (CIMA), providing world-class Alternative Dispute Resolution (ADR) training and certification programs.\n\n## 🎯 Overview\n\nCIMA Learn is a modern, full-stack web application designed to deliver professional ADR education to mediators, arbitrators, and legal professionals worldwide. The platform combines cutting-edge technology with educational excellence to provide an unparalleled learning experience.\n\n## ✨ Key Features\n\n### 🎓 **Learning Management**\n- **Comprehensive Course Catalog**: Browse courses with advanced search, filtering, and sorting\n- **Structured Learning Paths**: Courses organized into modules and lessons with clear progression\n- **Progress Tracking**: Real-time progress monitoring with visual indicators and completion percentages\n- **Interactive Dashboard**: Personalized learning dashboard with enrollment overview and achievements\n- **Favorites System**: Save and organize preferred courses for quick access\n\n### 👥 **User Experience**\n- **Modern UI/UX**: Professional design with smooth animations and responsive layouts\n- **Authentication**: Secure login via Replit OpenID Connect integration\n- **User Profiles**: Comprehensive user management with profile customization\n- **Mobile Responsive**: Optimized experience across all devices\n\n### 💳 **Payment & Enrollment**\n- **Paystack Integration**: Secure payment processing for course purchases\n- **Flexible Pricing**: Support for both free and paid courses\n- **Automated Enrollment**: Seamless course access after successful payment\n- **Order Management**: Complete order tracking and history\n\n### 🏆 **Certification & Achievement**\n- **Digital Certificates**: Internationally recognized ADR certifications\n- **Achievement Tracking**: Monitor learning milestones and accomplishments\n- **Progress Analytics**: Detailed insights into learning patterns and success rates\n\n### 💬 **Community Features**\n- **Discussion Forums**: Course-specific Q&A and community interactions\n- **Peer Learning**: Connect with fellow ADR professionals globally\n- **Expert Interaction**: Direct access to instructors and industry experts\n\n## 🛠 Technology Stack\n\n### **Frontend**\n- **React 18** with TypeScript for type-safe, modern web development\n- **Wouter** for lightweight, declarative routing\n- **TanStack Query** for powerful server state management\n- **shadcn/ui** component library built on Radix UI primitives\n- **Tailwind CSS** for utility-first styling and responsive design\n- **Vite** for fast development and optimized production builds\n\n### **Backend**\n- **Express.js** with TypeScript for robust server-side development\n- **Drizzle ORM** for type-safe database operations and migrations\n- **PostgreSQL** via Neon serverless for scalable data storage\n- **Passport.js** with OpenID Connect for secure authentication\n- **RESTful API** design with comprehensive error handling\n\n### **Payment Processing**\n- **Paystack** integration for secure payment processing\n- **Webhook handling** for automated enrollment and order management\n- **Multiple currency support** for global accessibility\n\n### **Development Tools**\n- **TypeScript** for full-stack type safety\n- **ESLint & Prettier** for code quality and consistency\n- **Hot Module Replacement** for rapid development iteration\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ and npm\n- PostgreSQL database (Neon recommended)\n- Paystack account for payment processing\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone [repository-url]\n   cd cima-learn\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Environment Setup**\n   Create a `.env` file with the following variables:\n   ```env\n   DATABASE_URL=your_postgresql_connection_string\n   SESSION_SECRET=your_session_secret\n   PAYSTACK_SECRET_KEY=your_paystack_secret_key\n   VITE_PAYSTACK_PUBLIC_KEY=your_paystack_public_key\n   ```\n\n4. **Database Setup**\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start Development Server**\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at `http://localhost:5000`\n\n## 📁 Project Structure\n\n```\ncima-learn/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Application pages/routes\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── lib/           # Utility functions and configs\n├── server/                # Backend Express application\n│   ├── routes.ts          # API route definitions\n│   ├── storage.ts         # Database operations\n│   └── replitAuth.ts      # Authentication configuration\n├── shared/                # Shared types and schemas\n│   └── schema.ts          # Database schema and types\n└── migrations/            # Database migration files\n```\n\n## 🎨 Design System\n\n### **Color Palette**\n- **Primary**: Professional blue gradient for trust and reliability\n- **Accent**: Amber/orange for call-to-action buttons and highlights\n- **Text**: White and blue variations for optimal contrast\n- **Backgrounds**: Gradient blues with transparency effects\n\n### **Typography**\n- Clean, professional fonts optimized for readability\n- Hierarchical heading structure for clear information architecture\n- Responsive text sizing across all devices\n\n### **Components**\n- Consistent component library with shadcn/ui\n- Accessible design patterns following WCAG guidelines\n- Smooth animations and transitions for enhanced user experience\n\n## 🌐 Deployment\n\n### **Production Environment**\n- Optimized builds with Vite for maximum performance\n- PostgreSQL database with connection pooling\n- CDN integration for static asset delivery\n- Environment-specific configurations\n\n### **Monitoring & Analytics**\n- Error tracking and performance monitoring\n- User analytics and learning pattern insights\n- System health monitoring and alerts\n\n## 📊 Features Roadmap\n\n### **Current Version (v1.0)**\n- ✅ Core LMS functionality\n- ✅ User authentication and profiles\n- ✅ Course catalog with search and filtering\n- ✅ Payment processing integration\n- ✅ Progress tracking and dashboard\n- ✅ Favorites system\n- ✅ Responsive design\n\n### **Upcoming Features**\n- 🔄 Advanced video streaming integration\n- 🔄 Mobile application (React Native)\n- 🔄 Offline course access\n- 🔄 Advanced analytics dashboard\n- 🔄 Multi-language support\n- 🔄 AI-powered course recommendations\n\n## 🤝 Contributing\n\nWe welcome contributions to improve CIMA Learn! Please follow these guidelines:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### **Development Guidelines**\n- Follow TypeScript best practices\n- Write comprehensive tests for new features\n- Ensure responsive design compatibility\n- Follow the established code style and conventions\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🆘 Support\n\nFor technical support or questions about CIMA Learn:\n\n- **Documentation**: Comprehensive guides available in `/docs`\n- **Issues**: Report bugs or request features via GitHub Issues\n- **Community**: Join our developer community discussions\n\n## 🏢 About CIMA\n\nThe Center for International Mediators and Arbitrators is a leading institution in alternative dispute resolution education, providing world-class training and certification programs for legal professionals worldwide.\n\n---\n\n**Built with ❤️ for the global ADR community**\n\n*Last updated: January 2025*","size_bytes":7891},"client/src/components/language-switcher.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { SUPPORTED_LANGUAGES } from '@/lib/i18n';\nimport { Globe } from 'lucide-react';\n\nexport function LanguageSwitcher() {\n  const { language, setLanguage, currentLanguageInfo } = useLanguage();\n  const [open, setOpen] = useState(false);\n\n  const handleLanguageChange = (newLanguage: typeof language) => {\n    setLanguage(newLanguage);\n    setOpen(false);\n  };\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"gap-2 text-muted-foreground hover:text-foreground\"\n          data-testid=\"language-switcher-trigger\"\n        >\n          <Globe className=\"h-4 w-4\" />\n          <span className=\"text-lg\">{currentLanguageInfo.flag}</span>\n          <span className=\"hidden sm:inline\">{currentLanguageInfo.nativeName}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {SUPPORTED_LANGUAGES.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => handleLanguageChange(lang.code)}\n            className={`cursor-pointer ${\n              language === lang.code ? 'bg-accent' : ''\n            }`}\n            data-testid={`language-option-${lang.code}`}\n          >\n            <div className=\"flex items-center gap-3 w-full\">\n              <span className=\"text-lg\">{lang.flag}</span>\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium\">{lang.name}</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {lang.nativeName}\n                </span>\n              </div>\n              {language === lang.code && (\n                <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />\n              )}\n            </div>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2207},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { Language, getInitialLanguage, saveLanguagePreference, getLanguageInfo } from '@/lib/i18n';\nimport { translations, TranslationKeys, getTranslation } from '@/translations';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: string) => string;\n  currentLanguageInfo: ReturnType<typeof getLanguageInfo>;\n  isRTL: boolean;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguageState] = useState<Language>(getInitialLanguage);\n\n  const setLanguage = (newLanguage: Language) => {\n    setLanguageState(newLanguage);\n    saveLanguagePreference(newLanguage);\n    \n    // Update document direction for RTL languages\n    const languageInfo = getLanguageInfo(newLanguage);\n    document.documentElement.dir = languageInfo.rtl ? 'rtl' : 'ltr';\n    document.documentElement.lang = newLanguage;\n  };\n\n  const t = (key: string): string => {\n    const currentTranslations = translations[language] as TranslationKeys;\n    return getTranslation(currentTranslations, key);\n  };\n\n  const currentLanguageInfo = getLanguageInfo(language);\n  const isRTL = currentLanguageInfo.rtl || false;\n\n  // Set initial document direction and language\n  useEffect(() => {\n    document.documentElement.dir = isRTL ? 'rtl' : 'ltr';\n    document.documentElement.lang = language;\n  }, [language, isRTL]);\n\n  const value: LanguageContextType = {\n    language,\n    setLanguage,\n    t,\n    currentLanguageInfo,\n    isRTL\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":2071},"client/src/hooks/useRoleProtection.ts":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"./useAuth\";\nimport { useToast } from \"./use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface UseRoleProtectionOptions {\n  requiredRole?: 'student' | 'instructor' | 'admin';\n  requiresAuth?: boolean;\n  redirectTo?: string;\n}\n\nexport function useRoleProtection(options: UseRoleProtectionOptions = {}) {\n  const { requiredRole, requiresAuth = true, redirectTo = \"/api/login\" } = options;\n  const { user, isLoading, isAuthenticated, hasRole } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const hasAccess = (() => {\n    if (isLoading) return false;\n    \n    if (requiresAuth && !isAuthenticated) return false;\n    \n    if (requiredRole && !hasRole(requiredRole)) {\n      // Admin has access to all roles\n      if (user?.role === 'admin') return true;\n      return false;\n    }\n    \n    return true;\n  })();\n\n  useEffect(() => {\n    if (isLoading) return;\n\n    if (requiresAuth && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to access this page.\",\n        variant: \"destructive\",\n      });\n      \n      setTimeout(() => {\n        window.location.href = redirectTo;\n      }, 1000);\n      return;\n    }\n\n    if (requiredRole && !hasRole(requiredRole) && user?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: `You need ${requiredRole} role to access this page.`,\n        variant: \"destructive\",\n      });\n      \n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 1000);\n      return;\n    }\n  }, [isLoading, isAuthenticated, user, requiredRole, hasRole, toast, setLocation, redirectTo, requiresAuth]);\n\n  return {\n    isLoading,\n    hasAccess,\n    user,\n    isAuthenticated,\n  };\n}","size_bytes":1799},"client/src/lib/i18n.ts":{"content":"// Internationalization configuration and utilities\nexport type Language = 'en' | 'fr' | 'es' | 'ar' | 'zh';\n\nexport interface LanguageInfo {\n  code: Language;\n  name: string;\n  nativeName: string;\n  flag: string;\n  rtl?: boolean;\n}\n\nexport const SUPPORTED_LANGUAGES: LanguageInfo[] = [\n  {\n    code: 'en',\n    name: 'English',\n    nativeName: 'English',\n    flag: '🇺🇸'\n  },\n  {\n    code: 'fr',\n    name: 'French',\n    nativeName: 'Français',\n    flag: '🇫🇷'\n  },\n  {\n    code: 'es',\n    name: 'Spanish',\n    nativeName: 'Español',\n    flag: '🇪🇸'\n  },\n  {\n    code: 'ar',\n    name: 'Arabic',\n    nativeName: 'العربية',\n    flag: '🇸🇦',\n    rtl: true\n  },\n  {\n    code: 'zh',\n    name: 'Chinese',\n    nativeName: '中文',\n    flag: '🇨🇳'\n  }\n];\n\nexport const DEFAULT_LANGUAGE: Language = 'en';\n\n// Get language from localStorage or browser preference\nexport function getInitialLanguage(): Language {\n  if (typeof window === 'undefined') return DEFAULT_LANGUAGE;\n  \n  // Try localStorage first\n  const stored = localStorage.getItem('cima-language') as Language;\n  if (stored && SUPPORTED_LANGUAGES.find(lang => lang.code === stored)) {\n    return stored;\n  }\n  \n  // Try browser language\n  const browserLang = navigator.language.split('-')[0] as Language;\n  if (SUPPORTED_LANGUAGES.find(lang => lang.code === browserLang)) {\n    return browserLang;\n  }\n  \n  return DEFAULT_LANGUAGE;\n}\n\n// Save language preference\nexport function saveLanguagePreference(language: Language): void {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem('cima-language', language);\n}\n\n// Get language info by code\nexport function getLanguageInfo(code: Language): LanguageInfo {\n  return SUPPORTED_LANGUAGES.find(lang => lang.code === code) || SUPPORTED_LANGUAGES[0];\n}","size_bytes":1798},"client/src/pages/create-course.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useRoleProtection } from \"@/hooks/useRoleProtection\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport { ArrowLeft, Save, BookOpen } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst courseSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(100, \"Title must be less than 100 characters\"),\n  subtitle: z.string().min(1, \"Subtitle is required\").max(200, \"Subtitle must be less than 200 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  level: z.enum([\"beginner\", \"intermediate\", \"advanced\"]),\n  price: z.number().min(0, \"Price must be non-negative\"),\n  currency: z.string().default(\"USD\"),\n  thumbnailUrl: z.string().url().optional().or(z.literal(\"\")),\n  isPublished: z.boolean().default(false),\n  isFeatured: z.boolean().default(false),\n});\n\ntype CourseFormData = z.infer<typeof courseSchema>;\n\ninterface Category {\n  id: string;\n  name: string;\n  slug: string;\n}\n\nexport default function CreateCourse() {\n  const { isLoading: authLoading, hasAccess } = useRoleProtection({ \n    requiredRole: 'instructor' \n  });\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    enabled: hasAccess,\n  });\n\n  const form = useForm<CourseFormData>({\n    resolver: zodResolver(courseSchema),\n    defaultValues: {\n      title: \"\",\n      subtitle: \"\",\n      description: \"\",\n      categoryId: \"\",\n      level: \"beginner\",\n      price: 0,\n      currency: \"USD\",\n      thumbnailUrl: \"\",\n      isPublished: false,\n      isFeatured: false,\n    },\n  });\n\n  const createCourse = useMutation({\n    mutationFn: async (data: CourseFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/instructor/courses\", data);\n      return response.json();\n    },\n    onSuccess: (course) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/instructor/courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/instructor/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Course created successfully\",\n      });\n      setLocation(`/instructor/courses/${course.id}/edit`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create course: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CourseFormData) => {\n    createCourse.mutate(data);\n  };\n\n  if (authLoading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n    </div>;\n  }\n\n  if (!hasAccess) {\n    return null; // Role protection will handle redirect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"ghost\" size=\"sm\" asChild>\n            <Link href=\"/instructor\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Create New Course</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Fill in the details to create your new course\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Course Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Left Column */}\n                  <div className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Title *</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter course title\" \n                              {...field} \n                              data-testid=\"input-course-title\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"subtitle\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Subtitle *</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter course subtitle\" \n                              {...field} \n                              data-testid=\"input-course-subtitle\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category *</FormLabel>\n                          <Select \n                            onValueChange={field.onChange} \n                            defaultValue={field.value}\n                            disabled={categoriesLoading}\n                          >\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-course-category\">\n                                <SelectValue placeholder=\"Select a category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"level\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Difficulty Level *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-course-level\">\n                                <SelectValue placeholder=\"Select difficulty level\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"beginner\">Beginner</SelectItem>\n                              <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                              <SelectItem value=\"advanced\">Advanced</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Right Column */}\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"price\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Price *</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                min=\"0\" \n                                step=\"0.01\"\n                                placeholder=\"0.00\" \n                                {...field} \n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                data-testid=\"input-course-price\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"currency\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Currency</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-course-currency\">\n                                  <SelectValue placeholder=\"Currency\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"USD\">USD</SelectItem>\n                                <SelectItem value=\"EUR\">EUR</SelectItem>\n                                <SelectItem value=\"GBP\">GBP</SelectItem>\n                                <SelectItem value=\"NGN\">NGN</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"thumbnailUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Thumbnail URL</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"url\"\n                              placeholder=\"https://example.com/image.jpg\" \n                              {...field} \n                              data-testid=\"input-course-thumbnail\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"isPublished\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Publish Course</FormLabel>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Make this course available to students\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-course-published\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"isFeatured\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Featured Course</FormLabel>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Display this course prominently on the homepage\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-course-featured\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Full Width Description */}\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course Description *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe what students will learn in this course...\" \n                          rows={6}\n                          {...field} \n                          data-testid=\"textarea-course-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex items-center justify-end gap-4 pt-4 border-t\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    asChild\n                  >\n                    <Link href=\"/instructor\">Cancel</Link>\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createCourse.isPending}\n                    data-testid=\"button-create-course\"\n                  >\n                    {createCourse.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full mr-2\" />\n                        Creating...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        Create Course\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16281},"client/src/pages/instructor-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useRoleProtection } from \"@/hooks/useRoleProtection\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { \n  BookOpen, \n  Users, \n  DollarSign, \n  Star, \n  Plus, \n  Edit, \n  Trash2,\n  Eye,\n  TrendingUp,\n  Calendar,\n  BarChart3,\n  MessageCircle,\n  FileText,\n  CheckCircle,\n  Clock,\n  Award,\n  Target,\n  ThumbsUp,\n  AlertCircle,\n  Download,\n  PieChart,\n  Activity\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface InstructorStats {\n  totalCourses: number;\n  totalStudents: number;\n  totalRevenue: number;\n  averageRating: number;\n}\n\ninterface InstructorCourse {\n  id: string;\n  title: string;\n  subtitle: string;\n  price: number;\n  currency: string;\n  isPublished: boolean;\n  isFeatured: boolean;\n  enrollmentCount: number;\n  avgRating: number;\n  ratingCount: number;\n  thumbnailUrl: string;\n  createdAt: string;\n  category: {\n    id: string;\n    name: string;\n  };\n}\n\nexport default function InstructorDashboard() {\n  const { isLoading: authLoading, hasAccess } = useRoleProtection({ \n    requiredRole: 'instructor' \n  });\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: stats, isLoading: statsLoading } = useQuery<InstructorStats>({\n    queryKey: ['/api/instructor/stats'],\n    enabled: hasAccess,\n  });\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<InstructorCourse[]>({\n    queryKey: ['/api/instructor/courses'],\n    enabled: hasAccess,\n  });\n\n  const { data: revenueData = [] } = useQuery({\n    queryKey: ['/api/instructor/revenue'],\n    enabled: hasAccess,\n  });\n\n  const { data: pendingSubmissions = [] } = useQuery({\n    queryKey: ['/api/instructor/submissions/pending'],\n    enabled: hasAccess,\n  });\n\n  const { data: studentQuestions = [] } = useQuery({\n    queryKey: ['/api/instructor/questions'],\n    enabled: hasAccess,\n  });\n\n  const { data: courseAnalytics = [] } = useQuery({\n    queryKey: ['/api/instructor/analytics'],\n    enabled: hasAccess,\n  });\n\n  const deleteCourse = useMutation({\n    mutationFn: async (courseId: string) => {\n      await apiRequest(\"DELETE\", `/api/instructor/courses/${courseId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/instructor/courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/instructor/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Course deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete course: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (authLoading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n    </div>;\n  }\n\n  if (!hasAccess) {\n    return null; // Role protection will handle redirect\n  }\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n    }).format(amount);\n  };\n\n  const StatCard = ({ icon: Icon, title, value, subtitle, trend }: {\n    icon: any;\n    title: string;\n    value: string | number;\n    subtitle: string;\n    trend?: string;\n  }) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">\n          {subtitle}\n        </p>\n        {trend && (\n          <div className=\"flex items-center mt-2 text-xs text-green-600\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            {trend}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const CourseCard = ({ course }: { course: InstructorCourse }) => (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n      <div className=\"aspect-video relative\">\n        {course.thumbnailUrl ? (\n          <img\n            src={course.thumbnailUrl}\n            alt={course.title}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center\">\n            <BookOpen className=\"h-12 w-12 text-primary/40\" />\n          </div>\n        )}\n        <div className=\"absolute top-2 right-2 flex gap-2\">\n          {course.isFeatured && (\n            <Badge variant=\"default\" className=\"text-xs\">Featured</Badge>\n          )}\n          <Badge variant={course.isPublished ? \"default\" : \"secondary\"} className=\"text-xs\">\n            {course.isPublished ? \"Published\" : \"Draft\"}\n          </Badge>\n        </div>\n      </div>\n      \n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg line-clamp-1\">{course.title}</CardTitle>\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n              {course.subtitle}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <span className=\"flex items-center gap-1\">\n            <Users className=\"h-4 w-4\" />\n            {course.enrollmentCount} students\n          </span>\n          <span className=\"flex items-center gap-1\">\n            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n            {course.avgRating.toFixed(1)} ({course.ratingCount})\n          </span>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {course.category.name}\n            </Badge>\n            <span className=\"text-lg font-semibold\">\n              {formatCurrency(Number(course.price), course.currency)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" asChild>\n              <Link href={`/course/${course.id}`}>\n                <Eye className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" asChild>\n              <Link href={`/instructor/courses/${course.id}/edit`}>\n                <Edit className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => deleteCourse.mutate(course.id)}\n              disabled={deleteCourse.isPending}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Instructor Dashboard</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Manage your courses and track your teaching performance\n            </p>\n          </div>\n          <Button asChild className=\"mt-4 sm:mt-0\">\n            <Link href=\"/instructor/courses/new\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Course\n            </Link>\n          </Button>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"courses\">Courses</TabsTrigger>\n            <TabsTrigger value=\"grading\">Grading</TabsTrigger>\n            <TabsTrigger value=\"communication\">Communication</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <StatCard\n                icon={BookOpen}\n                title=\"Total Courses\"\n                value={stats?.totalCourses || 0}\n                subtitle=\"Courses created\"\n              />\n              <StatCard\n                icon={Users}\n                title=\"Total Students\"\n                value={stats?.totalStudents || 0}\n                subtitle=\"Students enrolled\"\n              />\n              <StatCard\n                icon={DollarSign}\n                title=\"Total Revenue\"\n                value={formatCurrency(stats?.totalRevenue || 0)}\n                subtitle=\"Lifetime earnings\"\n              />\n              <StatCard\n                icon={Star}\n                title=\"Average Rating\"\n                value={stats?.averageRating?.toFixed(1) || \"0.0\"}\n                subtitle=\"Course rating\"\n              />\n            </div>\n\n            {/* Recent Courses */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  Recent Courses\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {coursesLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n                  </div>\n                ) : courses.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No courses yet</h3>\n                    <p className=\"text-muted-foreground mb-4\">Create your first course to get started</p>\n                    <Button asChild>\n                      <Link href=\"/instructor/courses/new\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create Course\n                      </Link>\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    {courses.slice(0, 4).map((course) => (\n                      <CourseCard key={course.id} course={course} />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"courses\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold\">All Courses ({courses.length})</h2>\n              <Button asChild>\n                <Link href=\"/instructor/courses/new\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Course\n                </Link>\n              </Button>\n            </div>\n\n            {coursesLoading ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"overflow-hidden\">\n                    <div className=\"aspect-video bg-muted animate-pulse\" />\n                    <CardHeader>\n                      <div className=\"h-6 bg-muted animate-pulse rounded\" />\n                      <div className=\"h-4 bg-muted animate-pulse rounded w-3/4\" />\n                    </CardHeader>\n                  </Card>\n                ))}\n              </div>\n            ) : courses.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No courses yet</h3>\n                <p className=\"text-muted-foreground mb-6\">Create your first course to start teaching</p>\n                <Button asChild size=\"lg\">\n                  <Link href=\"/instructor/courses/new\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Course\n                  </Link>\n                </Button>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {courses.map((course) => (\n                  <CourseCard key={course.id} course={course} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"grading\" className=\"space-y-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Pending Submissions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2\" />\n                    Pending Submissions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {pendingSubmissions.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <CheckCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                      <p className=\"text-muted-foreground\">All caught up! No pending submissions.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {pendingSubmissions.slice(0, 5).map((submission) => (\n                        <div key={submission.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                              <FileText className=\"w-5 h-5 text-orange-600\" />\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium\">{submission.assignment.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {submission.student.firstName} {submission.student.lastName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Submitted {new Date(submission.submittedAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <Button size=\"sm\">Grade Now</Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Grading Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Grading Overview</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Pending Reviews</span>\n                    <span className=\"font-semibold text-orange-600\">{pendingSubmissions.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Graded This Week</span>\n                    <span className=\"font-semibold text-green-600\">24</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Average Grade</span>\n                    <span className=\"font-semibold\">87%</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Response Time</span>\n                    <span className=\"font-semibold\">2.3 days</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"communication\" className=\"space-y-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Student Questions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <MessageCircle className=\"w-5 h-5 mr-2\" />\n                    Student Questions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {studentQuestions.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                      <p className=\"text-muted-foreground\">No new questions from students.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {studentQuestions.slice(0, 5).map((question) => (\n                        <div key={question.id} className=\"p-4 border rounded-lg\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-xs font-medium text-blue-600\">\n                                  {question.student.firstName[0]}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-sm\">\n                                  {question.student.firstName} {question.student.lastName}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {question.course.title}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {new Date(question.createdAt).toLocaleDateString()}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-foreground mb-3\">{question.content}</p>\n                          <Button size=\"sm\" variant=\"outline\">Reply</Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Communication Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Communication Overview</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Unanswered Questions</span>\n                    <span className=\"font-semibold text-orange-600\">{studentQuestions.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Avg Response Time</span>\n                    <span className=\"font-semibold text-green-600\">4.2 hours</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Student Satisfaction</span>\n                    <div className=\"flex items-center space-x-1\">\n                      <ThumbsUp className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"font-semibold\">94%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Messages This Week</span>\n                    <span className=\"font-semibold\">18</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Revenue Analytics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <DollarSign className=\"w-5 h-5 mr-2\" />\n                    Revenue Analytics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">This Month</span>\n                      <span className=\"font-bold text-lg text-green-600\">$2,450</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Last Month</span>\n                      <span className=\"font-semibold\">$1,890</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Growth</span>\n                      <div className=\"flex items-center space-x-1 text-green-600\">\n                        <TrendingUp className=\"w-4 h-4\" />\n                        <span className=\"font-semibold\">+29.6%</span>\n                      </div>\n                    </div>\n                    <div className=\"pt-4 border-t\">\n                      <p className=\"text-xs text-muted-foreground mb-2\">Top Earning Course</p>\n                      <p className=\"font-medium\">Cross-Border M&A Dispute Resolution</p>\n                      <p className=\"text-sm text-green-600\">$890 this month</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Course Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    Course Performance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-sm\">Cross-Border M&A Dispute Resolution</p>\n                        <p className=\"text-xs text-muted-foreground\">45 students • 4.8★</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-green-600\">$890</p>\n                        <p className=\"text-xs text-muted-foreground\">82% completion</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-sm\">International Arbitration Fundamentals</p>\n                        <p className=\"text-xs text-muted-foreground\">38 students • 4.6★</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-green-600\">$756</p>\n                        <p className=\"text-xs text-muted-foreground\">76% completion</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-sm\">Mediation Mastery</p>\n                        <p className=\"text-xs text-muted-foreground\">52 students • 4.7★</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-green-600\">$1,040</p>\n                        <p className=\"text-xs text-muted-foreground\">89% completion</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Student Engagement */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Activity className=\"w-5 h-5 mr-2\" />\n                    Student Engagement\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Avg Completion Rate</span>\n                    <span className=\"font-semibold\">78%</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Active Students</span>\n                    <span className=\"font-semibold text-green-600\">156</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Discussion Posts</span>\n                    <span className=\"font-semibold\">89</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Quiz Attempts</span>\n                    <span className=\"font-semibold\">234</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Goals */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Target className=\"w-5 h-5 mr-2\" />\n                    Monthly Goals\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Revenue Goal</span>\n                      <span className=\"text-sm font-medium\">$2,450 / $3,000</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '82%' }}></div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">New Students</span>\n                      <span className=\"text-sm font-medium\">42 / 50</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '84%' }}></div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Course Completion</span>\n                      <span className=\"text-sm font-medium\">78% / 85%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-orange-600 h-2 rounded-full\" style={{ width: '92%' }}></div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":28813},"client/src/translations/ar.ts":{"content":"export const ar = {\n  // Navigation\n  nav: {\n    home: 'الرئيسية',\n    courses: 'الدورات',\n    about: 'حول',\n    contact: 'اتصل',\n    dashboard: 'لوحة التحكم',\n    login: 'تسجيل الدخول',\n    logout: 'تسجيل الخروج',\n    profile: 'الملف الشخصي'\n  },\n\n  // Landing Page\n  landing: {\n    heroTitle: 'إتقان التحكيم والوساطة',\n    heroHighlight: 'الدولية',\n    heroSubtitle: 'انضم إلى المجتمع العالمي لمحترفي الحلول البديلة للنزاعات. طور مسيرتك المهنية بمؤهلات معترف بها دولياً من مركز الوسطاء والمحكمين الدوليين.',\n    getStarted: 'ابدأ الآن',\n    watchOverview: 'شاهد النظرة العامة',\n    globalMembers: 'الأعضاء العالميون',\n    successRate: 'معدل النجاح',\n    countries: 'البلدان',\n    whyChooseTitle: 'لماذا تختار CIMA Learn؟',\n    featuredCoursesTitle: 'الدورات المميزة',\n    testimonialTitle: 'ماذا يقول طلابنا'\n  },\n\n  // Courses Page\n  courses: {\n    title: 'دورات احترافية في الحلول البديلة للنزاعات',\n    subtitle: 'برامج تدريب شاملة مصممة من قبل خبراء الصناعة',\n    searchPlaceholder: 'البحث عن دورات...',\n    filterByCategory: 'فلترة حسب الفئة',\n    sortBy: 'ترتيب حسب',\n    allCategories: 'جميع الفئات',\n    gridView: 'عرض الشبكة',\n    listView: 'عرض القائمة',\n    enrollNow: 'سجل الآن',\n    learnMore: 'اعرف المزيد',\n    free: 'مجاني',\n    hours: 'ساعات',\n    lessons: 'دروس',\n    students: 'طلاب',\n    rating: 'التقييم',\n    noCoursesFound: 'لم يتم العثور على دورات',\n    noCoursesDescription: 'حاول تعديل معايير البحث أو الفلترة',\n    loadingCourses: 'جاري تحميل الدورات...'\n  },\n\n  // Dashboard\n  dashboard: {\n    welcomeBack: 'مرحباً بعودتك',\n    subtitle: 'تابع رحلتك نحو إتقان الحلول البديلة للنزاعات',\n    browseCourses: 'تصفح الدورات',\n    enrolled: 'مسجل',\n    completed: 'مكتمل',\n    hours: 'ساعات',\n    certificates: 'الشهادات',\n    myLearning: 'تعلمي',\n    favorites: 'المفضلة',\n    activity: 'النشاط',\n    continueLearning: 'تابع التعلم',\n    continueButton: 'تابع',\n    reviewButton: 'راجع',\n    noEnrollments: 'لا توجد تسجيلات بعد',\n    noEnrollmentsDesc: 'ابدأ رحلة التعلم الخاصة بك من خلال التسجيل في الدورات التي تهمك.',\n    exploreCourses: 'استكشف الدورات',\n    noFavorites: 'لا توجد دورات مفضلة بعد',\n    noFavoritesDesc: 'احفظ الدورات التي تهمك لتجدها بسهولة لاحقاً.',\n    noCertificates: 'لا توجد شهادات بعد',\n    noCertificatesDesc: 'أكمل الدورات للحصول على شهادات وإظهار إنجازاتك.',\n    startLearning: 'ابدأ التعلم',\n    noActivity: 'لا يوجد نشاط حديث',\n    noActivityDesc: 'ابدأ التعلم لرؤية نشاطك هنا.',\n    removeFavorite: 'إزالة من المفضلة'\n  },\n\n  // Course Detail\n  courseDetail: {\n    whatYouLearn: 'ما ستتعلمه',\n    courseContent: 'محتوى الدورة',\n    instructor: 'المدرب',\n    requirements: 'المتطلبات',\n    description: 'الوصف',\n    enrollNow: 'سجل الآن',\n    startCourse: 'ابدأ الدورة',\n    duration: 'المدة',\n    level: 'المستوى',\n    language: 'اللغة',\n    certificate: 'الشهادة',\n    addToFavorites: 'أضف للمفضلة',\n    removeFromFavorites: 'إزالة من المفضلة',\n    share: 'شارك',\n    modules: 'وحدات',\n    lessons: 'دروس'\n  },\n\n  // Common\n  common: {\n    loading: 'جاري التحميل...',\n    error: 'خطأ',\n    success: 'نجح',\n    cancel: 'إلغاء',\n    save: 'حفظ',\n    delete: 'حذف',\n    edit: 'تعديل',\n    view: 'عرض',\n    back: 'عودة',\n    next: 'التالي',\n    previous: 'السابق',\n    close: 'إغلاق',\n    search: 'بحث',\n    filter: 'فلترة',\n    sort: 'ترتيب',\n    clear: 'مسح',\n    apply: 'تطبيق',\n    reset: 'إعادة تعيين',\n    submit: 'إرسال',\n    confirm: 'تأكيد',\n    yes: 'نعم',\n    no: 'لا'\n  },\n\n  // Messages\n  messages: {\n    unauthorized: 'تحتاج إلى تسجيل الدخول للوصول إلى هذه الصفحة.',\n    loginRedirect: 'إعادة توجيه إلى تسجيل الدخول...',\n    courseAddedToFavorites: 'تمت إضافة الدورة للمفضلة',\n    courseRemovedFromFavorites: 'تمت إزالة الدورة من المفضلة',\n    enrollmentSuccessful: 'تم التسجيل في الدورة بنجاح',\n    paymentSuccessful: 'تم الدفع بنجاح',\n    paymentFailed: 'فشل الدفع. يرجى المحاولة مرة أخرى.',\n    networkError: 'خطأ في الشبكة. يرجى التحقق من اتصالك.'\n  }\n};","size_bytes":5260},"client/src/translations/en.ts":{"content":"export const en = {\n  // Navigation\n  nav: {\n    home: 'Home',\n    courses: 'Courses',\n    about: 'About',\n    contact: 'Contact',\n    dashboard: 'Dashboard',\n    login: 'Log In',\n    logout: 'Sign Out',\n    profile: 'Profile'\n  },\n\n  // Landing Page\n  landing: {\n    heroTitle: 'Master International',\n    heroHighlight: 'Arbitration & Mediation',\n    heroSubtitle: 'Join the global community of ADR professionals. Advance your career with internationally recognized qualifications from the Center for International Mediators and Arbitrators.',\n    getStarted: 'Get Started',\n    watchOverview: 'Watch Overview',\n    globalMembers: 'Global Members',\n    successRate: 'Success Rate',\n    countries: 'Countries',\n    whyChooseTitle: 'Why Choose CIMA Learn?',\n    featuredCoursesTitle: 'Featured Courses',\n    testimonialTitle: 'What Our Students Say'\n  },\n\n  // Courses Page\n  courses: {\n    title: 'Professional ADR Courses',\n    subtitle: 'Comprehensive training programs designed by industry experts',\n    searchPlaceholder: 'Search courses...',\n    filterByCategory: 'Filter by Category',\n    sortBy: 'Sort by',\n    allCategories: 'All Categories',\n    gridView: 'Grid View',\n    listView: 'List View',\n    enrollNow: 'Enroll Now',\n    learnMore: 'Learn More',\n    free: 'Free',\n    hours: 'hours',\n    lessons: 'lessons',\n    students: 'students',\n    rating: 'rating',\n    noCoursesFound: 'No courses found',\n    noCoursesDescription: 'Try adjusting your search or filter criteria',\n    loadingCourses: 'Loading courses...'\n  },\n\n  // Dashboard\n  dashboard: {\n    welcomeBack: 'Welcome back',\n    subtitle: 'Continue your journey to mastering Alternative Dispute Resolution',\n    browseCourses: 'Browse Courses',\n    enrolled: 'Enrolled',\n    completed: 'Completed',\n    hours: 'Hours',\n    certificates: 'Certificates',\n    myLearning: 'My Learning',\n    favorites: 'Favorites',\n    activity: 'Activity',\n    continueLearning: 'Continue Learning',\n    continueButton: 'Continue',\n    reviewButton: 'Review',\n    noEnrollments: 'No enrollments yet',\n    noEnrollmentsDesc: 'Start your learning journey by enrolling in courses that interest you.',\n    exploreCourses: 'Explore Courses',\n    noFavorites: 'No favorite courses yet',\n    noFavoritesDesc: 'Save courses you\\'re interested in to easily find them later.',\n    noCertificates: 'No certificates yet',\n    noCertificatesDesc: 'Complete courses to earn certificates and showcase your achievements.',\n    startLearning: 'Start Learning',\n    noActivity: 'No recent activity',\n    noActivityDesc: 'Start learning to see your activity here.',\n    removeFavorite: 'Remove from Favorites'\n  },\n\n  // Course Detail\n  courseDetail: {\n    whatYouLearn: 'What You\\'ll Learn',\n    courseContent: 'Course Content',\n    instructor: 'Instructor',\n    requirements: 'Requirements',\n    description: 'Description',\n    enrollNow: 'Enroll Now',\n    startCourse: 'Start Course',\n    duration: 'Duration',\n    level: 'Level',\n    language: 'Language',\n    certificate: 'Certificate',\n    addToFavorites: 'Add to Favorites',\n    removeFromFavorites: 'Remove from Favorites',\n    share: 'Share',\n    modules: 'modules',\n    lessons: 'lessons'\n  },\n\n  // Common\n  common: {\n    loading: 'Loading...',\n    error: 'Error',\n    success: 'Success',\n    cancel: 'Cancel',\n    save: 'Save',\n    delete: 'Delete',\n    edit: 'Edit',\n    view: 'View',\n    back: 'Back',\n    next: 'Next',\n    previous: 'Previous',\n    close: 'Close',\n    search: 'Search',\n    filter: 'Filter',\n    sort: 'Sort',\n    clear: 'Clear',\n    apply: 'Apply',\n    reset: 'Reset',\n    submit: 'Submit',\n    confirm: 'Confirm',\n    yes: 'Yes',\n    no: 'No'\n  },\n\n  // Messages\n  messages: {\n    unauthorized: 'You need to sign in to access this page.',\n    loginRedirect: 'Redirecting to login...',\n    courseAddedToFavorites: 'Course added to favorites',\n    courseRemovedFromFavorites: 'Course removed from favorites',\n    enrollmentSuccessful: 'Successfully enrolled in course',\n    paymentSuccessful: 'Payment completed successfully',\n    paymentFailed: 'Payment failed. Please try again.',\n    networkError: 'Network error. Please check your connection.'\n  }\n};","size_bytes":4171},"client/src/translations/es.ts":{"content":"export const es = {\n  // Navigation\n  nav: {\n    home: 'Inicio',\n    courses: 'Cursos',\n    about: 'Acerca de',\n    contact: 'Contacto',\n    dashboard: 'Panel',\n    login: 'Iniciar sesión',\n    logout: 'Cerrar sesión',\n    profile: 'Perfil'\n  },\n\n  // Landing Page\n  landing: {\n    heroTitle: 'Domina el arbitraje y la mediación',\n    heroHighlight: 'internacionales',\n    heroSubtitle: 'Únete a la comunidad global de profesionales de resolución alternativa de disputas. Avanza tu carrera con calificaciones reconocidas internacionalmente del Centro para Mediadores y Árbitros Internacionales.',\n    getStarted: 'Comenzar',\n    watchOverview: 'Ver resumen',\n    globalMembers: 'Miembros globales',\n    successRate: 'Tasa de éxito',\n    countries: 'Países',\n    whyChooseTitle: '¿Por qué elegir CIMA Learn?',\n    featuredCoursesTitle: 'Cursos destacados',\n    testimonialTitle: 'Lo que dicen nuestros estudiantes'\n  },\n\n  // Courses Page\n  courses: {\n    title: 'Cursos profesionales de resolución alternativa',\n    subtitle: 'Programas de formación integral diseñados por expertos de la industria',\n    searchPlaceholder: 'Buscar cursos...',\n    filterByCategory: 'Filtrar por categoría',\n    sortBy: 'Ordenar por',\n    allCategories: 'Todas las categorías',\n    gridView: 'Vista cuadrícula',\n    listView: 'Vista lista',\n    enrollNow: 'Inscribirse ahora',\n    learnMore: 'Saber más',\n    free: 'Gratis',\n    hours: 'horas',\n    lessons: 'lecciones',\n    students: 'estudiantes',\n    rating: 'calificación',\n    noCoursesFound: 'No se encontraron cursos',\n    noCoursesDescription: 'Intenta ajustar tus criterios de búsqueda o filtro',\n    loadingCourses: 'Cargando cursos...'\n  },\n\n  // Dashboard\n  dashboard: {\n    welcomeBack: 'Bienvenido de vuelta',\n    subtitle: 'Continúa tu viaje hacia el dominio de la resolución alternativa de disputas',\n    browseCourses: 'Explorar cursos',\n    enrolled: 'Inscrito',\n    completed: 'Completado',\n    hours: 'Horas',\n    certificates: 'Certificados',\n    myLearning: 'Mi aprendizaje',\n    favorites: 'Favoritos',\n    activity: 'Actividad',\n    continueLearning: 'Continuar aprendizaje',\n    continueButton: 'Continuar',\n    reviewButton: 'Revisar',\n    noEnrollments: 'Aún no hay inscripciones',\n    noEnrollmentsDesc: 'Comienza tu viaje de aprendizaje inscribiéndote en cursos que te interesen.',\n    exploreCourses: 'Explorar cursos',\n    noFavorites: 'Aún no tienes cursos favoritos',\n    noFavoritesDesc: 'Guarda cursos que te interesen para encontrarlos fácilmente más tarde.',\n    noCertificates: 'Aún no tienes certificados',\n    noCertificatesDesc: 'Completa cursos para obtener certificados y mostrar tus logros.',\n    startLearning: 'Comenzar aprendizaje',\n    noActivity: 'Sin actividad reciente',\n    noActivityDesc: 'Comienza a aprender para ver tu actividad aquí.',\n    removeFavorite: 'Quitar de favoritos'\n  },\n\n  // Course Detail\n  courseDetail: {\n    whatYouLearn: 'Lo que aprenderás',\n    courseContent: 'Contenido del curso',\n    instructor: 'Instructor',\n    requirements: 'Requisitos',\n    description: 'Descripción',\n    enrollNow: 'Inscribirse ahora',\n    startCourse: 'Comenzar curso',\n    duration: 'Duración',\n    level: 'Nivel',\n    language: 'Idioma',\n    certificate: 'Certificado',\n    addToFavorites: 'Agregar a favoritos',\n    removeFromFavorites: 'Quitar de favoritos',\n    share: 'Compartir',\n    modules: 'módulos',\n    lessons: 'lecciones'\n  },\n\n  // Common\n  common: {\n    loading: 'Cargando...',\n    error: 'Error',\n    success: 'Éxito',\n    cancel: 'Cancelar',\n    save: 'Guardar',\n    delete: 'Eliminar',\n    edit: 'Editar',\n    view: 'Ver',\n    back: 'Atrás',\n    next: 'Siguiente',\n    previous: 'Anterior',\n    close: 'Cerrar',\n    search: 'Buscar',\n    filter: 'Filtrar',\n    sort: 'Ordenar',\n    clear: 'Limpiar',\n    apply: 'Aplicar',\n    reset: 'Restablecer',\n    submit: 'Enviar',\n    confirm: 'Confirmar',\n    yes: 'Sí',\n    no: 'No'\n  },\n\n  // Messages\n  messages: {\n    unauthorized: 'Necesitas iniciar sesión para acceder a esta página.',\n    loginRedirect: 'Redirigiendo al inicio de sesión...',\n    courseAddedToFavorites: 'Curso agregado a favoritos',\n    courseRemovedFromFavorites: 'Curso eliminado de favoritos',\n    enrollmentSuccessful: 'Inscripción al curso exitosa',\n    paymentSuccessful: 'Pago completado exitosamente',\n    paymentFailed: 'Pago fallido. Por favor intenta de nuevo.',\n    networkError: 'Error de red. Por favor verifica tu conexión.'\n  }\n};","size_bytes":4506},"client/src/translations/fr.ts":{"content":"export const fr = {\n  // Navigation\n  nav: {\n    home: 'Accueil',\n    courses: 'Cours',\n    about: 'À propos',\n    contact: 'Contact',\n    dashboard: 'Tableau de bord',\n    login: 'Se connecter',\n    logout: 'Se déconnecter',\n    profile: 'Profil'\n  },\n\n  // Landing Page\n  landing: {\n    heroTitle: 'Maîtrisez l\\'arbitrage et la médiation',\n    heroHighlight: 'internationaux',\n    heroSubtitle: 'Rejoignez la communauté mondiale des professionnels du règlement alternatif des conflits. Faites progresser votre carrière avec des qualifications reconnues internationalement du Centre pour les Médiateurs et Arbitres Internationaux.',\n    getStarted: 'Commencer',\n    watchOverview: 'Voir l\\'aperçu',\n    globalMembers: 'Membres mondiaux',\n    successRate: 'Taux de réussite',\n    countries: 'Pays',\n    whyChooseTitle: 'Pourquoi choisir CIMA Learn ?',\n    featuredCoursesTitle: 'Cours en vedette',\n    testimonialTitle: 'Ce que disent nos étudiants'\n  },\n\n  // Courses Page\n  courses: {\n    title: 'Cours professionnels de règlement alternatif',\n    subtitle: 'Programmes de formation complets conçus par des experts de l\\'industrie',\n    searchPlaceholder: 'Rechercher des cours...',\n    filterByCategory: 'Filtrer par catégorie',\n    sortBy: 'Trier par',\n    allCategories: 'Toutes les catégories',\n    gridView: 'Vue grille',\n    listView: 'Vue liste',\n    enrollNow: 'S\\'inscrire maintenant',\n    learnMore: 'En savoir plus',\n    free: 'Gratuit',\n    hours: 'heures',\n    lessons: 'leçons',\n    students: 'étudiants',\n    rating: 'note',\n    noCoursesFound: 'Aucun cours trouvé',\n    noCoursesDescription: 'Essayez d\\'ajuster vos critères de recherche ou de filtre',\n    loadingCourses: 'Chargement des cours...'\n  },\n\n  // Dashboard\n  dashboard: {\n    welcomeBack: 'Bon retour',\n    subtitle: 'Continuez votre parcours vers la maîtrise du règlement alternatif des conflits',\n    browseCourses: 'Parcourir les cours',\n    enrolled: 'Inscrit',\n    completed: 'Terminé',\n    hours: 'Heures',\n    certificates: 'Certificats',\n    myLearning: 'Mon apprentissage',\n    favorites: 'Favoris',\n    activity: 'Activité',\n    continueLearning: 'Continuer l\\'apprentissage',\n    continueButton: 'Continuer',\n    reviewButton: 'Réviser',\n    noEnrollments: 'Aucune inscription pour le moment',\n    noEnrollmentsDesc: 'Commencez votre parcours d\\'apprentissage en vous inscrivant aux cours qui vous intéressent.',\n    exploreCourses: 'Explorer les cours',\n    noFavorites: 'Aucun cours favori pour le moment',\n    noFavoritesDesc: 'Sauvegardez les cours qui vous intéressent pour les retrouver facilement plus tard.',\n    noCertificates: 'Aucun certificat pour le moment',\n    noCertificatesDesc: 'Terminez des cours pour obtenir des certificats et montrer vos réalisations.',\n    startLearning: 'Commencer l\\'apprentissage',\n    noActivity: 'Aucune activité récente',\n    noActivityDesc: 'Commencez à apprendre pour voir votre activité ici.',\n    removeFavorite: 'Retirer des favoris'\n  },\n\n  // Course Detail\n  courseDetail: {\n    whatYouLearn: 'Ce que vous apprendrez',\n    courseContent: 'Contenu du cours',\n    instructor: 'Instructeur',\n    requirements: 'Prérequis',\n    description: 'Description',\n    enrollNow: 'S\\'inscrire maintenant',\n    startCourse: 'Commencer le cours',\n    duration: 'Durée',\n    level: 'Niveau',\n    language: 'Langue',\n    certificate: 'Certificat',\n    addToFavorites: 'Ajouter aux favoris',\n    removeFromFavorites: 'Retirer des favoris',\n    share: 'Partager',\n    modules: 'modules',\n    lessons: 'leçons'\n  },\n\n  // Common\n  common: {\n    loading: 'Chargement...',\n    error: 'Erreur',\n    success: 'Succès',\n    cancel: 'Annuler',\n    save: 'Sauvegarder',\n    delete: 'Supprimer',\n    edit: 'Modifier',\n    view: 'Voir',\n    back: 'Retour',\n    next: 'Suivant',\n    previous: 'Précédent',\n    close: 'Fermer',\n    search: 'Rechercher',\n    filter: 'Filtrer',\n    sort: 'Trier',\n    clear: 'Effacer',\n    apply: 'Appliquer',\n    reset: 'Réinitialiser',\n    submit: 'Soumettre',\n    confirm: 'Confirmer',\n    yes: 'Oui',\n    no: 'Non'\n  },\n\n  // Messages\n  messages: {\n    unauthorized: 'Vous devez vous connecter pour accéder à cette page.',\n    loginRedirect: 'Redirection vers la connexion...',\n    courseAddedToFavorites: 'Cours ajouté aux favoris',\n    courseRemovedFromFavorites: 'Cours retiré des favoris',\n    enrollmentSuccessful: 'Inscription au cours réussie',\n    paymentSuccessful: 'Paiement effectué avec succès',\n    paymentFailed: 'Échec du paiement. Veuillez réessayer.',\n    networkError: 'Erreur réseau. Veuillez vérifier votre connexion.'\n  }\n};","size_bytes":4644},"client/src/translations/index.ts":{"content":"import { en } from './en';\nimport { fr } from './fr';\nimport { es } from './es';\nimport { ar } from './ar';\nimport { zh } from './zh';\nimport type { Language } from '../lib/i18n';\n\nexport const translations = {\n  en,\n  fr,\n  es,\n  ar,\n  zh\n} as const;\n\nexport type TranslationKeys = typeof en;\n\n// Helper function to get nested translation values\nexport function getTranslation(\n  translations: TranslationKeys,\n  key: string\n): string {\n  return key.split('.').reduce((obj: any, k) => obj?.[k], translations) || key;\n}","size_bytes":519},"client/src/translations/zh.ts":{"content":"export const zh = {\n  // Navigation\n  nav: {\n    home: '首页',\n    courses: '课程',\n    about: '关于',\n    contact: '联系',\n    dashboard: '仪表板',\n    login: '登录',\n    logout: '退出',\n    profile: '个人资料'\n  },\n\n  // Landing Page\n  landing: {\n    heroTitle: '掌握国际',\n    heroHighlight: '仲裁与调解',\n    heroSubtitle: '加入全球争议解决专业人士社区。通过国际调解员和仲裁员中心的国际认可资格提升您的职业生涯。',\n    getStarted: '开始学习',\n    watchOverview: '观看概述',\n    globalMembers: '全球会员',\n    successRate: '成功率',\n    countries: '国家',\n    whyChooseTitle: '为什么选择CIMA Learn？',\n    featuredCoursesTitle: '精选课程',\n    testimonialTitle: '学员评价'\n  },\n\n  // Courses Page\n  courses: {\n    title: '专业争议解决课程',\n    subtitle: '由行业专家设计的综合培训项目',\n    searchPlaceholder: '搜索课程...',\n    filterByCategory: '按类别筛选',\n    sortBy: '排序方式',\n    allCategories: '所有类别',\n    gridView: '网格视图',\n    listView: '列表视图',\n    enrollNow: '立即注册',\n    learnMore: '了解更多',\n    free: '免费',\n    hours: '小时',\n    lessons: '课时',\n    students: '学员',\n    rating: '评分',\n    noCoursesFound: '未找到课程',\n    noCoursesDescription: '尝试调整您的搜索或筛选条件',\n    loadingCourses: '加载课程中...'\n  },\n\n  // Dashboard\n  dashboard: {\n    welcomeBack: '欢迎回来',\n    subtitle: '继续您掌握争议解决方法的学习之旅',\n    browseCourses: '浏览课程',\n    enrolled: '已注册',\n    completed: '已完成',\n    hours: '小时',\n    certificates: '证书',\n    myLearning: '我的学习',\n    favorites: '收藏',\n    activity: '活动',\n    continueLearning: '继续学习',\n    continueButton: '继续',\n    reviewButton: '复习',\n    noEnrollments: '暂无注册课程',\n    noEnrollmentsDesc: '通过注册感兴趣的课程开始您的学习之旅。',\n    exploreCourses: '探索课程',\n    noFavorites: '暂无收藏课程',\n    noFavoritesDesc: '保存您感兴趣的课程以便稍后轻松找到。',\n    noCertificates: '暂无证书',\n    noCertificatesDesc: '完成课程以获得证书并展示您的成就。',\n    startLearning: '开始学习',\n    noActivity: '暂无最近活动',\n    noActivityDesc: '开始学习以在此查看您的活动。',\n    removeFavorite: '移除收藏'\n  },\n\n  // Course Detail\n  courseDetail: {\n    whatYouLearn: '您将学到什么',\n    courseContent: '课程内容',\n    instructor: '讲师',\n    requirements: '要求',\n    description: '描述',\n    enrollNow: '立即注册',\n    startCourse: '开始课程',\n    duration: '时长',\n    level: '级别',\n    language: '语言',\n    certificate: '证书',\n    addToFavorites: '添加到收藏',\n    removeFromFavorites: '从收藏中移除',\n    share: '分享',\n    modules: '模块',\n    lessons: '课时'\n  },\n\n  // Common\n  common: {\n    loading: '加载中...',\n    error: '错误',\n    success: '成功',\n    cancel: '取消',\n    save: '保存',\n    delete: '删除',\n    edit: '编辑',\n    view: '查看',\n    back: '返回',\n    next: '下一步',\n    previous: '上一步',\n    close: '关闭',\n    search: '搜索',\n    filter: '筛选',\n    sort: '排序',\n    clear: '清除',\n    apply: '应用',\n    reset: '重置',\n    submit: '提交',\n    confirm: '确认',\n    yes: '是',\n    no: '否'\n  },\n\n  // Messages\n  messages: {\n    unauthorized: '您需要登录才能访问此页面。',\n    loginRedirect: '正在重定向到登录页面...',\n    courseAddedToFavorites: '课程已添加到收藏',\n    courseRemovedFromFavorites: '课程已从收藏中移除',\n    enrollmentSuccessful: '成功注册课程',\n    paymentSuccessful: '支付成功完成',\n    paymentFailed: '支付失败。请重试。',\n    networkError: '网络错误。请检查您的连接。'\n  }\n};","size_bytes":3951},"server/middleware/roleProtection.ts":{"content":"import type { RequestHandler } from 'express';\nimport type { User } from '@shared/schema';\nimport { storage } from '../storage';\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n\nexport function requireRole(role: 'student' | 'instructor' | 'admin'): RequestHandler {\n  return async (req, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(401).json({ message: 'User not found' });\n      }\n\n      const userRole = user.role || 'student';\n      \n      // Admin has access to everything\n      if (userRole === 'admin') {\n        return next();\n      }\n      \n      // Check exact role match\n      if (userRole === role) {\n        return next();\n      }\n\n      return res.status(403).json({ \n        message: `Access denied. Required role: ${role}` \n      });\n    } catch (error) {\n      console.error('Role protection error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  };\n}\n\nexport function requireInstructor(): RequestHandler {\n  return async (req, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(401).json({ message: 'User not found' });\n      }\n\n      const userRole = user.role || 'student';\n\n      // Allow both instructors and admins\n      if (userRole === 'instructor' || userRole === 'admin') {\n        return next();\n      }\n\n      return res.status(403).json({ \n        message: 'Access denied. Instructor privileges required.' \n      });\n    } catch (error) {\n      console.error('Instructor protection error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  };\n}\n\nexport function requireAdmin(): RequestHandler {\n  return requireRole('admin');\n}\n\nexport function requireStudent(): RequestHandler {\n  return requireRole('student');\n}","size_bytes":2255},"server/storage-broken.ts":{"content":"import {\n  users,\n  courses,\n  modules,\n  lessons,\n  enrollments,\n  progress,\n  reviews,\n  discussions,\n  replies,\n  certifications,\n  orders,\n  categories,\n  quizzes,\n  quizQuestions,\n  quizAnswers,\n  quizAttempts,\n  quizResponses,\n  assignments,\n  assignmentSubmissions,\n  instructorPayouts,\n  type User,\n  type UpsertUser,\n  type Course,\n  type InsertCourse,\n  type Module,\n  type InsertModule,\n  type Lesson,\n  type InsertLesson,\n  type Enrollment,\n  type InsertEnrollment,\n  type Progress,\n  type InsertProgress,\n  type Review,\n  type InsertReview,\n  type Discussion,\n  type InsertDiscussion,\n  type Reply,\n  type InsertReply,\n  type Certification,\n  type InsertCertification,\n  type Order,\n  type InsertOrder,\n  type Category,\n  type InsertCategory,\n  type Quiz,\n  type InsertQuiz,\n  type QuizQuestion,\n  type InsertQuizQuestion,\n  type QuizAnswer,\n  type InsertQuizAnswer,\n  type QuizAttempt,\n  type InsertQuizAttempt,\n  type QuizResponse,\n  type InsertQuizResponse,\n  type Assignment,\n  type InsertAssignment,\n  type AssignmentSubmission,\n  type InsertAssignmentSubmission,\n  type InstructorPayout,\n  type InsertInstructorPayout,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, sql, avg, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserPaystackInfo(id: string, customerCode: string): Promise<User>;\n  updateUserRole(id: string, role: 'student' | 'instructor' | 'admin'): Promise<User>;\n  getInstructors(): Promise<User[]>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Course operations\n  getCourses(filters?: { category?: string; search?: string; level?: string; featured?: boolean }): Promise<(Course & { instructor: User; category: Category })[]>;\n  getCourseById(id: string): Promise<(Course & { instructor: User; category: Category; modules: (Module & { lessons: Lesson[] })[] }) | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, updates: Partial<InsertCourse>): Promise<Course>;\n  deleteCourse(id: string): Promise<void>;\n  getFeaturedCourses(): Promise<(Course & { instructor: User; category: Category })[]>;\n  getInstructorCourses(instructorId: string): Promise<(Course & { category: Category })[]>;\n  getInstructorStats(instructorId: string): Promise<{ totalCourses: number; totalStudents: number; totalRevenue: number; averageRating: number }>;\n\n  // Enrollment operations\n  enrollUser(enrollment: InsertEnrollment): Promise<Enrollment>;\n  getUserEnrollments(userId: string): Promise<(Enrollment & { course: Course & { instructor: User } })[]>;\n  isUserEnrolled(userId: string, courseId: string): Promise<boolean>;\n  updateEnrollmentProgress(userId: string, courseId: string, progress: number): Promise<void>;\n\n  // Progress operations\n  updateProgress(progress: InsertProgress): Promise<Progress>;\n  getUserProgress(userId: string, courseId: string): Promise<(Progress & { lesson: Lesson })[]>;\n  getUserOverallProgress(userId: string): Promise<{ totalCourses: number; completedCourses: number; totalHours: number }>;\n\n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getCourseReviews(courseId: string): Promise<(Review & { user: User })[]>;\n  updateCourseRating(courseId: string): Promise<void>;\n\n  // Discussion operations\n  createDiscussion(discussion: InsertDiscussion): Promise<Discussion>;\n  getCourseDiscussions(courseId: string): Promise<(Discussion & { user: User; _count: { replies: number } })[]>;\n  createReply(reply: InsertReply): Promise<Reply>;\n  getDiscussionReplies(discussionId: string): Promise<(Reply & { user: User })[]>;\n\n  // Certification operations\n  createCertification(certification: InsertCertification): Promise<Certification>;\n  getUserCertifications(userId: string): Promise<(Certification & { course: Course })[]>;\n\n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string, paymentIntentId?: string): Promise<Order>;\n  updateOrderByReference(reference: string, status: string): Promise<Order>;\n  getUserOrders(userId: string): Promise<(Order & { course: Course })[]>;\n\n  // Quiz operations\n  createQuiz(quiz: InsertQuiz): Promise<Quiz>;\n  getQuizById(id: string): Promise<Quiz | undefined>;\n  getLessonQuizzes(lessonId: string): Promise<Quiz[]>;\n  createQuizQuestion(question: InsertQuizQuestion): Promise<QuizQuestion>;\n  createQuizAnswer(answer: InsertQuizAnswer): Promise<QuizAnswer>;\n  submitQuizAttempt(attempt: InsertQuizAttempt): Promise<QuizAttempt>;\n  recordQuizResponse(response: InsertQuizResponse): Promise<QuizResponse>;\n  getUserQuizAttempts(userId: string, quizId: string): Promise<QuizAttempt[]>;\n\n  // Assignment operations\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  getAssignmentById(id: string): Promise<Assignment | undefined>;\n  getLessonAssignments(lessonId: string): Promise<Assignment[]>;\n  submitAssignment(submission: InsertAssignmentSubmission): Promise<AssignmentSubmission>;\n  gradeAssignment(submissionId: string, score: number, feedback: string, graderId: string): Promise<AssignmentSubmission>;\n  getUserAssignmentSubmissions(userId: string, assignmentId: string): Promise<AssignmentSubmission[]>;\n\n  // Instructor payout operations\n  createInstructorPayout(payout: InsertInstructorPayout): Promise<InstructorPayout>;\n  getInstructorPayouts(instructorId: string): Promise<InstructorPayout[]>;\n  updatePayoutStatus(payoutId: string, status: string): Promise<InstructorPayout>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPaystackInfo(id: string, customerCode: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        paystackCustomerCode: customerCode,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(id: string, role: 'student' | 'instructor' | 'admin'): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        role,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getInstructors(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, 'instructor'))\n      .orderBy(users.firstName, users.lastName);\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Course operations\n  async getCourses(filters?: { category?: string; search?: string; level?: string; featured?: boolean }): Promise<(Course & { instructor: User; category: Category })[]> {\n    const conditions = [eq(courses.isPublished, true)];\n    \n    if (filters?.category) {\n      conditions.push(eq(categories.slug, filters.category));\n    }\n    \n    if (filters?.search) {\n      conditions.push(like(courses.title, `%${filters.search}%`));\n    }\n    \n    if (filters?.level) {\n      conditions.push(eq(courses.level, filters.level));\n    }\n    \n    if (filters?.featured) {\n      conditions.push(eq(courses.isFeatured, true));\n    }\n\n    const results = await db\n      .select()\n      .from(courses)\n      .leftJoin(users, eq(courses.instructorId, users.id))\n      .leftJoin(categories, eq(courses.categoryId, categories.id))\n      .where(and(...conditions))\n      .orderBy(desc(courses.createdAt));\n\n    return results.map(row => ({\n      ...row.courses,\n      instructor: row.users!,\n      category: row.categories!,\n    }));\n  }\n\n  async getCourseById(id: string): Promise<(Course & { instructor: User; category: Category; modules: (Module & { lessons: Lesson[] })[] }) | undefined> {\n    const courseResults = await db\n      .select()\n      .from(courses)\n      .leftJoin(users, eq(courses.instructorId, users.id))\n      .leftJoin(categories, eq(courses.categoryId, categories.id))\n      .where(eq(courses.id, id))\n      .limit(1);\n\n    if (courseResults.length === 0) return undefined;\n\n    const courseRow = courseResults[0];\n    const course = {\n      ...courseRow.courses,\n      instructor: courseRow.users!,\n      category: courseRow.categories!,\n    };\n\n    const courseModules = await db\n      .select()\n      .from(modules)\n      .where(eq(modules.courseId, id))\n      .orderBy(modules.order);\n\n    const modulesWithLessons = await Promise.all(\n      courseModules.map(async (module) => {\n        const moduleLessons = await db\n          .select()\n          .from(lessons)\n          .where(eq(lessons.moduleId, module.id))\n          .orderBy(lessons.order);\n\n        return {\n          ...module,\n          lessons: moduleLessons,\n        };\n      })\n    );\n\n    return {\n      ...course,\n      modules: modulesWithLessons,\n    };\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const [newCourse] = await db.insert(courses).values(course).returning();\n    return newCourse;\n  }\n\n  async updateCourse(id: string, updates: Partial<InsertCourse>): Promise<Course> {\n    const [updatedCourse] = await db\n      .update(courses)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    return updatedCourse;\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    await db.delete(courses).where(eq(courses.id, id));\n  }\n\n  async getFeaturedCourses(): Promise<(Course & { instructor: User; category: Category })[]> {\n    const results = await db\n      .select()\n      .from(courses)\n      .leftJoin(users, eq(courses.instructorId, users.id))\n      .leftJoin(categories, eq(courses.categoryId, categories.id))\n      .where(and(eq(courses.isPublished, true), eq(courses.isFeatured, true)))\n      .orderBy(desc(courses.createdAt));\n\n    return results.map(row => ({\n      ...row.courses,\n      instructor: row.users!,\n      category: row.categories!,\n    }));\n  }\n\n  // Enrollment operations\n  async enrollUser(enrollment: InsertEnrollment): Promise<Enrollment> {\n    const [newEnrollment] = await db.insert(enrollments).values(enrollment).returning();\n    \n    // Update enrollment count\n    await db\n      .update(courses)\n      .set({\n        enrollmentCount: sql`${courses.enrollmentCount} + 1`,\n      })\n      .where(eq(courses.id, enrollment.courseId));\n\n    return newEnrollment;\n  }\n\n  async getUserEnrollments(userId: string): Promise<(Enrollment & { course: Course & { instructor: User } })[]> {\n    return await db\n      .select({\n        ...enrollments,\n        course: {\n          ...courses,\n          instructor: users,\n        },\n      })\n      .from(enrollments)\n      .leftJoin(courses, eq(enrollments.courseId, courses.id))\n      .leftJoin(users, eq(courses.instructorId, users.id))\n      .where(eq(enrollments.userId, userId))\n      .orderBy(desc(enrollments.enrolledAt));\n  }\n\n  async isUserEnrolled(userId: string, courseId: string): Promise<boolean> {\n    const [enrollment] = await db\n      .select()\n      .from(enrollments)\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)));\n    return !!enrollment;\n  }\n\n  async updateEnrollmentProgress(userId: string, courseId: string, progress: number): Promise<void> {\n    await db\n      .update(enrollments)\n      .set({ progress: progress.toString() })\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)));\n  }\n\n  // Progress operations\n  async updateProgress(progressData: InsertProgress): Promise<Progress> {\n    const [existingProgress] = await db\n      .select()\n      .from(progress)\n      .where(and(eq(progress.userId, progressData.userId), eq(progress.lessonId, progressData.lessonId)));\n\n    if (existingProgress) {\n      const [updatedProgress] = await db\n        .update(progress)\n        .set({ ...progressData, lastWatchedAt: new Date() })\n        .where(and(eq(progress.userId, progressData.userId), eq(progress.lessonId, progressData.lessonId)))\n        .returning();\n      return updatedProgress;\n    } else {\n      const [newProgress] = await db.insert(progress).values(progressData).returning();\n      return newProgress;\n    }\n  }\n\n  async getUserProgress(userId: string, courseId: string): Promise<(Progress & { lesson: Lesson })[]> {\n    return await db\n      .select({\n        ...progress,\n        lesson: lessons,\n      })\n      .from(progress)\n      .leftJoin(lessons, eq(progress.lessonId, lessons.id))\n      .leftJoin(modules, eq(lessons.moduleId, modules.id))\n      .where(and(eq(progress.userId, userId), eq(modules.courseId, courseId)))\n      .orderBy(modules.order, lessons.order);\n  }\n\n  async getUserOverallProgress(userId: string): Promise<{ totalCourses: number; completedCourses: number; totalHours: number }> {\n    const enrollmentStats = await db\n      .select({\n        totalCourses: count(),\n        completedCourses: sql<number>`COUNT(CASE WHEN ${enrollments.progress} = '100' THEN 1 END)`,\n        totalHours: sql<number>`SUM(COALESCE(${courses.duration}, 0))`,\n      })\n      .from(enrollments)\n      .leftJoin(courses, eq(enrollments.courseId, courses.id))\n      .where(eq(enrollments.userId, userId));\n\n    return enrollmentStats[0] || { totalCourses: 0, completedCourses: 0, totalHours: 0 };\n  }\n\n  // Review operations\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    await this.updateCourseRating(review.courseId);\n    return newReview;\n  }\n\n  async getCourseReviews(courseId: string): Promise<(Review & { user: User })[]> {\n    return await db\n      .select({\n        ...reviews,\n        user: users,\n      })\n      .from(reviews)\n      .leftJoin(users, eq(reviews.userId, users.id))\n      .where(eq(reviews.courseId, courseId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async updateCourseRating(courseId: string): Promise<void> {\n    const [stats] = await db\n      .select({\n        avgRating: avg(reviews.rating),\n        count: count(),\n      })\n      .from(reviews)\n      .where(eq(reviews.courseId, courseId));\n\n    await db\n      .update(courses)\n      .set({\n        avgRating: stats.avgRating?.toString() || '0',\n        ratingCount: stats.count || 0,\n      })\n      .where(eq(courses.id, courseId));\n  }\n\n  // Discussion operations\n  async createDiscussion(discussion: InsertDiscussion): Promise<Discussion> {\n    const [newDiscussion] = await db.insert(discussions).values(discussion).returning();\n    return newDiscussion;\n  }\n\n  async getCourseDiscussions(courseId: string): Promise<(Discussion & { user: User; _count: { replies: number } })[]> {\n    const discussionsList = await db\n      .select({\n        ...discussions,\n        user: users,\n      })\n      .from(discussions)\n      .leftJoin(users, eq(discussions.userId, users.id))\n      .where(eq(discussions.courseId, courseId))\n      .orderBy(desc(discussions.createdAt));\n\n    // Get reply counts for each discussion\n    const discussionsWithCounts = await Promise.all(\n      discussionsList.map(async (discussion) => {\n        const [replyCount] = await db\n          .select({ count: count() })\n          .from(replies)\n          .where(eq(replies.discussionId, discussion.id));\n\n        return {\n          ...discussion,\n          _count: { replies: replyCount.count || 0 },\n        };\n      })\n    );\n\n    return discussionsWithCounts;\n  }\n\n  async createReply(reply: InsertReply): Promise<Reply> {\n    const [newReply] = await db.insert(replies).values(reply).returning();\n    return newReply;\n  }\n\n  async getDiscussionReplies(discussionId: string): Promise<(Reply & { user: User })[]> {\n    return await db\n      .select({\n        ...replies,\n        user: users,\n      })\n      .from(replies)\n      .leftJoin(users, eq(replies.userId, users.id))\n      .where(eq(replies.discussionId, discussionId))\n      .orderBy(replies.createdAt);\n  }\n\n  // Certification operations\n  async createCertification(certification: InsertCertification): Promise<Certification> {\n    const [newCertification] = await db.insert(certifications).values(certification).returning();\n    return newCertification;\n  }\n\n  async getUserCertifications(userId: string): Promise<(Certification & { course: Course })[]> {\n    return await db\n      .select({\n        ...certifications,\n        course: courses,\n      })\n      .from(certifications)\n      .leftJoin(courses, eq(certifications.courseId, courses.id))\n      .where(eq(certifications.userId, userId))\n      .orderBy(desc(certifications.issuedAt));\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrderStatus(id: string, status: string, paymentIntentId?: string): Promise<Order> {\n    const updateData: any = { status };\n    if (paymentIntentId) {\n      updateData.paystackReference = paymentIntentId;\n    }\n\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(updateData)\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async updateOrderByReference(reference: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status })\n      .where(eq(orders.paystackReference, reference))\n      .returning();\n    return updatedOrder;\n  }\n\n  async getUserOrders(userId: string): Promise<(Order & { course: Course })[]> {\n    return await db\n      .select({\n        ...orders,\n        course: courses,\n      })\n      .from(orders)\n      .leftJoin(courses, eq(orders.courseId, courses.id))\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  // Instructor-specific methods\n  async getInstructorCourses(instructorId: string): Promise<(Course & { category: Category })[]> {\n    return await db\n      .select({\n        ...courses,\n        category: categories,\n      })\n      .from(courses)\n      .leftJoin(categories, eq(courses.categoryId, categories.id))\n      .where(eq(courses.instructorId, instructorId))\n      .orderBy(desc(courses.createdAt));\n  }\n\n  async getInstructorStats(instructorId: string): Promise<{ totalCourses: number; totalStudents: number; totalRevenue: number; averageRating: number }> {\n    // Get total courses\n    const [courseStats] = await db\n      .select({\n        totalCourses: count(courses.id),\n        averageRating: avg(courses.avgRating),\n      })\n      .from(courses)\n      .where(eq(courses.instructorId, instructorId));\n\n    // Get total students\n    const [studentStats] = await db\n      .select({\n        totalStudents: count(enrollments.id),\n      })\n      .from(enrollments)\n      .leftJoin(courses, eq(enrollments.courseId, courses.id))\n      .where(eq(courses.instructorId, instructorId));\n\n    // Get total revenue\n    const [revenueStats] = await db\n      .select({\n        totalRevenue: sql<number>`COALESCE(SUM(${orders.amount}), 0)`,\n      })\n      .from(orders)\n      .leftJoin(courses, eq(orders.courseId, courses.id))\n      .where(and(\n        eq(courses.instructorId, instructorId),\n        eq(orders.status, 'completed')\n      ));\n\n    return {\n      totalCourses: Number(courseStats?.totalCourses || 0),\n      totalStudents: Number(studentStats?.totalStudents || 0),\n      totalRevenue: Number(revenueStats?.totalRevenue || 0),\n      averageRating: Number(courseStats?.averageRating || 0),\n    };\n  }\n\n  // Quiz operations\n  async createQuiz(quiz: InsertQuiz): Promise<Quiz> {\n    const [newQuiz] = await db.insert(quizzes).values(quiz).returning();\n    return newQuiz;\n  }\n\n  async getQuizById(id: string): Promise<Quiz | undefined> {\n    const [quiz] = await db.select().from(quizzes).where(eq(quizzes.id, id));\n    return quiz;\n  }\n\n  async getLessonQuizzes(lessonId: string): Promise<Quiz[]> {\n    return await db.select().from(quizzes).where(eq(quizzes.lessonId, lessonId)).orderBy(quizzes.createdAt);\n  }\n\n  async createQuizQuestion(question: InsertQuizQuestion): Promise<QuizQuestion> {\n    const [newQuestion] = await db.insert(quizQuestions).values(question).returning();\n    return newQuestion;\n  }\n\n  async createQuizAnswer(answer: InsertQuizAnswer): Promise<QuizAnswer> {\n    const [newAnswer] = await db.insert(quizAnswers).values(answer).returning();\n    return newAnswer;\n  }\n\n  async submitQuizAttempt(attempt: InsertQuizAttempt): Promise<QuizAttempt> {\n    const [newAttempt] = await db.insert(quizAttempts).values(attempt).returning();\n    return newAttempt;\n  }\n\n  async recordQuizResponse(response: InsertQuizResponse): Promise<QuizResponse> {\n    const [newResponse] = await db.insert(quizResponses).values(response).returning();\n    return newResponse;\n  }\n\n  async getUserQuizAttempts(userId: string, quizId: string): Promise<QuizAttempt[]> {\n    return await db\n      .select()\n      .from(quizAttempts)\n      .where(and(eq(quizAttempts.userId, userId), eq(quizAttempts.quizId, quizId)))\n      .orderBy(desc(quizAttempts.startedAt));\n  }\n\n  // Assignment operations\n  async createAssignment(assignment: InsertAssignment): Promise<Assignment> {\n    const [newAssignment] = await db.insert(assignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async getAssignmentById(id: string): Promise<Assignment | undefined> {\n    const [assignment] = await db.select().from(assignments).where(eq(assignments.id, id));\n    return assignment;\n  }\n\n  async getLessonAssignments(lessonId: string): Promise<Assignment[]> {\n    return await db.select().from(assignments).where(eq(assignments.lessonId, lessonId)).orderBy(assignments.createdAt);\n  }\n\n  async submitAssignment(submission: InsertAssignmentSubmission): Promise<AssignmentSubmission> {\n    const [newSubmission] = await db.insert(assignmentSubmissions).values(submission).returning();\n    return newSubmission;\n  }\n\n  async gradeAssignment(submissionId: string, score: number, feedback: string, graderId: string): Promise<AssignmentSubmission> {\n    const [updatedSubmission] = await db\n      .update(assignmentSubmissions)\n      .set({\n        score,\n        feedback,\n        gradedBy: graderId,\n        gradedAt: new Date(),\n      })\n      .where(eq(assignmentSubmissions.id, submissionId))\n      .returning();\n    return updatedSubmission;\n  }\n\n  async getUserAssignmentSubmissions(userId: string, assignmentId: string): Promise<AssignmentSubmission[]> {\n    return await db\n      .select()\n      .from(assignmentSubmissions)\n      .where(and(eq(assignmentSubmissions.userId, userId), eq(assignmentSubmissions.assignmentId, assignmentId)))\n      .orderBy(desc(assignmentSubmissions.submittedAt));\n  }\n\n  // Instructor payout operations\n  async createInstructorPayout(payout: InsertInstructorPayout): Promise<InstructorPayout> {\n    const [newPayout] = await db.insert(instructorPayouts).values(payout).returning();\n    return newPayout;\n  }\n\n  async getInstructorPayouts(instructorId: string): Promise<InstructorPayout[]> {\n    return await db\n      .select()\n      .from(instructorPayouts)\n      .where(eq(instructorPayouts.instructorId, instructorId))\n      .orderBy(desc(instructorPayouts.createdAt));\n  }\n\n  async updatePayoutStatus(payoutId: string, status: string): Promise<InstructorPayout> {\n    const [updatedPayout] = await db\n      .update(instructorPayouts)\n      .set({\n        status: status as any,\n        processedAt: status === 'completed' ? new Date() : undefined,\n      })\n      .where(eq(instructorPayouts.id, payoutId))\n      .returning();\n    return updatedPayout;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24351},"server/middleware/security.ts":{"content":"import rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport compression from 'compression';\nimport { body, query, param, validationResult } from 'express-validator';\nimport type { Request, Response, NextFunction } from 'express';\n\n// Rate limiting configurations\nexport const authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 auth requests per windowMs\n  message: {\n    error: 'Too many authentication attempts, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nexport const generalLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 1000, // Increased limit for development\n  message: {\n    error: 'Too many requests, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: (req) => {\n    // Skip rate limiting for static assets and development\n    return req.url.startsWith('/uploads') || \n           req.url.startsWith('/assets') || \n           req.url.includes('vite') ||\n           process.env.NODE_ENV === 'development';\n  },\n});\n\nexport const uploadLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // limit each IP to 10 upload requests per hour\n  message: {\n    error: 'Upload limit exceeded, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Security middleware\nexport const securityMiddleware = [\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n        mediaSrc: [\"'self'\", \"blob:\", \"https:\"],\n        connectSrc: [\"'self'\", \"https:\", \"wss:\", \"ws://localhost:*\", \"http://localhost:*\"],\n      },\n    },\n  }),\n  cors({\n    origin: process.env.NODE_ENV === 'production' \n      ? process.env.FRONTEND_URL \n      : ['http://localhost:3000', 'http://localhost:5000'],\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'Cookie'],\n  }),\n  compression(),\n  generalLimiter,\n];\n\n// Validation middleware\nexport const validateRequest = (req: Request, res: Response, next: NextFunction) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array(),\n    });\n  }\n  next();\n};\n\n// Common validation rules\nexport const courseValidation = [\n  body('title')\n    .trim()\n    .isLength({ min: 5, max: 200 })\n    .withMessage('Title must be between 5 and 200 characters'),\n  body('description')\n    .optional()\n    .trim()\n    .isLength({ max: 5000 })\n    .withMessage('Description must not exceed 5000 characters'),\n  body('price')\n    .isFloat({ min: 0 })\n    .withMessage('Price must be a valid positive number'),\n  body('level')\n    .isIn(['beginner', 'intermediate', 'advanced'])\n    .withMessage('Level must be beginner, intermediate, or advanced'),\n  body('categoryId')\n    .optional()\n    .isUUID()\n    .withMessage('Category ID must be a valid UUID'),\n];\n\nexport const enrollmentValidation = [\n  body('courseId')\n    .isUUID()\n    .withMessage('Course ID must be a valid UUID'),\n];\n\nexport const reviewValidation = [\n  body('courseId')\n    .isUUID()\n    .withMessage('Course ID must be a valid UUID'),\n  body('rating')\n    .isInt({ min: 1, max: 5 })\n    .withMessage('Rating must be between 1 and 5'),\n  body('comment')\n    .optional()\n    .trim()\n    .isLength({ max: 1000 })\n    .withMessage('Comment must not exceed 1000 characters'),\n];\n\nexport const progressValidation = [\n  body('lessonId')\n    .isUUID()\n    .withMessage('Lesson ID must be a valid UUID'),\n  body('watchTime')\n    .optional()\n    .isInt({ min: 0 })\n    .withMessage('Watch time must be a non-negative integer'),\n  body('completed')\n    .optional()\n    .isBoolean()\n    .withMessage('Completed must be a boolean value'),\n];\n\nexport const paginationValidation = [\n  query('page')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Page must be a positive integer'),\n  query('limit')\n    .optional()\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Limit must be between 1 and 100'),\n];\n\nexport const searchValidation = [\n  query('search')\n    .optional()\n    .trim()\n    .isLength({ max: 100 })\n    .withMessage('Search query must not exceed 100 characters'),\n  query('category')\n    .optional()\n    .isAlphanumeric()\n    .withMessage('Category must be alphanumeric'),\n  query('level')\n    .optional()\n    .isIn(['beginner', 'intermediate', 'advanced'])\n    .withMessage('Level must be beginner, intermediate, or advanced'),\n];\n\nexport const uuidValidation = [\n  param('id')\n    .isUUID()\n    .withMessage('ID must be a valid UUID'),\n];\n\n// Error handling middleware\nexport const errorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {\n  console.error('Error:', err);\n\n  // Validation errors\n  if (err.name === 'ValidationError') {\n    return res.status(400).json({\n      error: 'Validation Error',\n      message: err.message,\n      details: err.details || [],\n    });\n  }\n\n  // Database errors\n  if (err.code === '23505') { // Unique constraint violation\n    return res.status(409).json({\n      error: 'Conflict',\n      message: 'Resource already exists',\n    });\n  }\n\n  if (err.code === '23503') { // Foreign key constraint violation\n    return res.status(400).json({\n      error: 'Bad Request',\n      message: 'Referenced resource does not exist',\n    });\n  }\n\n  if (err.code === '22P02') { // Invalid UUID\n    return res.status(400).json({\n      error: 'Bad Request',\n      message: 'Invalid ID format',\n    });\n  }\n\n  // Authentication errors\n  if (err.name === 'UnauthorizedError' || err.status === 401) {\n    return res.status(401).json({\n      error: 'Unauthorized',\n      message: 'Authentication required',\n    });\n  }\n\n  // Authorization errors\n  if (err.status === 403) {\n    return res.status(403).json({\n      error: 'Forbidden',\n      message: 'Insufficient permissions',\n    });\n  }\n\n  // Not found errors\n  if (err.status === 404) {\n    return res.status(404).json({\n      error: 'Not Found',\n      message: 'Resource not found',\n    });\n  }\n\n  // Default server error\n  res.status(500).json({\n    error: 'Internal Server Error',\n    message: process.env.NODE_ENV === 'production' \n      ? 'Something went wrong' \n      : err.message,\n  });\n};\n\n// Async error wrapper\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};","size_bytes":6807},"server/middleware/upload.ts":{"content":"import multer from 'multer';\nimport path from 'path';\nimport { Request } from 'express';\n\n// File filter for different types\nconst createFileFilter = (allowedTypes: string[], maxSize: number) => {\n  return (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    // Check file type\n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    if (!allowedTypes.includes(fileExtension)) {\n      return cb(new Error(`Invalid file type. Allowed types: ${allowedTypes.join(', ')}`));\n    }\n    \n    // Check file size (Note: this is checked again by multer, but good to have here)\n    if (file.size && file.size > maxSize) {\n      return cb(new Error(`File too large. Maximum size: ${maxSize / (1024 * 1024)}MB`));\n    }\n    \n    cb(null, true);\n  };\n};\n\n// Storage configuration\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    let uploadPath = 'uploads/';\n    \n    if (file.fieldname === 'video') {\n      uploadPath += 'videos/';\n    } else if (file.fieldname === 'thumbnail' || file.fieldname === 'image') {\n      uploadPath += 'images/';\n    } else if (file.fieldname === 'document') {\n      uploadPath += 'documents/';\n    }\n    \n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    // Generate unique filename\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const fileExtension = path.extname(file.originalname);\n    const baseName = path.basename(file.originalname, fileExtension);\n    const sanitizedBaseName = baseName.replace(/[^a-zA-Z0-9-_]/g, '');\n    \n    cb(null, `${sanitizedBaseName}-${uniqueSuffix}${fileExtension}`);\n  }\n});\n\n// Memory storage for temporary processing\nconst memoryStorage = multer.memoryStorage();\n\n// File upload configurations\nexport const imageUpload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB\n    files: 1,\n  },\n  fileFilter: createFileFilter(['.jpg', '.jpeg', '.png', '.gif', '.webp'], 5 * 1024 * 1024),\n});\n\nexport const videoUpload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 500 * 1024 * 1024, // 500MB\n    files: 1,\n  },\n  fileFilter: createFileFilter(['.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm'], 500 * 1024 * 1024),\n});\n\nexport const documentUpload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n    files: 1,\n  },\n  fileFilter: createFileFilter(['.pdf', '.doc', '.docx', '.txt', '.rtf'], 10 * 1024 * 1024),\n});\n\n// Multiple file upload for course materials\nexport const courseContentUpload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB per file\n    files: 10, // Max 10 files\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      '.jpg', '.jpeg', '.png', '.gif', '.webp', // Images\n      '.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm', // Videos\n      '.pdf', '.doc', '.docx', '.txt', '.rtf', // Documents\n    ];\n    \n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    if (!allowedTypes.includes(fileExtension)) {\n      return cb(new Error(`Invalid file type. Allowed types: ${allowedTypes.join(', ')}`));\n    }\n    \n    cb(null, true);\n  },\n});\n\n// Profile image upload (smaller size limit)\nexport const profileImageUpload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 2 * 1024 * 1024, // 2MB\n    files: 1,\n  },\n  fileFilter: createFileFilter(['.jpg', '.jpeg', '.png', '.webp'], 2 * 1024 * 1024),\n});\n\n// Memory-based upload for processing before saving\nexport const memoryUpload = multer({\n  storage: memoryStorage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n    files: 1,\n  },\n});\n\n// Upload error handler\nexport const handleUploadError = (err: any, req: Request, res: any, next: any) => {\n  if (err instanceof multer.MulterError) {\n    if (err.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({\n        error: 'File Upload Error',\n        message: 'File too large',\n      });\n    }\n    if (err.code === 'LIMIT_FILE_COUNT') {\n      return res.status(400).json({\n        error: 'File Upload Error',\n        message: 'Too many files',\n      });\n    }\n    if (err.code === 'LIMIT_UNEXPECTED_FILE') {\n      return res.status(400).json({\n        error: 'File Upload Error',\n        message: 'Unexpected field name',\n      });\n    }\n  }\n  \n  if (err.message && err.message.includes('Invalid file type')) {\n    return res.status(400).json({\n      error: 'File Upload Error',\n      message: err.message,\n    });\n  }\n  \n  next(err);\n};\n\n// Utility function to get file URL\nexport const getFileUrl = (req: Request, filename: string, type: 'image' | 'video' | 'document' = 'image') => {\n  const baseUrl = `${req.protocol}://${req.get('host')}`;\n  return `${baseUrl}/uploads/${type}s/${filename}`;\n};\n\n// Clean up old files (utility function)\nexport const cleanupFile = (filePath: string) => {\n  try {\n    const fs = require('fs');\n    if (fs.existsSync(filePath)) {\n      fs.unlinkSync(filePath);\n    }\n  } catch (error) {\n    console.error('Error cleaning up file:', error);\n  }\n};","size_bytes":5046},"client/src/components/world-map.tsx":{"content":"import worldMapImage from \"@assets/istockphoto-1197369584-612x612_1757102993890.jpg\";\n\nexport default function WorldMap() {\n  const locations = [\n    { id: 'london', name: 'London', x: 47.0, y: 36.4, color: 'bg-accent' },\n    { id: 'newyork', name: 'New York', x: 24.2, y: 42.6, color: 'bg-primary' },\n    { id: 'accra', name: 'Accra', x: 46.6, y: 59.0, color: 'bg-secondary' },\n    { id: 'dubai', name: 'Dubai', x: 62.0, y: 50.2, color: 'bg-accent' },\n    { id: 'singapore', name: 'Singapore', x: 78.4, y: 63.0, color: 'bg-primary' }\n  ];\n\n  return (\n    <div className=\"relative w-full h-96 rounded-xl overflow-hidden shadow-lg\" data-testid=\"world-map\">\n      {/* World Map Image */}\n      <img \n        src={worldMapImage} \n        alt=\"World map showing global CIMA locations\" \n        className=\"absolute inset-0 w-full h-full object-cover\"\n      />\n      \n      {/* Light overlay for better visibility */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-white/5\"></div>\n\n      {/* Location Dots */}\n      {locations.map((location, index) => (\n        <div\n          key={location.id}\n          className={`absolute w-4 h-4 ${location.color} rounded-full border-2 border-white shadow-lg transform -translate-x-1/2 -translate-y-1/2 animate-pulse z-10`}\n          style={{ \n            left: `${location.x}%`, \n            top: `${location.y}%`,\n            animationDelay: `${index * 0.8}s`\n          }}\n          data-testid={`location-dot-${location.id}`}\n        >\n          {/* Ripple effect */}\n          <div className={`absolute inset-0 ${location.color} rounded-full animate-ping opacity-40`}></div>\n          \n          {/* Location label */}\n          <div className=\"absolute top-6 left-1/2 transform -translate-x-1/2 whitespace-nowrap\">\n            <span className=\"text-xs font-semibold text-gray-800 bg-white/90 px-2 py-1 rounded backdrop-blur-sm shadow-lg border\">\n              {location.name}\n            </span>\n          </div>\n        </div>\n      ))}\n\n      {/* Animated connection lines */}\n      <svg className=\"absolute inset-0 w-full h-full pointer-events-none z-5\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"connectionGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"rgba(59,130,246,0)\" />\n            <stop offset=\"50%\" stopColor=\"rgba(59,130,246,0.8)\" />\n            <stop offset=\"100%\" stopColor=\"rgba(59,130,246,0)\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Connection paths */}\n        <g stroke=\"url(#connectionGradient)\" strokeWidth=\"0.3\" fill=\"none\" className=\"opacity-70\">\n          <path d=\"M47 36.4 Q35.6 39.5 24.2 42.6\" className=\"animate-pulse\" style={{animationDelay: '2s', animationDuration: '3s'}} />\n          <path d=\"M24.2 42.6 Q35.4 50.8 46.6 59\" className=\"animate-pulse\" style={{animationDelay: '2.5s', animationDuration: '3s'}} />\n          <path d=\"M46.6 59 Q54.3 54.6 62 50.2\" className=\"animate-pulse\" style={{animationDelay: '3s', animationDuration: '3s'}} />\n          <path d=\"M62 50.2 Q70.2 56.6 78.4 63\" className=\"animate-pulse\" style={{animationDelay: '3.5s', animationDuration: '3s'}} />\n          <path d=\"M78.4 63 Q62.5 49.8 47 36.4\" className=\"animate-pulse\" style={{animationDelay: '4s', animationDuration: '3s'}} />\n        </g>\n      </svg>\n\n      {/* Subtle vignette effect */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-gray-100/20 via-transparent to-gray-100/20 pointer-events-none\"></div>\n      <div className=\"absolute inset-0 bg-gradient-to-t from-gray-200/10 via-transparent to-gray-100/5 pointer-events-none\"></div>\n    </div>\n  );\n}","size_bytes":3686},"client/src/pages/academic-advising.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function AcademicAdvising() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Academic Advising</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Get personalized guidance for your ADR education and career development.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Course Selection</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Our academic advisors help you choose the right courses and certification \n                  programs based on your career goals and experience level.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Career Planning</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Get guidance on career pathways in international arbitration and mediation, \n                  including networking opportunities and professional development.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Schedule a Consultation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                Book a one-on-one session with our academic advisors to discuss your educational goals.\n              </p>\n              <Link href=\"/contact\">\n                <Button data-testid=\"button-schedule-consultation\">\n                  <i className=\"fas fa-calendar mr-2\"></i>\n                  Schedule Consultation\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":2929},"client/src/pages/contact.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useState } from \"react\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle form submission\n    console.log('Contact form submitted:', formData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Contact Us</h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Get in touch with our team for support, inquiries, or more information about our programs.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Send us a Message</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Name *\n                      </label>\n                      <Input\n                        type=\"text\"\n                        required\n                        data-testid=\"input-name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Email *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        required\n                        data-testid=\"input-email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData({...formData, email: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Subject *\n                    </label>\n                    <Input\n                      type=\"text\"\n                      required\n                      data-testid=\"input-subject\"\n                      value={formData.subject}\n                      onChange={(e) => setFormData({...formData, subject: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Message *\n                    </label>\n                    <Textarea\n                      rows={6}\n                      required\n                      data-testid=\"textarea-message\"\n                      value={formData.message}\n                      onChange={(e) => setFormData({...formData, message: e.target.value})}\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" data-testid=\"button-send\">\n                    <i className=\"fas fa-paper-plane mr-2\"></i>\n                    Send Message\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Get in Touch</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <i className=\"fas fa-map-marker-alt text-primary text-xl mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Address</h4>\n                      <p className=\"text-muted-foreground\">\n                        Oxford Science Park<br />\n                        John Eccles House<br />\n                        Oxford, Oxfordshire, UK\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <i className=\"fas fa-envelope text-primary text-xl mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Email</h4>\n                      <p className=\"text-muted-foreground\">info@thecima.org</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <i className=\"fas fa-globe text-primary text-xl mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Website</h4>\n                      <p className=\"text-muted-foreground\">www.thecima.org</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <i className=\"fas fa-clock text-primary text-xl mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Office Hours</h4>\n                      <p className=\"text-muted-foreground\">\n                        Monday - Friday: 9:00 AM - 5:00 PM GMT<br />\n                        Weekend: Emergency support only\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Regional Offices</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Africa Region</h4>\n                      <p className=\"text-muted-foreground\">Accra, Ghana</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Asia Pacific</h4>\n                      <p className=\"text-muted-foreground\">Singapore</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Middle East</h4>\n                      <p className=\"text-muted-foreground\">Dubai, UAE</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">Americas</h4>\n                      <p className=\"text-muted-foreground\">New York, USA</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7834},"client/src/pages/cookie-policy.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\n\nexport default function CookiePolicy() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Cookie Policy</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Last updated: {new Date().toLocaleDateString()}\n            </p>\n          </div>\n\n          <div className=\"prose prose-lg max-w-none\">\n            <section className=\"space-y-6\">\n              <h2 className=\"text-2xl font-semibold text-foreground\">What Are Cookies</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Cookies are small text files that are placed on your device when you visit our website. \n                They help us provide you with a better experience by remembering your preferences and \n                understanding how you use our platform.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">How We Use Cookies</h2>\n              \n              <h3 className=\"text-xl font-semibold text-foreground\">Essential Cookies</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                These cookies are necessary for the website to function properly. They enable core \n                functionality such as user authentication, course progress tracking, and secure areas \n                of our platform.\n              </p>\n\n              <h3 className=\"text-xl font-semibold text-foreground\">Performance Cookies</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We use these cookies to understand how visitors interact with our website, helping us \n                improve the user experience and identify technical issues.\n              </p>\n\n              <h3 className=\"text-xl font-semibold text-foreground\">Functionality Cookies</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                These cookies remember your preferences and settings, such as language selection, \n                course progress, and display preferences, to provide a personalized experience.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Third-Party Cookies</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We may use third-party services that place cookies on your device, including:\n              </p>\n              <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n                <li>Payment processing services (for secure transactions)</li>\n                <li>Video hosting services (for course content delivery)</li>\n                <li>Analytics services (to understand platform usage)</li>\n                <li>Communication tools (for student support)</li>\n              </ul>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Managing Cookies</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                You can control and manage cookies through your browser settings. However, disabling \n                certain cookies may affect the functionality of our platform and your learning experience.\n              </p>\n\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <h4 className=\"text-foreground font-medium mb-2\">Browser Cookie Settings:</h4>\n                <ul className=\"list-disc pl-6 space-y-1 text-muted-foreground\">\n                  <li>Chrome: Settings → Privacy and Security → Cookies</li>\n                  <li>Firefox: Settings → Privacy & Security → Cookies</li>\n                  <li>Safari: Preferences → Privacy → Cookies</li>\n                  <li>Edge: Settings → Cookies and Site Permissions</li>\n                </ul>\n              </div>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Updates to This Policy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We may update this cookie policy from time to time to reflect changes in our practices \n                or applicable laws. We encourage you to review this policy periodically.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Contact Us</h2>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <p className=\"text-foreground font-medium\">Data Protection Officer</p>\n                <p className=\"text-muted-foreground\">privacy@thecima.org</p>\n                <p className=\"text-muted-foreground\">\n                  Oxford Science Park, John Eccles House<br />\n                  Oxford, Oxfordshire, UK\n                </p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5568},"client/src/pages/help-center.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function HelpCenter() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Help Center</h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Find answers to common questions and get support for your CIMA Learn experience.\n            </p>\n          </div>\n\n          {/* Quick Links */}\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-graduation-cap text-primary\"></i>\n                  <span>Getting Started</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Learn how to enroll in courses, navigate the platform, and begin your ADR education journey.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-credit-card text-primary\"></i>\n                  <span>Billing & Payments</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Information about course fees, payment methods, refunds, and billing inquiries.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-certificate text-primary\"></i>\n                  <span>Certifications</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Learn about our certification programs, requirements, and how to download certificates.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* FAQ Section */}\n          <div className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Frequently Asked Questions</h2>\n            \n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>How do I enroll in a course?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Browse our course catalog, select the course you're interested in, and click \"Enroll Now\". \n                    You'll need to create an account and complete payment to access course materials.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>What is the FCIMArb Fellowship?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    The FCIMArb Fellowship is our premier professional qualification program for international \n                    arbitrators and mediators. It provides comprehensive training and globally recognized credentials.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>How long do I have access to course materials?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Most courses provide lifetime access to materials. Professional certification programs may \n                    have specific time limits outlined in the course details.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Can I get a refund if I'm not satisfied?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    We offer a 14-day money-back guarantee for most courses. Professional certification programs \n                    have different refund policies due to their intensive nature.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Contact Support */}\n          <div className=\"bg-muted p-8 rounded-lg text-center space-y-4\">\n            <h3 className=\"text-2xl font-bold text-foreground\">Still Need Help?</h3>\n            <p className=\"text-muted-foreground\">\n              Our support team is here to help you with any questions or technical issues.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Link href=\"/contact\">\n                <Button data-testid=\"button-contact-support\">\n                  <i className=\"fas fa-envelope mr-2\"></i>\n                  Contact Support\n                </Button>\n              </Link>\n              <Link href=\"/technical-support\">\n                <Button variant=\"outline\" data-testid=\"button-technical-support\">\n                  <i className=\"fas fa-tools mr-2\"></i>\n                  Technical Support\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6593},"client/src/pages/privacy-policy.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Privacy Policy</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Last updated: {new Date().toLocaleDateString()}\n            </p>\n          </div>\n\n          <div className=\"prose prose-lg max-w-none\">\n            <section className=\"space-y-6\">\n              <h2 className=\"text-2xl font-semibold text-foreground\">Information We Collect</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                The Center for International Mediators and Arbitrators (CIMA) is committed to protecting your privacy. \n                This policy describes how we collect, use, and protect your personal information when you use our \n                learning management system and educational services.\n              </p>\n\n              <h3 className=\"text-xl font-semibold text-foreground\">Personal Information</h3>\n              <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n                <li>Name, email address, and contact information</li>\n                <li>Educational background and professional qualifications</li>\n                <li>Course enrollment and progress data</li>\n                <li>Payment and billing information</li>\n                <li>Communications with our support team</li>\n              </ul>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">How We Use Your Information</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We use your information to provide educational services, process payments, communicate with you \n                about your courses, and improve our platform. We do not sell your personal information to third parties.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Data Protection</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We implement appropriate security measures to protect your personal information against unauthorized \n                access, alteration, disclosure, or destruction. Your data is stored securely and accessed only by \n                authorized personnel.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Your Rights</h2>\n              <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n                <li>Access your personal information</li>\n                <li>Correct inaccurate data</li>\n                <li>Request deletion of your data</li>\n                <li>Withdraw consent for data processing</li>\n                <li>Data portability</li>\n              </ul>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Contact Us</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                If you have questions about this privacy policy or your personal data, please contact us at:\n              </p>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <p className=\"text-foreground font-medium\">Privacy Officer</p>\n                <p className=\"text-muted-foreground\">info@thecima.org</p>\n                <p className=\"text-muted-foreground\">\n                  Oxford Science Park, John Eccles House<br />\n                  Oxford, Oxfordshire, UK\n                </p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":4367},"client/src/pages/technical-support.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function TechnicalSupport() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Technical Support</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Get technical assistance for platform issues and troubleshooting.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Common Issues</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  <li>• Login and password problems</li>\n                  <li>• Video playback issues</li>\n                  <li>• Course access difficulties</li>\n                  <li>• Payment processing errors</li>\n                  <li>• Mobile app troubleshooting</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>System Requirements</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  <li>• Modern web browser (Chrome, Firefox, Safari)</li>\n                  <li>• Stable internet connection</li>\n                  <li>• JavaScript enabled</li>\n                  <li>• Cookies enabled</li>\n                  <li>• Updated browser version</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Submit a Technical Issue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                For technical support, please contact us with detailed information about your issue.\n              </p>\n              <Link href=\"/contact\">\n                <Button data-testid=\"button-contact-tech\">\n                  <i className=\"fas fa-tools mr-2\"></i>\n                  Contact Technical Support\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":3117},"client/src/pages/terms-of-service.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Terms of Service</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Last updated: {new Date().toLocaleDateString()}\n            </p>\n          </div>\n\n          <div className=\"prose prose-lg max-w-none\">\n            <section className=\"space-y-6\">\n              <h2 className=\"text-2xl font-semibold text-foreground\">Acceptance of Terms</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                By accessing and using the CIMA Learn platform, you accept and agree to be bound by the terms \n                and provision of this agreement. These terms govern your use of our educational services, \n                courses, and certification programs.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Educational Services</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                CIMA Learn provides professional education in Alternative Dispute Resolution (ADR), including \n                courses in international arbitration and mediation. Our services include online courses, \n                certification programs, and professional development resources.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">User Responsibilities</h2>\n              <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n                <li>Provide accurate and complete registration information</li>\n                <li>Maintain the security of your account credentials</li>\n                <li>Use the platform for legitimate educational purposes only</li>\n                <li>Respect intellectual property rights of course materials</li>\n                <li>Follow our community guidelines and code of conduct</li>\n              </ul>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Payment and Refunds</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Course fees must be paid in full before accessing course materials. Refund policies vary by \n                program and are outlined in the specific course terms. Professional certification programs \n                may have different refund terms due to their intensive nature.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Intellectual Property</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                All course materials, content, and resources are the intellectual property of CIMA or our \n                licensed partners. Students may access materials for personal educational use but may not \n                redistribute, share, or use materials for commercial purposes.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Certification and Credentials</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Professional certifications and credentials are awarded upon successful completion of program \n                requirements. CIMA reserves the right to verify student identity and work before issuing \n                certifications. Fraudulent completion may result in credential revocation.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Limitation of Liability</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                CIMA provides educational services \"as is\" and makes no warranties about the completeness, \n                reliability, or accuracy of information. Our liability is limited to the fees paid for \n                the specific service in question.\n              </p>\n\n              <h2 className=\"text-2xl font-semibold text-foreground\">Contact Information</h2>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <p className=\"text-foreground font-medium\">Legal Department</p>\n                <p className=\"text-muted-foreground\">legal@thecima.org</p>\n                <p className=\"text-muted-foreground\">\n                  Oxford Science Park, John Eccles House<br />\n                  Oxford, Oxfordshire, UK\n                </p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5277},"client/src/pages/certification.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Certification() {\n  const certificationLevels = [\n    {\n      title: \"Foundation Certificate\",\n      level: \"Entry Level\",\n      duration: \"2-4 weeks\",\n      price: \"$850 - $1,500\",\n      description: \"Introduction to ADR principles and basic competencies\",\n      requirements: [\"Course completion\", \"Basic assessment\", \"Ethics training\"],\n      careers: [\"ADR Assistant\", \"Dispute Resolution Coordinator\", \"Legal Support Specialist\"]\n    },\n    {\n      title: \"Professional Certificate\", \n      level: \"Intermediate\",\n      duration: \"4-8 weeks\",\n      price: \"$2,200 - $3,500\",\n      description: \"Advanced skills in mediation or arbitration practice\",\n      requirements: [\"Foundation completion\", \"Skills demonstration\", \"Case study portfolio\"],\n      careers: [\"Certified Mediator\", \"Arbitration Specialist\", \"Corporate Dispute Manager\"]\n    },\n    {\n      title: \"FCIMArb Fellowship\",\n      level: \"Advanced\",\n      duration: \"12 weeks\",\n      price: \"$4,750\",\n      description: \"Premier qualification with international recognition\",\n      requirements: [\"Professional certification\", \"Comprehensive portfolio\", \"Peer evaluation\"],\n      careers: [\"International Arbitrator\", \"Senior Mediator\", \"ADR Consultant\"],\n      featured: true\n    }\n  ];\n\n  const certificationProcess = [\n    {\n      step: 1,\n      title: \"Course Enrollment\",\n      description: \"Select and enroll in appropriate CIMA certification program\",\n      icon: \"fas fa-user-plus\"\n    },\n    {\n      step: 2,\n      title: \"Skills Training\", \n      description: \"Complete skills-based competency training courses\",\n      icon: \"fas fa-graduation-cap\"\n    },\n    {\n      step: 3,\n      title: \"Assessment\",\n      description: \"Demonstrate competency through practical exercises\",\n      icon: \"fas fa-tasks\"\n    },\n    {\n      step: 4,\n      title: \"Ethics Certification\",\n      description: \"Complete mandatory Professional and Ethical Conduct training\",\n      icon: \"fas fa-shield-alt\"\n    },\n    {\n      step: 5,\n      title: \"Certificate Issuance\",\n      description: \"Receive official certification within 14 days of completion\",\n      icon: \"fas fa-certificate\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-16\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Professional Certification</h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Earn internationally recognized credentials in alternative dispute resolution through our comprehensive certification programs.\n            </p>\n          </div>\n\n          {/* Certification Levels */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Certification Pathways</h2>\n            \n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {certificationLevels.map((cert, index) => (\n                <Card \n                  key={index} \n                  className={`hover:shadow-lg transition-shadow relative ${cert.featured ? 'ring-2 ring-primary' : ''}`}\n                  data-testid={`cert-${cert.level.toLowerCase().replace(' ', '-')}`}\n                >\n                  {cert.featured && (\n                    <div className=\"absolute -top-2 -right-2 z-10\">\n                      <Badge className=\"bg-primary text-primary-foreground px-3 py-1\">\n                        <i className=\"fas fa-star mr-1\"></i>\n                        Premier\n                      </Badge>\n                    </div>\n                  )}\n                  \n                  <CardHeader>\n                    <div className=\"space-y-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs w-fit\">\n                        {cert.level}\n                      </Badge>\n                      <CardTitle className=\"text-xl\">{cert.title}</CardTitle>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span><i className=\"fas fa-clock mr-1\"></i>{cert.duration}</span>\n                        <span><i className=\"fas fa-dollar-sign mr-1\"></i>{cert.price}</span>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-6\">\n                    <p className=\"text-muted-foreground\">{cert.description}</p>\n                    \n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-sm\">Requirements:</h4>\n                      <ul className=\"space-y-1\">\n                        {cert.requirements.map((req, reqIndex) => (\n                          <li key={reqIndex} className=\"flex items-center space-x-2 text-sm\">\n                            <i className=\"fas fa-check text-primary text-xs\"></i>\n                            <span>{req}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-sm\">Career Opportunities:</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {cert.careers.map((career, careerIndex) => (\n                          <Badge key={careerIndex} variant=\"outline\" className=\"text-xs\">\n                            {career}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <Button \n                      className=\"w-full bg-primary hover:bg-primary/90\"\n                      data-testid={`button-apply-${cert.level.toLowerCase().replace(' ', '-')}`}\n                    >\n                      Start Certification\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Certification Process */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Certification Process</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Our structured approach ensures comprehensive skill development and professional readiness\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {certificationProcess.map((process, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-6\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                          <i className={process.icon}></i>\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <span className=\"text-sm font-medium text-primary\">Step {process.step}</span>\n                          <h3 className=\"text-xl font-semibold text-foreground\">{process.title}</h3>\n                        </div>\n                        <p className=\"text-muted-foreground\">{process.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Professional Standards */}\n          <section className=\"bg-muted/30 rounded-xl p-8 space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Professional Standards</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                All certified professionals must adhere to CIMA's Code of Professional and Ethical Conduct\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    <i className=\"fas fa-user-tie text-primary text-2xl mb-2\"></i>\n                    <div>Professional Behavior</div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">\n                    Uphold dignity and professionalism in all ADR processes\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    <i className=\"fas fa-balance-scale text-primary text-2xl mb-2\"></i>\n                    <div>Independence</div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">\n                    Maintain impartiality and disclose any conflicts of interest\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    <i className=\"fas fa-lock text-primary text-2xl mb-2\"></i>\n                    <div>Confidentiality</div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <p className=\"text-muted-foreground text-sm\">\n                    Protect sensitive information and respect privacy\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Certificate Timeline */}\n          <section className=\"text-center space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground\">Certificate Issuance</h2>\n            \n            <Card className=\"max-w-2xl mx-auto\">\n              <CardContent className=\"p-8\">\n                <div className=\"space-y-4\">\n                  <i className=\"fas fa-clock text-primary text-4xl\"></i>\n                  <h3 className=\"text-2xl font-bold text-foreground\">14-Day Guarantee</h3>\n                  <p className=\"text-muted-foreground\">\n                    Upon fulfilling all course requirements including full fee payment and completion of assignments, \n                    students will receive their certificate within 14 days from the date of completion.\n                  </p>\n                  <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-credit-card text-primary mb-2\"></i>\n                      <div className=\"text-sm font-medium\">Payment</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-tasks text-primary mb-2\"></i>\n                      <div className=\"text-sm font-medium\">Completion</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-certificate text-primary mb-2\"></i>\n                      <div className=\"text-sm font-medium\">Certificate</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":12517},"client/src/pages/community-forum.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function CommunityForum() {\n  const forumCategories = [\n    {\n      id: \"general-discussion\",\n      title: \"General Discussion\",\n      description: \"Open discussions about ADR practice and industry trends\",\n      posts: 284,\n      members: 1567,\n      latestActivity: \"2 hours ago\",\n      icon: \"fas fa-comments\"\n    },\n    {\n      id: \"arbitration\",\n      title: \"International Arbitration\",\n      description: \"Discussions on arbitration cases, procedures, and best practices\",\n      posts: 156,\n      members: 892,\n      latestActivity: \"45 minutes ago\",\n      icon: \"fas fa-gavel\"\n    },\n    {\n      id: \"mediation\", \n      title: \"Mediation Techniques\",\n      description: \"Share mediation strategies and conflict resolution approaches\",\n      posts: 98,\n      members: 634,\n      latestActivity: \"1 hour ago\",\n      icon: \"fas fa-handshake\"\n    },\n    {\n      id: \"ethics\",\n      title: \"Professional Ethics\",\n      description: \"Discuss ethical challenges and professional conduct standards\",\n      posts: 67,\n      members: 423,\n      latestActivity: \"3 hours ago\",\n      icon: \"fas fa-shield-alt\"\n    },\n    {\n      id: \"technology\",\n      title: \"Technology in ADR\",\n      description: \"Explore digital tools, AI applications, and virtual proceedings\",\n      posts: 89,\n      members: 512,\n      latestActivity: \"30 minutes ago\",\n      icon: \"fas fa-laptop\"\n    },\n    {\n      id: \"career-development\",\n      title: \"Career Development\",\n      description: \"Professional growth, networking, and industry opportunities\",\n      posts: 124,\n      members: 758,\n      latestActivity: \"4 hours ago\",\n      icon: \"fas fa-user-graduate\"\n    }\n  ];\n\n  const recentDiscussions = [\n    {\n      title: \"Best practices for virtual arbitration hearings\",\n      author: \"Sarah M.\",\n      category: \"Technology\",\n      replies: 12,\n      views: 234,\n      lastActivity: \"2 hours ago\",\n      featured: true\n    },\n    {\n      title: \"Confidentiality obligations in multi-party disputes\",\n      author: \"James K.\",\n      category: \"Ethics\", \n      replies: 8,\n      views: 156,\n      lastActivity: \"3 hours ago\",\n      featured: false\n    },\n    {\n      title: \"Career transition from law to mediation\",\n      author: \"Maria L.\",\n      category: \"Career Development\",\n      replies: 15,\n      views: 298,\n      lastActivity: \"5 hours ago\",\n      featured: false\n    },\n    {\n      title: \"AI tools for case analysis - ethical considerations\",\n      author: \"David R.\",\n      category: \"Technology\",\n      replies: 22,\n      views: 445,\n      lastActivity: \"1 day ago\",\n      featured: true\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n            <Button data-testid=\"button-new-discussion\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Discussion\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Community Forum</h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Connect with ADR professionals worldwide. Share knowledge, ask questions, and build meaningful relationships in our global community.\n            </p>\n          </div>\n\n          {/* Community Guidelines Notice */}\n          <Card className=\"border-primary/20 bg-primary/5\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <i className=\"fas fa-info-circle text-primary text-xl mt-1\"></i>\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">Community Guidelines</h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    All participants must adhere to CIMA's Code of Conduct. Maintain professional standards, \n                    respect confidentiality, and engage constructively. Violations may result in account suspension.\n                  </p>\n                  <Link href=\"/student-conduct\">\n                    <Button variant=\"link\" className=\"p-0 h-auto text-primary text-sm mt-2\">\n                      Read Complete Guidelines →\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Forum Categories */}\n          <section className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Discussion Categories</h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {forumCategories.map((category) => (\n                <Card key={category.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <i className={`${category.icon} text-primary`}></i>\n                      </div>\n                      <span className=\"text-lg\">{category.title}</span>\n                    </CardTitle>\n                    <p className=\"text-muted-foreground text-sm\">{category.description}</p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div>\n                        <div className=\"text-xl font-bold text-foreground\">{category.posts}</div>\n                        <div className=\"text-xs text-muted-foreground\">Posts</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xl font-bold text-foreground\">{category.members}</div>\n                        <div className=\"text-xs text-muted-foreground\">Members</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center text-xs text-muted-foreground border-t pt-3\">\n                      Latest activity: {category.latestActivity}\n                    </div>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      data-testid={`enter-${category.id}`}\n                    >\n                      Enter Discussion\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Recent Discussions */}\n          <section className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Recent Discussions</h2>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all\">\n                View All Discussions\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {recentDiscussions.map((discussion, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-3\">\n                        <div className=\"flex items-start space-x-3\">\n                          {discussion.featured && (\n                            <Badge className=\"bg-amber-500 text-amber-950 text-xs\">\n                              <i className=\"fas fa-star mr-1\"></i>\n                              Featured\n                            </Badge>\n                          )}\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {discussion.category}\n                          </Badge>\n                        </div>\n                        \n                        <h3 className=\"text-lg font-semibold text-foreground hover:text-primary transition-colors\">\n                          {discussion.title}\n                        </h3>\n                        \n                        <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"w-6 h-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {discussion.author.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span>by {discussion.author}</span>\n                          </div>\n                          <span><i className=\"fas fa-reply mr-1\"></i>{discussion.replies} replies</span>\n                          <span><i className=\"fas fa-eye mr-1\"></i>{discussion.views} views</span>\n                          <span><i className=\"fas fa-clock mr-1\"></i>{discussion.lastActivity}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Community Stats */}\n          <section className=\"bg-muted/30 rounded-xl p-8\">\n            <div className=\"text-center space-y-6\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Community Impact</h2>\n              \n              <div className=\"grid md:grid-cols-4 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">2,847</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Members</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">1,256</div>\n                  <div className=\"text-sm text-muted-foreground\">Discussions</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">8,492</div>\n                  <div className=\"text-sm text-muted-foreground\">Posts</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">45</div>\n                  <div className=\"text-sm text-muted-foreground\">Countries</div>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Member Access */}\n          <section className=\"text-center space-y-6\">\n            <Card className=\"max-w-2xl mx-auto\">\n              <CardContent className=\"p-8\">\n                <div className=\"space-y-4\">\n                  <i className=\"fas fa-users text-primary text-3xl\"></i>\n                  <h3 className=\"text-xl font-bold text-foreground\">Join the Conversation</h3>\n                  <p className=\"text-muted-foreground\">\n                    Access to the community forum requires CIMA membership or student enrollment. \n                    Connect with professionals and expand your ADR network.\n                  </p>\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button data-testid=\"button-member-login\">\n                      <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                      Member Login\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-join-community\">\n                      Join CIMA\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":12586},"client/src/pages/course-catalog.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function CourseCatalog() {\n  const courses = [\n    {\n      id: \"international-arbitration\",\n      title: \"International Commercial Arbitration\",\n      level: \"Professional\",\n      duration: \"6 weeks\",\n      price: \"$2,850\",\n      description: \"Comprehensive training in international commercial arbitration procedures, case management, and award enforcement.\",\n      features: [\"ICC Rules\", \"UNCITRAL Guidelines\", \"Cross-border Disputes\", \"Award Writing\"],\n      category: \"Arbitration\"\n    },\n    {\n      id: \"international-mediation\",\n      title: \"International Mediation Certification\",\n      level: \"Professional\", \n      duration: \"4 weeks\",\n      price: \"$2,200\",\n      description: \"Skills-based competency training in international mediation techniques and conflict resolution.\",\n      features: [\"Mediation Techniques\", \"Cultural Sensitivity\", \"Settlement Agreements\", \"Ethics\"],\n      category: \"Mediation\"\n    },\n    {\n      id: \"fcrimarb-fellowship\",\n      title: \"FCIMArb Fellowship Program\",\n      level: \"Advanced\",\n      duration: \"12 weeks\",\n      price: \"$4,750\",\n      description: \"Premier professional qualification providing internationally recognized credentials for elite practitioners.\",\n      features: [\"Fellow Designation\", \"Global Network\", \"Lifetime Membership\", \"Professional Recognition\"],\n      category: \"Fellowship\",\n      featured: true\n    },\n    {\n      id: \"ethics-professional-standards\",\n      title: \"Ethics & Professional Standards\",\n      level: \"Foundation\",\n      duration: \"2 weeks\", \n      price: \"$850\",\n      description: \"Mandatory training covering CIMA's Code of Professional and Ethical Conduct for all members.\",\n      features: [\"Professional Conduct\", \"Confidentiality\", \"Technology Ethics\", \"Compliance\"],\n      category: \"Ethics\"\n    },\n    {\n      id: \"adr-fundamentals\",\n      title: \"ADR Fundamentals\",\n      level: \"Foundation\",\n      duration: \"3 weeks\",\n      price: \"$1,500\",\n      description: \"Introduction to alternative dispute resolution methods, principles, and best practices.\",\n      features: [\"ADR Overview\", \"Process Selection\", \"Neutral Skills\", \"Case Studies\"],\n      category: \"Foundation\"\n    },\n    {\n      id: \"technology-adr\",\n      title: \"Technology in ADR\",\n      level: \"Specialized\",\n      duration: \"2 weeks\",\n      price: \"$1,200\", \n      description: \"Modern technology applications in dispute resolution, including AI tools and digital platforms.\",\n      features: [\"Digital Platforms\", \"AI Ethics\", \"Virtual Hearings\", \"Data Security\"],\n      category: \"Technology\"\n    }\n  ];\n\n  const categories = [\"All\", \"Foundation\", \"Arbitration\", \"Mediation\", \"Fellowship\", \"Ethics\", \"Technology\"];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Course Catalog</h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Professional ADR training courses designed to build competency and expertise in international mediation and arbitration.\n            </p>\n          </div>\n\n          {/* Filter Categories */}\n          <div className=\"flex flex-wrap justify-center gap-3\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"rounded-full\"\n                data-testid={`filter-${category.toLowerCase()}`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n\n          {/* Course Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {courses.map((course) => (\n              <Card \n                key={course.id} \n                className={`hover:shadow-lg transition-shadow relative ${course.featured ? 'ring-2 ring-primary' : ''}`}\n                data-testid={`course-card-${course.id}`}\n              >\n                {course.featured && (\n                  <div className=\"absolute -top-2 -right-2 z-10\">\n                    <Badge className=\"bg-primary text-primary-foreground px-3 py-1\">\n                      <i className=\"fas fa-star mr-1\"></i>\n                      Featured\n                    </Badge>\n                  </div>\n                )}\n                \n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {course.category}\n                      </Badge>\n                      <CardTitle className=\"text-lg\">{course.title}</CardTitle>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                    <span><i className=\"fas fa-signal mr-1\"></i>{course.level}</span>\n                    <span><i className=\"fas fa-clock mr-1\"></i>{course.duration}</span>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                    {course.description}\n                  </p>\n                  \n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Key Features:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {course.features.map((feature, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {feature}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between pt-4 border-t\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-foreground\">{course.price}</div>\n                      <div className=\"text-xs text-muted-foreground\">USD</div>\n                    </div>\n                    <Button \n                      className=\"bg-primary hover:bg-primary/90\"\n                      data-testid={`button-enroll-${course.id}`}\n                    >\n                      Enroll Now\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Course Requirements */}\n          <Card className=\"bg-muted/30\">\n            <CardHeader>\n              <CardTitle>Course Completion Requirements</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"text-center space-y-2\">\n                  <i className=\"fas fa-credit-card text-primary text-2xl\"></i>\n                  <h4 className=\"font-medium\">Full Payment</h4>\n                  <p className=\"text-sm text-muted-foreground\">Complete course fee payment required before access</p>\n                </div>\n                <div className=\"text-center space-y-2\">\n                  <i className=\"fas fa-user-graduate text-primary text-2xl\"></i>\n                  <h4 className=\"font-medium\">Active Participation</h4>\n                  <p className=\"text-sm text-muted-foreground\">Attend all lectures and complete assignments</p>\n                </div>\n                <div className=\"text-center space-y-2\">\n                  <i className=\"fas fa-certificate text-primary text-2xl\"></i>\n                  <h4 className=\"font-medium\">Certification</h4>\n                  <p className=\"text-sm text-muted-foreground\">Certificate issued within 14 days of completion</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":8826},"client/src/pages/fcrimarb-fellowship.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function FCIMarbFellowship() {\n  const fellowshipBenefits = [\n    {\n      icon: \"fas fa-award\",\n      title: \"Fellow Designation\",\n      description: \"Internationally recognized FCIMArb post-nominal letters\"\n    },\n    {\n      icon: \"fas fa-users\",\n      title: \"Global Network Access\", \n      description: \"Connect with elite practitioners across major international cities\"\n    },\n    {\n      icon: \"fas fa-gavel\",\n      title: \"Tribunal Appointments\",\n      description: \"Priority consideration for international arbitration panels\"\n    },\n    {\n      icon: \"fas fa-infinity\",\n      title: \"Lifetime Membership\",\n      description: \"Permanent fellowship status with ongoing benefits\"\n    },\n    {\n      icon: \"fas fa-handshake\",\n      title: \"Referral Network\",\n      description: \"Exclusive access to high-value case referrals\"\n    },\n    {\n      icon: \"fas fa-graduation-cap\",\n      title: \"Continuing Education\",\n      description: \"Advanced professional development opportunities\"\n    }\n  ];\n\n  const requirementSteps = [\n    {\n      step: 1,\n      title: \"Foundation Training\",\n      description: \"Complete CIMA certified international mediation or arbitration course\",\n      duration: \"4-6 weeks\"\n    },\n    {\n      step: 2,\n      title: \"Skills Assessment\",\n      description: \"Demonstrate competency through practical exercises and case studies\",\n      duration: \"2 weeks\"\n    },\n    {\n      step: 3,\n      title: \"Ethics Certification\",\n      description: \"Complete mandatory Professional and Ethical Conduct training\",\n      duration: \"1 week\"\n    },\n    {\n      step: 4,\n      title: \"Fellowship Portfolio\",\n      description: \"Submit comprehensive portfolio demonstrating professional readiness\",\n      duration: \"3 weeks\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary to-blue-900 text-primary-foreground relative overflow-hidden\">\n        {/* Ribbon Badge */}\n        <div className=\"absolute top-8 right-8 z-10\">\n          <div className=\"bg-amber-500 text-amber-950 px-4 py-2 rounded-full text-sm font-bold flex items-center space-x-2 shadow-lg transform rotate-12\">\n            <i className=\"fas fa-ribbon\"></i>\n            <span>International Recognition</span>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Badge className=\"bg-white/20 text-white border-white/30\">\n                  Premier Qualification\n                </Badge>\n                <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight\" data-testid=\"title\">\n                  FCIMArb Fellowship\n                </h1>\n                <p className=\"text-lg text-blue-100 font-medium\">\n                  Fellow of the Center for International Mediators and Arbitrators\n                </p>\n                <p className=\"text-xl text-blue-100 leading-relaxed\">\n                  Our most prestigious qualification. Join an elite community of certified arbitrators and mediators with global practice opportunities.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <div className=\"text-3xl font-bold\">12 Weeks</div>\n                  <div className=\"text-blue-200\">Intensive Program</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold\">$4,750</div>\n                  <div className=\"text-blue-200\">Professional Investment</div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  data-testid=\"button-apply-fellowship\"\n                  className=\"bg-amber-500 text-white px-8 py-4 rounded-lg font-semibold hover:bg-amber-600 transition-colors shadow-lg\"\n                >\n                  Apply for Fellowship\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-2 border-white/30 bg-white/10 text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-900 transition-colors backdrop-blur-sm\"\n                  data-testid=\"button-fellowship-info\"\n                >\n                  <i className=\"fas fa-info-circle mr-2\"></i>\n                  Fellowship Guide\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"FCIMArb Fellowship professional development\" \n                className=\"rounded-xl shadow-lg w-full\"\n                data-testid=\"img-fellowship-hero\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-tr from-primary/10 to-transparent rounded-xl\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-16\">\n          {/* Fellowship Benefits */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Fellowship Benefits</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Gain access to exclusive opportunities and recognition as a leading ADR professional.\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {fellowshipBenefits.map((benefit, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow text-center\">\n                  <CardHeader>\n                    <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                      <i className={`${benefit.icon} text-primary text-2xl`}></i>\n                    </div>\n                    <CardTitle className=\"text-lg\">{benefit.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{benefit.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Requirements & Process */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Fellowship Requirements</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Complete our comprehensive skills-based competency program to earn your FCIMArb designation\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {requirementSteps.map((requirement, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-6\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-lg\">\n                          {requirement.step}\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-xl font-semibold text-foreground\">{requirement.title}</h3>\n                          <Badge variant=\"outline\">{requirement.duration}</Badge>\n                        </div>\n                        <p className=\"text-muted-foreground\">{requirement.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Professional Standards */}\n          <section className=\"bg-muted/30 rounded-xl p-8 space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Professional Standards</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                All Fellows must adhere to CIMA's Code of Professional and Ethical Conduct\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-shield-alt text-primary\"></i>\n                    <span>Ethical Standards</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Professional integrity and honesty</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Independence and impartiality</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Confidentiality protection</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Competence maintenance</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-laptop text-primary\"></i>\n                    <span>Technology Ethics</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Responsible AI tool usage</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Transparency in digital processes</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Data security and privacy</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check text-primary text-sm\"></i>\n                    <span className=\"text-sm\">Bias prevention measures</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"text-center\">\n              <Link href=\"/professional-standards\">\n                <Button variant=\"outline\" data-testid=\"button-view-code\">\n                  <i className=\"fas fa-scroll mr-2\"></i>\n                  View Complete Code of Conduct\n                </Button>\n              </Link>\n            </div>\n          </section>\n\n          {/* Certificate Timeline */}\n          <section className=\"bg-primary/5 rounded-xl p-8\">\n            <div className=\"text-center space-y-6\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Certificate Issuance</h2>\n              <div className=\"max-w-2xl mx-auto\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-center space-x-4 text-lg\">\n                      <i className=\"fas fa-clock text-primary text-2xl\"></i>\n                      <div>\n                        <div className=\"font-semibold\">14-Day Guarantee</div>\n                        <div className=\"text-muted-foreground text-sm\">\n                          Upon fulfilling all course requirements, Fellows receive their certificate within 14 days of completion\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13703},"client/src/pages/global-ma-program.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function GlobalMAProgram() {\n  const programModules = [\n    {\n      title: \"Cross-Border M&A Arbitration\",\n      duration: \"3 weeks\",\n      description: \"Complex dispute resolution in international mergers and acquisitions\",\n      topics: [\"Due Diligence Disputes\", \"Earn-out Conflicts\", \"Warranty Claims\", \"Valuation Disputes\"]\n    },\n    {\n      title: \"Regulatory Compliance\",\n      duration: \"2 weeks\", \n      description: \"Navigate international regulatory frameworks in M&A transactions\",\n      topics: [\"Competition Law\", \"Securities Regulation\", \"Cross-border Compliance\", \"Regulatory Arbitration\"]\n    },\n    {\n      title: \"Cultural Competency\", \n      duration: \"2 weeks\",\n      description: \"Understanding cultural dynamics in international business disputes\",\n      topics: [\"Cultural Intelligence\", \"Communication Styles\", \"Negotiation Approaches\", \"Regional Practices\"]\n    },\n    {\n      title: \"Technology & Innovation\",\n      duration: \"1 week\",\n      description: \"Modern technology applications in M&A dispute resolution\",\n      topics: [\"Digital Due Diligence\", \"AI in Valuations\", \"Virtual Hearings\", \"Data Security\"]\n    }\n  ];\n\n  const careerOutcomes = [\n    \"M&A Arbitrator specialization\",\n    \"Corporate legal advisor\",\n    \"Investment banking disputes counsel\", \n    \"International transaction mediator\",\n    \"Cross-border compliance specialist\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Badge className=\"bg-white/20 text-white border-white/30\">\n                  Specialized Program\n                </Badge>\n                <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight\" data-testid=\"title\">\n                  Global M&A Program\n                </h1>\n                <p className=\"text-xl text-blue-100 leading-relaxed\">\n                  Master the complexities of mergers and acquisitions dispute resolution in international markets.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <div className=\"text-3xl font-bold\">8 Weeks</div>\n                  <div className=\"text-blue-200\">Program Duration</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold\">$3,500</div>\n                  <div className=\"text-blue-200\">Investment</div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  data-testid=\"button-enroll\"\n                  className=\"bg-amber-500 text-white px-8 py-4 rounded-lg font-semibold hover:bg-amber-600 transition-colors shadow-lg\"\n                >\n                  Enroll in Program\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-2 border-white/30 bg-white/10 text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-900 transition-colors backdrop-blur-sm\"\n                  data-testid=\"button-download-curriculum\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download Curriculum\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Global business and M&A transactions\" \n                className=\"rounded-xl shadow-lg w-full\"\n                data-testid=\"img-ma-hero\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-tr from-primary/10 to-transparent rounded-xl\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-16\">\n          {/* Program Overview */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Program Overview</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Develop specialized expertise in resolving complex disputes arising from international mergers and acquisitions.\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-handshake text-primary\"></i>\n                    <span>Deal Disputes</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Master resolution of M&A transaction disputes including breach of warranties, earn-out disagreements, and closing condition conflicts.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-globe text-primary\"></i>\n                    <span>Cross-Border Expertise</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Navigate multi-jurisdictional regulatory frameworks and cultural considerations in international transactions.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-chart-line text-primary\"></i>\n                    <span>Valuation Methods</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">\n                    Advanced techniques for resolving valuation disputes and damage calculations in complex M&A scenarios.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Program Modules */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Program Modules</h2>\n            \n            <div className=\"space-y-6\">\n              {programModules.map((module, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-xl\">{module.title}</CardTitle>\n                        <p className=\"text-muted-foreground mt-2\">{module.description}</p>\n                      </div>\n                      <Badge variant=\"outline\">{module.duration}</Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Key Topics:</h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {module.topics.map((topic, topicIndex) => (\n                          <div key={topicIndex} className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-check text-primary text-sm\"></i>\n                            <span className=\"text-sm text-muted-foreground\">{topic}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Career Outcomes */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Career Outcomes</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Graduates are positioned for specialized roles in M&A dispute resolution\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Professional Opportunities</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3\">\n                    {careerOutcomes.map((outcome, index) => (\n                      <li key={index} className=\"flex items-center space-x-3\">\n                        <i className=\"fas fa-arrow-right text-primary\"></i>\n                        <span>{outcome}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Industry Recognition</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-muted-foreground\">\n                    This specialized program is recognized by leading investment banks, law firms, and multinational corporations worldwide.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-star text-accent\"></i>\n                      <span className=\"text-sm\">CIMA Professional Certification</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-star text-accent\"></i>\n                      <span className=\"text-sm\">Industry-recognized credentials</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-star text-accent\"></i>\n                      <span className=\"text-sm\">Global network access</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11409},"client/src/pages/professional-standards.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function ProfessionalStandards() {\n  const ethicalPrinciples = [\n    {\n      title: \"Integrity\",\n      description: \"Act with honesty, transparency, and professional competence in all ADR processes\",\n      icon: \"fas fa-handshake\"\n    },\n    {\n      title: \"Independence\", \n      description: \"Maintain impartiality and disclose any conflicts of interest or bias\",\n      icon: \"fas fa-balance-scale\"\n    },\n    {\n      title: \"Competence\",\n      description: \"Ensure qualifications and expertise are appropriate for each case undertaken\",\n      icon: \"fas fa-graduation-cap\"\n    },\n    {\n      title: \"Confidentiality\",\n      description: \"Protect sensitive information and respect the privacy of all parties\",\n      icon: \"fas fa-lock\"\n    }\n  ];\n\n  const technologyGuidelines = [\n    {\n      title: \"AI Tool Usage\",\n      description: \"Transparent disclosure of AI assistance in case analysis and documentation\",\n      requirements: [\"Inform parties of AI usage\", \"Maintain human oversight\", \"Ensure accuracy\"]\n    },\n    {\n      title: \"Digital Platform Security\",\n      description: \"Secure communication and data protection in virtual proceedings\",\n      requirements: [\"End-to-end encryption\", \"Access controls\", \"Data backup protocols\"]\n    },\n    {\n      title: \"Virtual Hearing Standards\", \n      description: \"Professional conduct requirements for online arbitration and mediation\",\n      requirements: [\"Technical reliability\", \"Professional environment\", \"Equal access\"]\n    }\n  ];\n\n  const disciplinaryProcedures = [\n    {\n      step: 1,\n      title: \"Violation Report\",\n      description: \"Filing of formal complaint with evidence of misconduct\"\n    },\n    {\n      step: 2,\n      title: \"Initial Review\",\n      description: \"Preliminary assessment by CIMA ethics committee\"\n    },\n    {\n      step: 3,\n      title: \"Investigation\",\n      description: \"Comprehensive review including response from accused party\"\n    },\n    {\n      step: 4,\n      title: \"Disciplinary Hearing\",\n      description: \"Formal hearing with opportunity for defense and witnesses\"\n    },\n    {\n      step: 5,\n      title: \"Resolution\",\n      description: \"Final decision with appropriate sanctions or dismissal\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Professional Standards</h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              CIMA's Code of Professional and Ethical Conduct sets the highest standards for ADR professionals worldwide.\n            </p>\n          </div>\n\n          {/* Code Structure */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Code Structure</h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"border-primary/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-primary font-bold\">1</span>\n                    </div>\n                    <span>Part One: Committee Members</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Standards for CIMA committee members and organizational representatives\n                  </p>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-primary text-xs\"></i>\n                      <span>Governance responsibilities</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-primary text-xs\"></i>\n                      <span>Institutional integrity</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-primary text-xs\"></i>\n                      <span>Professional representation</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-secondary/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-secondary font-bold\">2</span>\n                    </div>\n                    <span>Part Two: Neutrals</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Standards for practicing mediators and arbitrators\n                  </p>\n                  <ul className=\"space-y-2 text-sm\">\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-secondary text-xs\"></i>\n                      <span>Case conduct requirements</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-secondary text-xs\"></i>\n                      <span>Impartiality obligations</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check text-secondary text-xs\"></i>\n                      <span>Professional competence</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Ethical Principles */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Core Ethical Principles</h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {ethicalPrinciples.map((principle, index) => (\n                <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                      <i className={`${principle.icon} text-primary text-2xl`}></i>\n                    </div>\n                    <CardTitle className=\"text-lg\">{principle.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground text-sm\">{principle.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Technology Guidelines */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Technology & AI Guidelines</h2>\n            \n            <div className=\"space-y-6\">\n              {technologyGuidelines.map((guideline, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-3\">\n                      <i className=\"fas fa-laptop text-primary\"></i>\n                      <span>{guideline.title}</span>\n                    </CardTitle>\n                    <p className=\"text-muted-foreground\">{guideline.description}</p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Requirements:</h4>\n                      <div className=\"grid md:grid-cols-3 gap-3\">\n                        {guideline.requirements.map((req, reqIndex) => (\n                          <div key={reqIndex} className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-arrow-right text-primary text-xs\"></i>\n                            <span className=\"text-sm text-muted-foreground\">{req}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Student Code of Conduct */}\n          <section className=\"bg-muted/30 rounded-xl p-8 space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Student Code of Conduct</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Academic integrity and professional behavior expectations for all CIMA students\n              </p>\n            </div>\n\n            <Tabs defaultValue=\"academic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"academic\">Academic Integrity</TabsTrigger>\n                <TabsTrigger value=\"professional\">Professional Behavior</TabsTrigger>\n                <TabsTrigger value=\"technology\">Technology Usage</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"academic\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Academic Honesty Requirements</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm text-green-700 dark:text-green-400\">Required</h4>\n                        <ul className=\"space-y-1 text-sm\">\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-check text-green-600 text-xs\"></i>\n                            <span>Original work submission</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-check text-green-600 text-xs\"></i>\n                            <span>Proper citation of sources</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-check text-green-600 text-xs\"></i>\n                            <span>Individual effort on assessments</span>\n                          </li>\n                        </ul>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm text-red-700 dark:text-red-400\">Prohibited</h4>\n                        <ul className=\"space-y-1 text-sm\">\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-times text-red-600 text-xs\"></i>\n                            <span>Plagiarism or copying</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-times text-red-600 text-xs\"></i>\n                            <span>Unauthorized collaboration</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <i className=\"fas fa-times text-red-600 text-xs\"></i>\n                            <span>Fabrication of information</span>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"professional\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Professional Conduct Standards</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-muted-foreground\">\n                      Students must maintain professional standards in all interactions and communications.\n                    </p>\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Communication Standards</h4>\n                        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                          <li>• Respectful interaction with peers and faculty</li>\n                          <li>• Professional email and forum etiquette</li>\n                          <li>• Constructive participation in discussions</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Attendance & Participation</h4>\n                        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                          <li>• Active engagement in coursework</li>\n                          <li>• Timely completion of assignments</li>\n                          <li>• Regular attendance at virtual sessions</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"technology\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Technology Usage Policies</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-muted-foreground\">\n                      Guidelines for responsible use of digital platforms and AI tools in academic work.\n                    </p>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium mb-2\">AI Tool Guidelines</h4>\n                        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                          <li>• Transparent disclosure of AI assistance</li>\n                          <li>• Maintain academic integrity when using AI</li>\n                          <li>• Ensure accuracy and originality of final work</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Platform Security</h4>\n                        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                          <li>• Protect login credentials and personal data</li>\n                          <li>• Use secure networks for course access</li>\n                          <li>• Report security incidents immediately</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </section>\n\n          {/* Disciplinary Procedures */}\n          <section className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Disciplinary Procedures</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Process for addressing violations of professional and academic conduct standards\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {disciplinaryProcedures.map((procedure, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-6\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-lg\">\n                          {procedure.step}\n                        </div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-semibold text-foreground mb-2\">{procedure.title}</h3>\n                        <p className=\"text-muted-foreground\">{procedure.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Reporting Mechanism */}\n          <section className=\"text-center space-y-6\">\n            <Card className=\"max-w-2xl mx-auto border-amber-200 bg-amber-50 dark:bg-amber-950/20\">\n              <CardContent className=\"p-8\">\n                <div className=\"space-y-4\">\n                  <i className=\"fas fa-exclamation-triangle text-amber-600 text-3xl\"></i>\n                  <h3 className=\"text-xl font-bold text-foreground\">Report Violations</h3>\n                  <p className=\"text-muted-foreground\">\n                    If you witness or experience violations of CIMA's professional standards, \n                    please report them through our confidential reporting system.\n                  </p>\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button data-testid=\"button-report-violation\">\n                      <i className=\"fas fa-flag mr-2\"></i>\n                      Report Violation\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-ethics-hotline\">\n                      Ethics Hotline\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18925},"client/src/pages/resources.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Resources() {\n  const resourceCategories = [\n    {\n      title: \"Professional Standards\",\n      icon: \"fas fa-shield-alt\",\n      description: \"Ethics codes, conduct guidelines, and professional requirements\",\n      resources: [\n        \"Code of Professional and Ethical Conduct\",\n        \"Technology and AI Usage Guidelines\", \n        \"Confidentiality and Data Protection Policies\",\n        \"Professional Misconduct Procedures\"\n      ]\n    },\n    {\n      title: \"ADR Procedures\",\n      icon: \"fas fa-gavel\", \n      description: \"Rules, procedures, and best practices for mediation and arbitration\",\n      resources: [\n        \"CIMA Arbitration Rules\",\n        \"International Mediation Procedures\",\n        \"Case Management Guidelines\",\n        \"Award Enforcement Protocols\"\n      ]\n    },\n    {\n      title: \"Training Materials\",\n      icon: \"fas fa-book-open\",\n      description: \"Educational content, case studies, and skill development resources\",\n      resources: [\n        \"Skills-Based Competency Framework\",\n        \"International Case Study Library\", \n        \"Practice Scenarios and Simulations\",\n        \"Continuing Education Modules\"\n      ]\n    },\n    {\n      title: \"Technology Tools\",\n      icon: \"fas fa-laptop\",\n      description: \"Digital platforms, AI tools, and technology for modern ADR practice\",\n      resources: [\n        \"Virtual Hearing Platforms\",\n        \"AI-Assisted Case Analysis\",\n        \"Digital Document Management\",\n        \"Communication and Collaboration Tools\"\n      ]\n    },\n    {\n      title: \"Legal Frameworks\",\n      icon: \"fas fa-balance-scale\",\n      description: \"International laws, treaties, and regulatory frameworks\",\n      resources: [\n        \"New York Convention Guide\",\n        \"UNCITRAL Model Law Resources\",\n        \"Cross-Border Enforcement Guidelines\",\n        \"Regulatory Compliance Checklists\"\n      ]\n    },\n    {\n      title: \"Professional Development\",\n      icon: \"fas fa-user-graduate\",\n      description: \"Career advancement, networking, and continuous learning resources\",\n      resources: [\n        \"Fellowship Application Guidelines\",\n        \"Professional Network Directory\",\n        \"Career Pathway Maps\",\n        \"Industry Best Practices\"\n      ]\n    }\n  ];\n\n  const featuredResources = [\n    {\n      title: \"CIMA Code of Conduct\",\n      type: \"Policy Document\",\n      description: \"Comprehensive guide to professional and ethical standards for all CIMA members\",\n      downloadSize: \"2.3 MB\",\n      lastUpdated: \"December 2024\"\n    },\n    {\n      title: \"International Arbitration Handbook\",\n      type: \"Training Manual\",\n      description: \"Complete guide to international arbitration practice and procedures\",\n      downloadSize: \"8.7 MB\", \n      lastUpdated: \"November 2024\"\n    },\n    {\n      title: \"Technology Ethics Framework\",\n      type: \"Guidelines\",\n      description: \"Best practices for AI and technology use in ADR proceedings\",\n      downloadSize: \"1.5 MB\",\n      lastUpdated: \"December 2024\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-16\">\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold text-foreground\" data-testid=\"title\">Professional Resources</h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Access comprehensive materials, guidelines, and tools to support your ADR practice and professional development.\n            </p>\n          </div>\n\n          {/* Featured Resources */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Featured Resources</h2>\n            \n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {featuredResources.map((resource, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"space-y-2\">\n                      <Badge variant=\"secondary\" className=\"w-fit text-xs\">\n                        {resource.type}\n                      </Badge>\n                      <CardTitle className=\"text-lg\">{resource.title}</CardTitle>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-muted-foreground text-sm\">{resource.description}</p>\n                    \n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <span><i className=\"fas fa-file-pdf mr-1\"></i>{resource.downloadSize}</span>\n                      <span><i className=\"fas fa-calendar mr-1\"></i>{resource.lastUpdated}</span>\n                    </div>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      data-testid={`download-${resource.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Resource Categories */}\n          <section className=\"space-y-8\">\n            <h2 className=\"text-3xl font-bold text-foreground text-center\">Resource Categories</h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {resourceCategories.map((category, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow h-full\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <i className={`${category.icon} text-primary`}></i>\n                      </div>\n                      <span>{category.title}</span>\n                    </CardTitle>\n                    <p className=\"text-muted-foreground text-sm\">{category.description}</p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <ul className=\"space-y-2\">\n                      {category.resources.map((resource, resourceIndex) => (\n                        <li key={resourceIndex} className=\"flex items-start space-x-2\">\n                          <i className=\"fas fa-chevron-right text-primary text-xs mt-1\"></i>\n                          <span className=\"text-sm text-muted-foreground\">{resource}</span>\n                        </li>\n                      ))}\n                    </ul>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full mt-auto\"\n                      data-testid={`explore-${category.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      Explore Resources\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Quick Access Tools */}\n          <section className=\"bg-muted/30 rounded-xl p-8 space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">Quick Access Tools</h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Essential tools and calculators for ADR professionals\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <Card className=\"text-center hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <i className=\"fas fa-calculator text-primary text-2xl mb-3\"></i>\n                  <h4 className=\"font-medium mb-2\">Fee Calculator</h4>\n                  <p className=\"text-xs text-muted-foreground\">Calculate arbitration fees and costs</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <i className=\"fas fa-calendar-check text-primary text-2xl mb-3\"></i>\n                  <h4 className=\"font-medium mb-2\">Timeline Planner</h4>\n                  <p className=\"text-xs text-muted-foreground\">Plan ADR process timelines</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <i className=\"fas fa-users text-primary text-2xl mb-3\"></i>\n                  <h4 className=\"font-medium mb-2\">Panel Builder</h4>\n                  <p className=\"text-xs text-muted-foreground\">Select arbitrator panels</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <i className=\"fas fa-file-contract text-primary text-2xl mb-3\"></i>\n                  <h4 className=\"font-medium mb-2\">Template Library</h4>\n                  <p className=\"text-xs text-muted-foreground\">Access standard forms and templates</p>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Member Access Notice */}\n          <section className=\"text-center space-y-6\">\n            <Card className=\"max-w-2xl mx-auto border-primary/20\">\n              <CardContent className=\"p-8\">\n                <div className=\"space-y-4\">\n                  <i className=\"fas fa-info-circle text-primary text-3xl\"></i>\n                  <h3 className=\"text-xl font-bold text-foreground\">Member Access Required</h3>\n                  <p className=\"text-muted-foreground\">\n                    Some resources are exclusively available to CIMA certified members and enrolled students. \n                    Please log in to access your personalized resource library.\n                  </p>\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button data-testid=\"button-login-access\">\n                      <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                      Member Login\n                    </Button>\n                    <Button variant=\"outline\" data-testid=\"button-become-member\">\n                      Become a Member\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11621},"client/src/pages/quiz.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\n\ninterface QuizQuestion {\n  id: string;\n  question: string;\n  type: string;\n  points: number;\n  order: number;\n  answers?: QuizAnswer[];\n}\n\ninterface QuizAnswer {\n  id: string;\n  answer: string;\n  isCorrect: boolean;\n  order: number;\n}\n\ninterface Quiz {\n  id: string;\n  title: string;\n  description: string;\n  timeLimit: number;\n  passingScore: number;\n  maxAttempts: number;\n  questions: QuizQuestion[];\n}\n\nexport default function QuizPage() {\n  const { quizId } = useParams();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [answers, setAnswers] = useState<Record<string, string>>({});\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [quizSubmitted, setQuizSubmitted] = useState(false);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to be logged in to take quizzes.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: quiz, isLoading: quizLoading } = useQuery({\n    queryKey: [`/api/quizzes/${quizId}`],\n    enabled: !!quizId && isAuthenticated,\n  });\n\n  const { data: attempts = [] } = useQuery({\n    queryKey: [`/api/quizzes/${quizId}/attempts`],\n    enabled: !!quizId && isAuthenticated,\n  });\n\n  // Timer effect\n  useEffect(() => {\n    if (!quizStarted || timeRemaining <= 0 || quizSubmitted) return;\n\n    const timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          handleSubmitQuiz();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [quizStarted, timeRemaining, quizSubmitted]);\n\n  // Submit quiz mutation\n  const submitQuizMutation = useMutation({\n    mutationFn: async (quizAnswers: Record<string, string>) => {\n      const response = await apiRequest(\"POST\", `/api/quizzes/${quizId}/submit`, {\n        answers: quizAnswers,\n        timeSpent: quiz?.timeLimit - timeRemaining\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setQuizSubmitted(true);\n      queryClient.invalidateQueries({ queryKey: [`/api/quizzes/${quizId}/attempts`] });\n      toast({\n        title: \"Quiz Submitted\",\n        description: \"Your quiz has been submitted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startQuiz = () => {\n    setQuizStarted(true);\n    setTimeRemaining(quiz?.timeLimit || 1800); // Default 30 minutes\n    setCurrentQuestion(0);\n    setAnswers({});\n  };\n\n  const handleAnswerChange = (questionId: string, answer: string) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  };\n\n  const handleSubmitQuiz = () => {\n    if (quizSubmitted) return;\n    submitQuizMutation.mutate(answers);\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestion < (quiz?.questions?.length || 0) - 1) {\n      setCurrentQuestion(prev => prev + 1);\n    }\n  };\n\n  const prevQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(prev => prev - 1);\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"animate-pulse p-8\">\n          <div className=\"h-64 bg-muted rounded mb-4\"></div>\n          <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (quizLoading || !quiz) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"animate-pulse p-8\">\n          <div className=\"h-64 bg-muted rounded mb-4\"></div>\n          <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if user has exceeded max attempts\n  const hasExceededAttempts = attempts.length >= (quiz.maxAttempts || 3);\n\n  if (hasExceededAttempts && !quizSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16 text-center\" data-testid=\"max-attempts-reached\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Maximum Attempts Reached</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            You have reached the maximum number of attempts ({quiz.maxAttempts}) for this quiz.\n          </p>\n          <Button onClick={() => setLocation('/dashboard')} data-testid=\"back-to-dashboard\">\n            Back to Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (quizSubmitted) {\n    const latestAttempt = attempts[0];\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16\" data-testid=\"quiz-results\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-center\">Quiz Complete!</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-6\">\n              <div className=\"text-6xl font-bold text-primary\">\n                {latestAttempt?.score || 'N/A'}%\n              </div>\n              <div>\n                <Badge \n                  variant={latestAttempt?.passed ? \"default\" : \"destructive\"}\n                  className=\"text-lg px-4 py-2\"\n                >\n                  {latestAttempt?.passed ? \"PASSED\" : \"FAILED\"}\n                </Badge>\n              </div>\n              <p className=\"text-muted-foreground\">\n                Passing score: {quiz.passingScore}%\n              </p>\n              <div className=\"flex justify-center space-x-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setLocation('/dashboard')}\n                  data-testid=\"back-to-dashboard\"\n                >\n                  Back to Dashboard\n                </Button>\n                {!latestAttempt?.passed && attempts.length < quiz.maxAttempts && (\n                  <Button \n                    onClick={() => {\n                      setQuizSubmitted(false);\n                      setQuizStarted(false);\n                      setAnswers({});\n                      setCurrentQuestion(0);\n                    }}\n                    data-testid=\"retake-quiz\"\n                  >\n                    Retake Quiz\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!quizStarted) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-16\" data-testid=\"quiz-intro\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{quiz.title}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <p className=\"text-muted-foreground\">{quiz.description}</p>\n              \n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold\">Quiz Details</h3>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    <div>Questions: {quiz.questions?.length || 0}</div>\n                    <div>Time Limit: {formatTime(quiz.timeLimit)}</div>\n                    <div>Passing Score: {quiz.passingScore}%</div>\n                    <div>Max Attempts: {quiz.maxAttempts}</div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold\">Your Attempts</h3>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {attempts.length > 0 ? (\n                      <div>\n                        <div>Attempts: {attempts.length} / {quiz.maxAttempts}</div>\n                        <div>Best Score: {Math.max(...attempts.map(a => parseInt(a.score || '0')))}%</div>\n                      </div>\n                    ) : (\n                      <div>No previous attempts</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-center\">\n                <Button \n                  onClick={startQuiz} \n                  size=\"lg\"\n                  data-testid=\"start-quiz\"\n                >\n                  Start Quiz\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const currentQ = quiz.questions?.[currentQuestion];\n  const progressPercentage = ((currentQuestion + 1) / (quiz.questions?.length || 1)) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 py-8\" data-testid=\"quiz-taking\">\n        {/* Quiz Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-2xl font-bold text-foreground\">{quiz.title}</h1>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-semibold text-primary\" data-testid=\"timer\">\n                {formatTime(timeRemaining)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Time Remaining</div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-muted-foreground\">\n              <span>Question {currentQuestion + 1} of {quiz.questions?.length}</span>\n              <span>{progressPercentage.toFixed(0)}% Complete</span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" data-testid=\"quiz-progress\" />\n          </div>\n        </div>\n\n        {/* Current Question */}\n        {currentQ && (\n          <Card className=\"mb-6\" data-testid=\"current-question\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                {currentQ.question}\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {currentQ.points} points\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {currentQ.type === 'multiple_choice' && currentQ.answers && (\n                <RadioGroup\n                  value={answers[currentQ.id] || \"\"}\n                  onValueChange={(value) => handleAnswerChange(currentQ.id, value)}\n                  data-testid=\"multiple-choice-answers\"\n                >\n                  {currentQ.answers\n                    .sort((a, b) => a.order - b.order)\n                    .map((answer) => (\n                      <div key={answer.id} className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value={answer.id} id={answer.id} />\n                        <Label htmlFor={answer.id} className=\"flex-1 cursor-pointer\">\n                          {answer.answer}\n                        </Label>\n                      </div>\n                    ))}\n                </RadioGroup>\n              )}\n\n              {currentQ.type === 'essay' && (\n                <Textarea\n                  placeholder=\"Type your answer here...\"\n                  value={answers[currentQ.id] || \"\"}\n                  onChange={(e) => handleAnswerChange(currentQ.id, e.target.value)}\n                  className=\"min-h-[150px]\"\n                  data-testid=\"essay-answer\"\n                />\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            {currentQuestion > 0 && (\n              <Button \n                variant=\"outline\" \n                onClick={prevQuestion}\n                data-testid=\"prev-question\"\n              >\n                Previous\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            {currentQuestion < (quiz.questions?.length || 0) - 1 ? (\n              <Button \n                onClick={nextQuestion}\n                data-testid=\"next-question\"\n              >\n                Next\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmitQuiz}\n                disabled={submitQuizMutation.isPending}\n                data-testid=\"submit-quiz\"\n              >\n                {submitQuizMutation.isPending ? \"Submitting...\" : \"Submit Quiz\"}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Question Overview */}\n        <Card className=\"mt-6\" data-testid=\"question-overview\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Question Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-5 md:grid-cols-10 gap-2\">\n              {quiz.questions?.map((q, index) => (\n                <Button\n                  key={q.id}\n                  variant={index === currentQuestion ? \"default\" : answers[q.id] ? \"secondary\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setCurrentQuestion(index)}\n                  className=\"aspect-square\"\n                  data-testid={`question-nav-${index + 1}`}\n                >\n                  {index + 1}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15185},"scripts/seed-database.ts":{"content":"import { db } from \"../server/db\";\nimport { \n  users, \n  categories, \n  courses, \n  modules, \n  lessons, \n  enrollments,\n  reviews,\n  quizzes,\n  quizQuestions,\n  quizAnswers\n} from \"../shared/schema\";\n\nasync function seedDatabase() {\n  try {\n    console.log(\"Starting database seeding...\");\n\n    // Clear existing data\n    await db.delete(quizAnswers);\n    await db.delete(quizQuestions);\n    await db.delete(quizzes);\n    await db.delete(lessons);\n    await db.delete(modules);\n    await db.delete(enrollments);\n    await db.delete(reviews);\n    await db.delete(courses);\n    await db.delete(categories);\n    await db.delete(users);\n\n    // Create sample users\n    const sampleUsers = await db.insert(users).values([\n      {\n        id: \"user-1\",\n        email: \"john.instructor@example.com\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        role: \"instructor\",\n        bio: \"Experienced mediator with 15+ years in conflict resolution\",\n        country: \"United States\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150\"\n      },\n      {\n        id: \"user-2\", \n        email: \"jane.student@example.com\",\n        firstName: \"Jane\",\n        lastName: \"Doe\",\n        role: \"student\",\n        bio: \"Law student interested in alternative dispute resolution\",\n        country: \"Canada\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150\"\n      },\n      {\n        id: \"user-3\",\n        email: \"admin@cimalearn.com\",\n        firstName: \"CIMA\",\n        lastName: \"Admin\",\n        role: \"admin\",\n        bio: \"Administrator for CIMA Learn platform\",\n        country: \"United Kingdom\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\"\n      }\n    ]).returning();\n\n    // Create categories based on real CIMA offerings\n    const sampleCategories = await db.insert(categories).values([\n      {\n        name: \"International Arbitration\",\n        description: \"Advanced training in domestic and international arbitration law and practice\",\n        slug: \"international-arbitration\"\n      },\n      {\n        name: \"Mediation & ADR\", \n        description: \"Comprehensive mediation training and alternative dispute resolution methods\",\n        slug: \"mediation-adr\"\n      },\n      {\n        name: \"Professional Membership\",\n        description: \"Fast-track pathways to MCIMArb membership and professional certification\",\n        slug: \"professional-membership\"\n      },\n      {\n        name: \"Specialized Training\",\n        description: \"Specialized courses in maritime mediation, AI tools, and practical skills\",\n        slug: \"specialized-training\"\n      }\n    ]).returning();\n\n    // Create courses based on real CIMA offerings\n    const sampleCourses = await db.insert(courses).values([\n      {\n        title: \"Advanced Law, Practice & Procedure in Domestic and International Arbitration\",\n        description: \"Welcome to the 2025 Autumn Academy! We are delighted to have you join the Global Arbitration Programme at the Center for International Mediators and Arbitrators (CIMA). This comprehensive course covers advanced arbitration law, practice, and procedures for both domestic and international disputes.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[0].id,\n        price: 2950.00,\n        level: \"advanced\",\n        duration: 72,\n        isFeatured: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1589829545856-d10d557cf95f?w=400\",\n        avgRating: 4.9,\n        enrollmentCount: 89,\n        isPublished: true\n      },\n      {\n        title: \"Law, Practice and Procedure in Domestic and International Mediation\",\n        description: \"Law, Practice and Procedure in Domestic and International Mediation - Empowering the Next Generation of International Mediators. Are you eager to enhance your mediation skills and become a recognized international mediator? This comprehensive course provides in-depth training in mediation law, practice, and procedures.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[1].id,\n        price: 1850.00,\n        level: \"intermediate\",\n        duration: 60,\n        isFeatured: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1556157382-97eda2d62296?w=400\",\n        avgRating: 4.8,\n        enrollmentCount: 156,\n        isPublished: true\n      },\n      {\n        title: \"Expedited Route to Membership (MCIMArb) – On Demand\",\n        description: \"We are pleased to announce the Expedited Route to MCIMArb Membership—a fast-track pathway designed for legal professionals, ADR practitioners, and qualified individuals seeking to advance their careers in international arbitration and mediation.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[2].id,\n        price: 1200.00,\n        level: \"intermediate\",\n        duration: 40,\n        isFeatured: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400\",\n        avgRating: 4.7,\n        enrollmentCount: 234,\n        isPublished: true\n      },\n      {\n        title: \"Online Course on Maritime Mediation\",\n        description: \"Are you passionate about conflict resolution at sea? Are you eager to understand how maritime disputes are mediated across international waters? This specialized course provides comprehensive training in maritime mediation techniques and international maritime law.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[3].id,\n        price: 950.00,\n        level: \"intermediate\",\n        duration: 35,\n        isFeatured: false,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400\",\n        avgRating: 4.6,\n        enrollmentCount: 67,\n        isPublished: true\n      },\n      {\n        title: \"AI Tools for ADR Practitioners\",\n        description: \"2-Day Course: AI Tools for ADR Practitioners - Enhance Efficiency. Unlock Insight. Stay Ahead. Are you curious about how artificial intelligence can revolutionize your ADR practice? This cutting-edge course explores practical AI applications for mediators and arbitrators.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[3].id,\n        price: 750.00,\n        level: \"beginner\",\n        duration: 16,\n        isFeatured: false,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400\",\n        avgRating: 4.8,\n        enrollmentCount: 198,\n        isPublished: true\n      },\n      {\n        title: \"Mock Arbitrations\",\n        description: \"The hallmark of success in any discipline is preparation. As the great Muhammad Ali once observed: 'The fight is won or lost far away from witnesses—behind the lines, in the gym, and out there on the road, long before I dance under those lights.' This intensive practical course provides hands-on arbitration experience through realistic case simulations.\",\n        instructorId: sampleUsers[0].id,\n        categoryId: sampleCategories[0].id,\n        price: 1500.00,\n        level: \"advanced\",\n        duration: 48,\n        isFeatured: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=400\",\n        avgRating: 4.9,\n        enrollmentCount: 123,\n        isPublished: true\n      }\n    ]).returning();\n\n    // Create modules and lessons for the first course\n    const module1 = await db.insert(modules).values({\n      title: \"Mediation Fundamentals\",\n      description: \"Understanding the basic principles of mediation\",\n      courseId: sampleCourses[0].id,\n      order: 1\n    }).returning();\n\n    const module2 = await db.insert(modules).values({\n      title: \"Communication Techniques\",\n      description: \"Advanced communication skills for mediators\",\n      courseId: sampleCourses[0].id,\n      order: 2\n    }).returning();\n\n    // Create lessons for module 1\n    await db.insert(lessons).values([\n      {\n        title: \"What is Mediation?\",\n        description: \"Introduction to mediation concepts and principles\",\n        moduleId: module1[0].id,\n        order: 1,\n        contentType: \"video\",\n        duration: 900,\n        videoUrl: \"https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4\",\n        content: \"In this lesson, we explore the fundamental concepts of mediation...\"\n      },\n      {\n        title: \"The Role of the Mediator\",\n        description: \"Understanding mediator responsibilities and ethics\",\n        moduleId: module1[0].id,\n        order: 2,\n        contentType: \"video\",\n        duration: 1200,\n        videoUrl: \"https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4\",\n        content: \"The mediator plays a crucial role in facilitating dialogue...\"\n      },\n      {\n        title: \"Mediation Process Overview\",\n        description: \"Step-by-step guide to the mediation process\",\n        moduleId: module1[0].id,\n        order: 3,\n        contentType: \"text\",\n        duration: 600,\n        content: \"The mediation process typically consists of several key stages...\"\n      }\n    ]);\n\n    // Create lessons for module 2\n    await db.insert(lessons).values([\n      {\n        title: \"Active Listening Techniques\",\n        description: \"Master the art of active listening in mediation\",\n        moduleId: module2[0].id,\n        order: 1,\n        contentType: \"video\",\n        duration: 1500,\n        videoUrl: \"https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4\",\n        content: \"Active listening is one of the most important skills for mediators...\"\n      },\n      {\n        title: \"Managing Emotional Conversations\",\n        description: \"Techniques for handling high-emotion situations\",\n        moduleId: module2[0].id,\n        order: 2,\n        contentType: \"video\",\n        duration: 1800,\n        videoUrl: \"https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4\",\n        content: \"When emotions run high, mediators must know how to...\"\n      }\n    ]);\n\n    // Create sample enrollment\n    await db.insert(enrollments).values({\n      userId: sampleUsers[1].id,\n      courseId: sampleCourses[0].id,\n      enrolledAt: new Date(),\n      progress: 25\n    });\n\n    // Create sample reviews\n    await db.insert(reviews).values([\n      {\n        userId: sampleUsers[1].id,\n        courseId: sampleCourses[0].id,\n        rating: 5,\n        comment: \"This course provided a solid foundation in mediation principles. The instructor is knowledgeable and the content is well-structured.\"\n      },\n      {\n        userId: sampleUsers[1].id,\n        courseId: sampleCourses[1].id,\n        rating: 4,\n        comment: \"Great course for anyone looking to advance their arbitration skills. The case studies were particularly helpful.\"\n      }\n    ]);\n\n    // Create a sample quiz for the first course\n    const sampleQuiz = await db.insert(quizzes).values({\n      title: \"Mediation Fundamentals Quiz\",\n      description: \"Test your understanding of basic mediation concepts\",\n      courseId: sampleCourses[0].id,\n      timeLimit: 1800, // 30 minutes\n      passingScore: 70,\n      maxAttempts: 3,\n      isRequired: true\n    }).returning();\n\n    // Create quiz questions\n    const questions = await db.insert(quizQuestions).values([\n      {\n        quizId: sampleQuiz[0].id,\n        question: \"What is the primary role of a mediator?\",\n        type: \"multiple_choice\",\n        points: 10,\n        order: 1\n      },\n      {\n        quizId: sampleQuiz[0].id,\n        question: \"Which of the following is NOT a principle of mediation?\",\n        type: \"multiple_choice\",\n        points: 10,\n        order: 2\n      },\n      {\n        quizId: sampleQuiz[0].id,\n        question: \"Describe the difference between mediation and arbitration.\",\n        type: \"essay\",\n        points: 20,\n        order: 3\n      }\n    ]).returning();\n\n    // Create multiple choice answers\n    await db.insert(quizAnswers).values([\n      // Question 1 answers\n      {\n        questionId: questions[0].id,\n        answer: \"To make decisions for the parties\",\n        isCorrect: false,\n        order: 1\n      },\n      {\n        questionId: questions[0].id,\n        answer: \"To facilitate communication between parties\",\n        isCorrect: true,\n        order: 2\n      },\n      {\n        questionId: questions[0].id,\n        answer: \"To advocate for one party\",\n        isCorrect: false,\n        order: 3\n      },\n      {\n        questionId: questions[0].id,\n        answer: \"To impose a solution\",\n        isCorrect: false,\n        order: 4\n      },\n      // Question 2 answers\n      {\n        questionId: questions[1].id,\n        answer: \"Neutrality\",\n        isCorrect: false,\n        order: 1\n      },\n      {\n        questionId: questions[1].id,\n        answer: \"Confidentiality\",\n        isCorrect: false,\n        order: 2\n      },\n      {\n        questionId: questions[1].id,\n        answer: \"Binding decisions\",\n        isCorrect: true,\n        order: 3\n      },\n      {\n        questionId: questions[1].id,\n        answer: \"Voluntary participation\",\n        isCorrect: false,\n        order: 4\n      }\n    ]);\n\n    console.log(\"Database seeding completed successfully!\");\n    console.log(`Created ${sampleUsers.length} users`);\n    console.log(`Created ${sampleCategories.length} categories`);\n    console.log(`Created ${sampleCourses.length} courses`);\n    console.log(\"Created modules, lessons, enrollments, and reviews\");\n\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run the seeding function\nseedDatabase()\n  .then(() => {\n    console.log(\"Seeding complete!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Seeding failed:\", error);\n    process.exit(1);\n  });","size_bytes":13765},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useRoleProtection } from \"@/hooks/useRoleProtection\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { \n  Users, \n  BookOpen, \n  UserCheck, \n  UserX, \n  Eye, \n  Download,\n  Calendar,\n  Mail,\n  Phone,\n  GraduationCap,\n  FileText,\n  Video,\n  CheckCircle,\n  XCircle,\n  Clock,\n  AlertCircle,\n  TrendingUp,\n  DollarSign\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface InstructorApplication {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  bio: string;\n  experience: string;\n  qualifications: string;\n  previousTeaching: string;\n  areasOfExpertise: string[];\n  cvUrl?: string;\n  videoIntroUrl?: string;\n  status: 'pending' | 'approved' | 'rejected';\n  submittedAt: string;\n  reviewedAt?: string;\n  reviewedBy?: string;\n  reviewComments?: string;\n}\n\ninterface AdminStats {\n  totalUsers: number;\n  totalInstructors: number;\n  pendingApplications: number;\n  totalCourses: number;\n  monthlyRevenue: number;\n  activeStudents: number;\n}\n\nexport default function AdminDashboard() {\n  const { isLoading: authLoading, hasAccess } = useRoleProtection({ \n    requiredRole: 'admin' \n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedApplication, setSelectedApplication] = useState<InstructorApplication | null>(null);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n    enabled: hasAccess,\n  });\n\n  const { data: applications = [], isLoading: applicationsLoading } = useQuery<InstructorApplication[]>({\n    queryKey: ['/api/admin/instructor-applications'],\n    enabled: hasAccess,\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/admin/users'],\n    enabled: hasAccess,\n  });\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery({\n    queryKey: ['/api/admin/courses'],\n    enabled: hasAccess,\n  });\n\n  const reviewApplication = useMutation({\n    mutationFn: async ({ applicationId, status, comments }: { \n      applicationId: string; \n      status: 'approved' | 'rejected'; \n      comments: string \n    }) => {\n      await apiRequest(\"PUT\", `/api/admin/instructor-applications/${applicationId}`, {\n        status,\n        comments\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/instructor-applications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Application Reviewed\",\n        description: \"Instructor application has been processed successfully.\",\n      });\n      setSelectedApplication(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to review application: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (authLoading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n    </div>;\n  }\n\n  if (!hasAccess) {\n    return null; // Role protection will handle redirect\n  }\n\n  const StatCard = ({ icon: Icon, title, value, subtitle, trend }: {\n    icon: any;\n    title: string;\n    value: string | number;\n    subtitle: string;\n    trend?: string;\n  }) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n        {trend && (\n          <div className=\"flex items-center mt-2 text-xs text-green-600\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            {trend}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const ApplicationCard = ({ application }: { application: InstructorApplication }) => {\n    const statusColors = {\n      pending: \"bg-yellow-100 text-yellow-800\",\n      approved: \"bg-green-100 text-green-800\",\n      rejected: \"bg-red-100 text-red-800\"\n    };\n\n    const statusIcons = {\n      pending: Clock,\n      approved: CheckCircle,\n      rejected: XCircle\n    };\n\n    const StatusIcon = statusIcons[application.status];\n\n    return (\n      <Card className=\"hover:shadow-md transition-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">\n                  {application.firstName} {application.lastName}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">{application.email}</p>\n              </div>\n            </div>\n            <Badge className={statusColors[application.status]}>\n              <StatusIcon className=\"w-3 h-3 mr-1\" />\n              {application.status.charAt(0).toUpperCase() + application.status.slice(1)}\n            </Badge>\n          </div>\n\n          <div className=\"space-y-2 mb-4\">\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Applied {new Date(application.submittedAt).toLocaleDateString()}\n            </div>\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <GraduationCap className=\"w-4 h-4 mr-2\" />\n              {application.areasOfExpertise.join(\", \")}\n            </div>\n          </div>\n\n          <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n            {application.bio}\n          </p>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              {application.cvUrl && (\n                <Button size=\"sm\" variant=\"outline\">\n                  <FileText className=\"w-3 h-3 mr-1\" />\n                  CV\n                </Button>\n              )}\n              {application.videoIntroUrl && (\n                <Button size=\"sm\" variant=\"outline\">\n                  <Video className=\"w-3 h-3 mr-1\" />\n                  Video\n                </Button>\n              )}\n            </div>\n            \n            <Dialog>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\" \n                  onClick={() => setSelectedApplication(application)}\n                >\n                  <Eye className=\"w-3 h-3 mr-1\" />\n                  Review\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    Instructor Application - {application.firstName} {application.lastName}\n                  </DialogTitle>\n                  <DialogDescription>\n                    Review the application details and approve or reject the instructor.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <div className=\"space-y-6\">\n                  {/* Personal Information */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3\">Personal Information</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Name</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {application.firstName} {application.lastName}\n                        </p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium\">Email</Label>\n                        <p className=\"text-sm text-muted-foreground\">{application.email}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium\">Phone</Label>\n                        <p className=\"text-sm text-muted-foreground\">{application.phone}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium\">Areas of Expertise</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {application.areasOfExpertise.join(\", \")}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Bio */}\n                  <div>\n                    <Label className=\"text-sm font-medium\">Bio</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{application.bio}</p>\n                  </div>\n\n                  {/* Experience */}\n                  <div>\n                    <Label className=\"text-sm font-medium\">Professional Experience</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{application.experience}</p>\n                  </div>\n\n                  {/* Qualifications */}\n                  <div>\n                    <Label className=\"text-sm font-medium\">Qualifications</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{application.qualifications}</p>\n                  </div>\n\n                  {/* Teaching Experience */}\n                  <div>\n                    <Label className=\"text-sm font-medium\">Previous Teaching Experience</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{application.previousTeaching}</p>\n                  </div>\n\n                  {/* Files */}\n                  <div>\n                    <Label className=\"text-sm font-medium\">Attachments</Label>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      {application.cvUrl && (\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Download className=\"w-3 h-3 mr-1\" />\n                          Download CV\n                        </Button>\n                      )}\n                      {application.videoIntroUrl && (\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Video className=\"w-3 h-3 mr-1\" />\n                          View Video\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Review Actions */}\n                  {application.status === 'pending' && (\n                    <div className=\"flex items-center space-x-4 pt-4 border-t\">\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button className=\"bg-green-600 hover:bg-green-700\">\n                            <UserCheck className=\"w-4 h-4 mr-2\" />\n                            Approve\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Approve Instructor Application</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to approve this instructor application? \n                              This will grant them access to create and manage courses.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction \n                              onClick={() => reviewApplication.mutate({\n                                applicationId: application.id,\n                                status: 'approved',\n                                comments: 'Application approved by admin'\n                              })}\n                            >\n                              Approve\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"destructive\">\n                            <UserX className=\"w-4 h-4 mr-2\" />\n                            Reject\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Reject Instructor Application</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to reject this instructor application? \n                              This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction \n                              onClick={() => reviewApplication.mutate({\n                                applicationId: application.id,\n                                status: 'rejected',\n                                comments: 'Application rejected by admin'\n                              })}\n                            >\n                              Reject\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  )}\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Manage instructors, courses, and platform operations\n            </p>\n          </div>\n          <Badge variant=\"outline\" className=\"mt-4 sm:mt-0\">\n            <AlertCircle className=\"w-3 h-3 mr-1\" />\n            Admin Access\n          </Badge>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"courses\">Courses</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <StatCard\n                icon={Users}\n                title=\"Total Users\"\n                value={stats?.totalUsers || 0}\n                subtitle=\"Registered users\"\n                trend=\"+12% this month\"\n              />\n              <StatCard\n                icon={GraduationCap}\n                title=\"Active Instructors\"\n                value={stats?.totalInstructors || 0}\n                subtitle=\"Approved instructors\"\n                trend=\"+5% this month\"\n              />\n              <StatCard\n                icon={Clock}\n                title=\"Pending Applications\"\n                value={stats?.pendingApplications || 0}\n                subtitle=\"Awaiting review\"\n              />\n              <StatCard\n                icon={BookOpen}\n                title=\"Total Courses\"\n                value={stats?.totalCourses || 0}\n                subtitle=\"Published courses\"\n                trend=\"+8% this month\"\n              />\n              <StatCard\n                icon={DollarSign}\n                title=\"Monthly Revenue\"\n                value={`$${stats?.monthlyRevenue?.toLocaleString() || 0}`}\n                subtitle=\"Current month\"\n                trend=\"+15% vs last month\"\n              />\n              <StatCard\n                icon={TrendingUp}\n                title=\"Active Students\"\n                value={stats?.activeStudents || 0}\n                subtitle=\"Last 30 days\"\n                trend=\"+22% this month\"\n              />\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>Latest platform activities and notifications</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">New instructor application from Sarah Johnson</p>\n                      <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">Course \"Advanced Arbitration\" published by Michael Chen</p>\n                      <p className=\"text-xs text-muted-foreground\">4 hours ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">Payment issue reported by student Emma Davis</p>\n                      <p className=\"text-xs text-muted-foreground\">6 hours ago</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"applications\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">Instructor Applications</h2>\n              <Badge variant=\"secondary\">\n                {applications.filter(app => app.status === 'pending').length} pending\n              </Badge>\n            </div>\n\n            {applicationsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-6 bg-muted rounded w-3/4 mb-4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2 mb-4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : applications.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No applications yet</h3>\n                  <p className=\"text-muted-foreground\">\n                    Instructor applications will appear here for review.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {applications.map((application) => (\n                  <ApplicationCard key={application.id} application={application} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">User Management</h2>\n              <Input placeholder=\"Search users...\" className=\"max-w-sm\" />\n            </div>\n\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">User management coming soon</h3>\n                <p className=\"text-muted-foreground\">\n                  Advanced user management features will be available here.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"courses\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">Course Management</h2>\n              <Input placeholder=\"Search courses...\" className=\"max-w-sm\" />\n            </div>\n\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Course management coming soon</h3>\n                <p className=\"text-muted-foreground\">\n                  Advanced course management and moderation features will be available here.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":23002},"client/src/pages/become-instructor.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { useLocation } from \"wouter\";\nimport { \n  GraduationCap, \n  FileText, \n  Video, \n  Upload, \n  CheckCircle, \n  Users,\n  BookOpen,\n  Award,\n  DollarSign,\n  Star,\n  Clock\n} from \"lucide-react\";\n\nconst instructorApplicationSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  bio: z.string().min(100, \"Bio must be at least 100 characters\").max(500, \"Bio must be less than 500 characters\"),\n  experience: z.string().min(100, \"Please provide detailed professional experience\"),\n  qualifications: z.string().min(50, \"Please list your qualifications and certifications\"),\n  previousTeaching: z.string().min(50, \"Please describe your teaching experience\"),\n  areasOfExpertise: z.array(z.string()).min(1, \"Select at least one area of expertise\"),\n  agreedToTerms: z.boolean().refine(val => val === true, \"You must agree to the terms and conditions\"),\n});\n\ntype InstructorApplicationForm = z.infer<typeof instructorApplicationSchema>;\n\nconst expertiseAreas = [\n  \"International Arbitration\",\n  \"Commercial Mediation\", \n  \"Cross-Border Disputes\",\n  \"Investment Arbitration\",\n  \"Construction Arbitration\",\n  \"Employment Mediation\",\n  \"Family Mediation\",\n  \"Online Dispute Resolution\",\n  \"Negotiation Techniques\",\n  \"Conflict Resolution\",\n  \"Maritime Arbitration\",\n  \"Energy Disputes\"\n];\n\nexport default function BecomeInstructor() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [step, setStep] = useState(1);\n  const [selectedExpertise, setSelectedExpertise] = useState<string[]>([]);\n\n  const form = useForm<InstructorApplicationForm>({\n    resolver: zodResolver(instructorApplicationSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      phone: \"\",\n      bio: \"\",\n      experience: \"\",\n      qualifications: \"\",\n      previousTeaching: \"\",\n      areasOfExpertise: [],\n      agreedToTerms: false,\n    },\n  });\n\n  const submitApplication = useMutation({\n    mutationFn: async (data: InstructorApplicationForm) => {\n      if (!isAuthenticated) {\n        throw new Error(\"You must be logged in to apply\");\n      }\n      \n      await apiRequest(\"POST\", \"/api/instructor-applications\", {\n        ...data,\n        areasOfExpertise: selectedExpertise,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Submitted!\",\n        description: \"We'll review your application and get back to you within 3-5 business days.\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InstructorApplicationForm) => {\n    submitApplication.mutate({\n      ...data,\n      areasOfExpertise: selectedExpertise,\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <Card className=\"text-center\">\n            <CardContent className=\"p-8\">\n              <GraduationCap className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-4\">Login Required</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                You need to be logged in to apply as an instructor.\n              </p>\n              <Button onClick={() => window.location.href = \"/api/login\"}>\n                Log In to Continue\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary via-primary/90 to-primary/70 text-primary-foreground py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-6\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold leading-tight\">\n              Become a CIMA Instructor\n            </h1>\n            <p className=\"text-xl text-primary-foreground/90 max-w-3xl mx-auto leading-relaxed\">\n              Share your expertise in Alternative Dispute Resolution and help professionals worldwide advance their careers.\n            </p>\n            \n            {/* Benefits */}\n            <div className=\"grid md:grid-cols-3 gap-8 mt-12\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Global Reach</h3>\n                <p className=\"text-primary-foreground/80\">Teach thousands of students worldwide</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <DollarSign className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Earn Revenue</h3>\n                <p className=\"text-primary-foreground/80\">Generate income from your expertise</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Award className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Build Authority</h3>\n                <p className=\"text-primary-foreground/80\">Establish yourself as a thought leader</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Application Form */}\n      <section className=\"py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-center mb-4\">Instructor Application</h2>\n            <p className=\"text-muted-foreground text-center\">\n              Please provide detailed information about your background and expertise.\n            </p>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"flex items-center space-x-4\">\n              <div className={`flex items-center justify-center w-10 h-10 rounded-full ${\n                step >= 1 ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n              }`}>\n                1\n              </div>\n              <div className={`w-16 h-1 ${step >= 2 ? 'bg-primary' : 'bg-muted'}`} />\n              <div className={`flex items-center justify-center w-10 h-10 rounded-full ${\n                step >= 2 ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n              }`}>\n                2\n              </div>\n              <div className={`w-16 h-1 ${step >= 3 ? 'bg-primary' : 'bg-muted'}`} />\n              <div className={`flex items-center justify-center w-10 h-10 rounded-full ${\n                step >= 3 ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n              }`}>\n                3\n              </div>\n            </div>\n          </div>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            {step === 1 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"w-5 h-5 mr-2\" />\n                    Personal Information\n                  </CardTitle>\n                  <CardDescription>\n                    Tell us about yourself and your professional background.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        placeholder=\"Your first name\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        placeholder=\"Your last name\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        {...form.register(\"email\")}\n                        placeholder=\"your.email@example.com\"\n                      />\n                      {form.formState.errors.email && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        {...form.register(\"phone\")}\n                        placeholder=\"+1 (555) 123-4567\"\n                      />\n                      {form.formState.errors.phone && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.phone.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"bio\">Professional Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      {...form.register(\"bio\")}\n                      placeholder=\"Tell us about your professional background, current role, and what motivates you to teach...\"\n                      rows={4}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {form.watch(\"bio\")?.length || 0}/500 characters (minimum 100)\n                    </p>\n                    {form.formState.errors.bio && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.bio.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button type=\"button\" onClick={() => setStep(2)}>\n                      Next Step\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {step === 2 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <GraduationCap className=\"w-5 h-5 mr-2\" />\n                    Professional Experience\n                  </CardTitle>\n                  <CardDescription>\n                    Share your expertise and qualifications in ADR.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"experience\">Professional Experience</Label>\n                    <Textarea\n                      id=\"experience\"\n                      {...form.register(\"experience\")}\n                      placeholder=\"Describe your professional experience in Alternative Dispute Resolution, including years of practice, notable cases, and current position...\"\n                      rows={4}\n                    />\n                    {form.formState.errors.experience && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.experience.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"qualifications\">Qualifications & Certifications</Label>\n                    <Textarea\n                      id=\"qualifications\"\n                      {...form.register(\"qualifications\")}\n                      placeholder=\"List your education, certifications, bar admissions, and relevant qualifications...\"\n                      rows={4}\n                    />\n                    {form.formState.errors.qualifications && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.qualifications.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"previousTeaching\">Teaching Experience</Label>\n                    <Textarea\n                      id=\"previousTeaching\"\n                      {...form.register(\"previousTeaching\")}\n                      placeholder=\"Describe any previous teaching, training, or mentoring experience...\"\n                      rows={3}\n                    />\n                    {form.formState.errors.previousTeaching && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {form.formState.errors.previousTeaching.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label>Areas of Expertise</Label>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Select all areas where you have expertise to teach.\n                    </p>\n                    <div className=\"grid md:grid-cols-2 gap-3\">\n                      {expertiseAreas.map((area) => (\n                        <div key={area} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={area}\n                            checked={selectedExpertise.includes(area)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setSelectedExpertise([...selectedExpertise, area]);\n                              } else {\n                                setSelectedExpertise(selectedExpertise.filter(e => e !== area));\n                              }\n                            }}\n                          />\n                          <Label htmlFor={area} className=\"text-sm font-normal\">\n                            {area}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                    {selectedExpertise.length === 0 && (\n                      <p className=\"text-sm text-destructive mt-2\">\n                        Please select at least one area of expertise.\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setStep(1)}>\n                      Previous\n                    </Button>\n                    <Button type=\"button\" onClick={() => setStep(3)}>\n                      Next Step\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {step === 3 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2\" />\n                    Documents & Final Steps\n                  </CardTitle>\n                  <CardDescription>\n                    Upload supporting documents and review your application.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* File Upload Placeholders */}\n                  <div>\n                    <Label>CV/Resume (Optional)</Label>\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                      <Upload className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Upload your CV or resume (PDF, DOC, or DOCX)\n                      </p>\n                      <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" disabled>\n                        Choose File (Coming Soon)\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Video Introduction (Optional)</Label>\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                      <Video className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Record a 2-3 minute introduction video (MP4, MOV, or AVI)\n                      </p>\n                      <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" disabled>\n                        Upload Video (Coming Soon)\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Terms Agreement */}\n                  <div className=\"flex items-start space-x-2\">\n                    <Checkbox\n                      id=\"agreedToTerms\"\n                      checked={form.watch(\"agreedToTerms\")}\n                      onCheckedChange={(checked) => form.setValue(\"agreedToTerms\", checked as boolean)}\n                    />\n                    <Label htmlFor=\"agreedToTerms\" className=\"text-sm leading-relaxed\">\n                      I agree to CIMA's instructor terms and conditions, including content guidelines, \n                      revenue sharing agreement, and professional conduct standards.\n                    </Label>\n                  </div>\n                  {form.formState.errors.agreedToTerms && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.agreedToTerms.message}\n                    </p>\n                  )}\n\n                  {/* Submit */}\n                  <div className=\"bg-muted/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold mb-2\">What happens next?</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Our team will review your application within 3-5 business days</li>\n                      <li>• We may contact you for additional information or an interview</li>\n                      <li>• Once approved, you'll receive access to create and publish courses</li>\n                      <li>• You'll be notified via email about the status of your application</li>\n                    </ul>\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setStep(2)}>\n                      Previous\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={submitApplication.isPending || !form.watch(\"agreedToTerms\")}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      {submitApplication.isPending ? (\n                        <>\n                          <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Submitting...\n                        </>\n                      ) : (\n                        <>\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Submit Application\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </form>\n\n          {/* Why Teach Section */}\n          <Card className=\"mt-12\">\n            <CardHeader>\n              <CardTitle>Why Teach with CIMA?</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                <div>\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Star className=\"w-4 h-4 mr-2 text-yellow-500\" />\n                    Professional Platform\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Join a respected platform dedicated to Alternative Dispute Resolution education.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Users className=\"w-4 h-4 mr-2 text-blue-500\" />\n                    Global Community\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Connect with ADR professionals and students from around the world.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <BookOpen className=\"w-4 h-4 mr-2 text-green-500\" />\n                    Course Creation Tools\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Access powerful tools to create engaging courses with video, quizzes, and resources.\n                  </p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Award className=\"w-4 h-4 mr-2 text-purple-500\" />\n                    Recognition & Impact\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Build your reputation while making a meaningful impact on the ADR field.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":23895},"client/src/pages/admin-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Users, Settings } from \"lucide-react\";\n\nconst adminSetupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  setupKey: z.string().min(1, \"Setup key is required\"),\n});\n\ntype AdminSetupForm = z.infer<typeof adminSetupSchema>;\n\nexport default function AdminSetup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isChecking, setIsChecking] = useState(false);\n\n  const form = useForm<AdminSetupForm>({\n    resolver: zodResolver(adminSetupSchema),\n    defaultValues: {\n      email: \"\",\n      setupKey: \"\",\n    },\n  });\n\n  const setupMutation = useMutation({\n    mutationFn: async (data: AdminSetupForm) => {\n      return await apiRequest(\"POST\", \"/api/admin/setup\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Admin Setup Complete\",\n        description: \"You can now access the admin dashboard. Please log in with your account.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Setup Failed\",\n        description: error.message || \"Failed to setup admin account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkUserMutation = useMutation({\n    mutationFn: async (email: string) => {\n      return await apiRequest(\"POST\", \"/api/admin/check-user\", { email });\n    },\n    onSuccess: (data: any) => {\n      if (data.exists) {\n        toast({\n          title: \"User Found\",\n          description: `User ${data.user.firstName} ${data.user.lastName} will be made admin`,\n        });\n      } else {\n        toast({\n          title: \"User Not Found\",\n          description: \"Please make sure the user has registered first\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to check user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCheckUser = async () => {\n    const email = form.getValues(\"email\");\n    if (!email) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter an email address first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsChecking(true);\n    await checkUserMutation.mutateAsync(email);\n    setIsChecking(false);\n  };\n\n  const onSubmit = (data: AdminSetupForm) => {\n    setupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n            <Shield className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl\">CIMA Learn Admin Setup</CardTitle>\n            <CardDescription>\n              Set up the first admin account for your platform\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>User Email</FormLabel>\n                    <div className=\"flex gap-2\">\n                      <FormControl>\n                        <Input\n                          placeholder=\"admin@thecima.org\"\n                          {...field}\n                          data-testid=\"input-admin-email\"\n                        />\n                      </FormControl>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleCheckUser}\n                        disabled={isChecking || checkUserMutation.isPending}\n                        data-testid=\"button-check-user\"\n                      >\n                        <Users className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Enter the email of a registered user to make them admin\n                    </p>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"setupKey\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Setup Key</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter setup key\"\n                        {...field}\n                        data-testid=\"input-setup-key\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Contact platform developer for the setup key\n                    </p>\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={setupMutation.isPending}\n                data-testid=\"button-setup-admin\"\n              >\n                {setupMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    Setting up...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Settings className=\"w-4 h-4\" />\n                    Setup Admin Account\n                  </div>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <h4 className=\"text-sm font-medium mb-2\">Setup Instructions:</h4>\n            <ol className=\"text-xs text-muted-foreground space-y-1\">\n              <li>1. Register a normal user account first</li>\n              <li>2. Enter that user's email above</li>\n              <li>3. Use the setup key provided by the developer</li>\n              <li>4. The user will be promoted to admin</li>\n            </ol>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7221}},"version":1}